%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.8
-module(ots_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_PrimaryKeyType/1, enum_value_by_symbol_PrimaryKeyType/1]).
-export([enum_symbol_by_value_PrimaryKeyOption/1, enum_value_by_symbol_PrimaryKeyOption/1]).
-export([enum_symbol_by_value_BloomFilterType/1, enum_value_by_symbol_BloomFilterType/1]).
-export([enum_symbol_by_value_TableStatus/1, enum_value_by_symbol_TableStatus/1]).
-export([enum_symbol_by_value_RowExistenceExpectation/1, enum_value_by_symbol_RowExistenceExpectation/1]).
-export([enum_symbol_by_value_ReturnType/1, enum_value_by_symbol_ReturnType/1]).
-export([enum_symbol_by_value_OperationType/1, enum_value_by_symbol_OperationType/1]).
-export([enum_symbol_by_value_Direction/1, enum_value_by_symbol_Direction/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("ots_proto.hrl").
-include("gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Condition'{} -> e_msg_Condition(Msg, TrUserData);
      #'CapacityUnit'{} ->
	  e_msg_CapacityUnit(Msg, TrUserData);
      #'ConsumedCapacity'{} ->
	  e_msg_ConsumedCapacity(Msg, TrUserData);
      #'ComputeSplitPointsBySizeResponse.SplitLocation'{} ->
	  'e_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Msg,
								 TrUserData);
      #'PrimaryKeySchema'{} ->
	  e_msg_PrimaryKeySchema(Msg, TrUserData);
      #'ComputeSplitPointsBySizeResponse'{} ->
	  e_msg_ComputeSplitPointsBySizeResponse(Msg, TrUserData);
      #'DeleteTableResponse'{} ->
	  e_msg_DeleteTableResponse(Msg, TrUserData);
      #'CreateTableResponse'{} ->
	  e_msg_CreateTableResponse(Msg, TrUserData);
      #'TableOptions'{} ->
	  e_msg_TableOptions(Msg, TrUserData);
      #'ReservedThroughputDetails'{} ->
	  e_msg_ReservedThroughputDetails(Msg, TrUserData);
      #'TableMeta'{} -> e_msg_TableMeta(Msg, TrUserData);
      #'DescribeTableResponse'{} ->
	  e_msg_DescribeTableResponse(Msg, TrUserData);
      #'PartitionRange'{} ->
	  e_msg_PartitionRange(Msg, TrUserData);
      #'ReturnContent'{} ->
	  e_msg_ReturnContent(Msg, TrUserData);
      #'RowInBatchWriteRowRequest'{} ->
	  e_msg_RowInBatchWriteRowRequest(Msg, TrUserData);
      #'TableInBatchWriteRowRequest'{} ->
	  e_msg_TableInBatchWriteRowRequest(Msg, TrUserData);
      #'BatchWriteRowRequest'{} ->
	  e_msg_BatchWriteRowRequest(Msg, TrUserData);
      #'UnloadTableRequest'{} ->
	  e_msg_UnloadTableRequest(Msg, TrUserData);
      #'LoadTableRequest'{} ->
	  e_msg_LoadTableRequest(Msg, TrUserData);
      #'PutRowRequest'{} ->
	  e_msg_PutRowRequest(Msg, TrUserData);
      #'Error'{} -> e_msg_Error(Msg, TrUserData);
      #'RowInBatchGetRowResponse'{} ->
	  e_msg_RowInBatchGetRowResponse(Msg, TrUserData);
      #'UpdateTableResponse'{} ->
	  e_msg_UpdateTableResponse(Msg, TrUserData);
      #'PutRowResponse'{} ->
	  e_msg_PutRowResponse(Msg, TrUserData);
      #'ReservedThroughput'{} ->
	  e_msg_ReservedThroughput(Msg, TrUserData);
      #'TimeRange'{} -> e_msg_TimeRange(Msg, TrUserData);
      #'TableInBatchGetRowRequest'{} ->
	  e_msg_TableInBatchGetRowRequest(Msg, TrUserData);
      #'BatchGetRowRequest'{} ->
	  e_msg_BatchGetRowRequest(Msg, TrUserData);
      #'DeleteTableRequest'{} ->
	  e_msg_DeleteTableRequest(Msg, TrUserData);
      #'ListTableRequest'{} ->
	  e_msg_ListTableRequest(Msg, TrUserData);
      #'UpdateTableRequest'{} ->
	  e_msg_UpdateTableRequest(Msg, TrUserData);
      #'CreateTableRequest'{} ->
	  e_msg_CreateTableRequest(Msg, TrUserData);
      #'GetRowRequest'{} ->
	  e_msg_GetRowRequest(Msg, TrUserData);
      #'DescribeTableRequest'{} ->
	  e_msg_DescribeTableRequest(Msg, TrUserData);
      #'DeleteRowResponse'{} ->
	  e_msg_DeleteRowResponse(Msg, TrUserData);
      #'UnloadTableResponse'{} ->
	  e_msg_UnloadTableResponse(Msg, TrUserData);
      #'RowInBatchWriteRowResponse'{} ->
	  e_msg_RowInBatchWriteRowResponse(Msg, TrUserData);
      #'TableInBatchWriteRowResponse'{} ->
	  e_msg_TableInBatchWriteRowResponse(Msg, TrUserData);
      #'BatchWriteRowResponse'{} ->
	  e_msg_BatchWriteRowResponse(Msg, TrUserData);
      #'UpdateRowResponse'{} ->
	  e_msg_UpdateRowResponse(Msg, TrUserData);
      #'GetRowResponse'{} ->
	  e_msg_GetRowResponse(Msg, TrUserData);
      #'GetRangeResponse'{} ->
	  e_msg_GetRangeResponse(Msg, TrUserData);
      #'TableInBatchGetRowResponse'{} ->
	  e_msg_TableInBatchGetRowResponse(Msg, TrUserData);
      #'BatchGetRowResponse'{} ->
	  e_msg_BatchGetRowResponse(Msg, TrUserData);
      #'LoadTableResponse'{} ->
	  e_msg_LoadTableResponse(Msg, TrUserData);
      #'ListTableResponse'{} ->
	  e_msg_ListTableResponse(Msg, TrUserData);
      #'GetRangeRequest'{} ->
	  e_msg_GetRangeRequest(Msg, TrUserData);
      #'UpdateRowRequest'{} ->
	  e_msg_UpdateRowRequest(Msg, TrUserData);
      #'DeleteRowRequest'{} ->
	  e_msg_DeleteRowRequest(Msg, TrUserData);
      #'ComputeSplitPointsBySizeRequest'{} ->
	  e_msg_ComputeSplitPointsBySizeRequest(Msg, TrUserData)
    end.



e_msg_Condition(Msg, TrUserData) ->
    e_msg_Condition(Msg, <<>>, TrUserData).


e_msg_Condition(#'Condition'{row_existence = F1,
			     column_condition = F2},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_RowExistenceExpectation(TrF1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_CapacityUnit(Msg, TrUserData) ->
    e_msg_CapacityUnit(Msg, <<>>, TrUserData).


e_msg_CapacityUnit(#'CapacityUnit'{read = F1,
				   write = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_int32(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_ConsumedCapacity(Msg, TrUserData) ->
    e_msg_ConsumedCapacity(Msg, <<>>, TrUserData).


e_msg_ConsumedCapacity(#'ConsumedCapacity'{capacity_unit
					       = F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_ConsumedCapacity_capacity_unit(TrF1,
					      <<Bin/binary, 10>>, TrUserData)
    end.

'e_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Msg,
						       TrUserData) ->
    'e_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Msg,
							   <<>>, TrUserData).


'e_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(#'ComputeSplitPointsBySizeResponse.SplitLocation'{location
													     =
													     F1,
													 repeat
													     =
													     F2},
						       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_sint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_PrimaryKeySchema(Msg, TrUserData) ->
    e_msg_PrimaryKeySchema(Msg, <<>>, TrUserData).


e_msg_PrimaryKeySchema(#'PrimaryKeySchema'{name = F1,
					   type = F2, option = F3},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_enum_PrimaryKeyType(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_enum_PrimaryKeyOption(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_ComputeSplitPointsBySizeResponse(Msg,
				       TrUserData) ->
    e_msg_ComputeSplitPointsBySizeResponse(Msg, <<>>,
					   TrUserData).


e_msg_ComputeSplitPointsBySizeResponse(#'ComputeSplitPointsBySizeResponse'{consumed
									       =
									       F1,
									   schema
									       =
									       F2,
									   split_points
									       =
									       F3,
									   locations
									       =
									       F4},
				       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_ComputeSplitPointsBySizeResponse_consumed(TrF1,
							      <<Bin/binary,
								10>>,
							      TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_ComputeSplitPointsBySizeResponse_schema(TrF2,
								  B1,
								  TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_ComputeSplitPointsBySizeResponse_split_points(TrF3,
									B2,
									TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_ComputeSplitPointsBySizeResponse_locations(TrF4,
								B3, TrUserData)
      end
    end.

e_msg_DeleteTableResponse(_Msg, _TrUserData) -> <<>>.

e_msg_CreateTableResponse(_Msg, _TrUserData) -> <<>>.

e_msg_TableOptions(Msg, TrUserData) ->
    e_msg_TableOptions(Msg, <<>>, TrUserData).


e_msg_TableOptions(#'TableOptions'{time_to_live = F1,
				   max_versions = F2, bloom_filter_type = F3,
				   block_size = F4,
				   deviation_cell_version_in_sec = F5},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_enum_BloomFilterType(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_int32(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_type_int64(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_ReservedThroughputDetails(Msg, TrUserData) ->
    e_msg_ReservedThroughputDetails(Msg, <<>>, TrUserData).


e_msg_ReservedThroughputDetails(#'ReservedThroughputDetails'{capacity_unit
								 = F1,
							     last_increase_time
								 = F2,
							     last_decrease_time
								 = F3},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_ReservedThroughputDetails_capacity_unit(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int64(TrF2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_int64(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_TableMeta(Msg, TrUserData) ->
    e_msg_TableMeta(Msg, <<>>, TrUserData).


e_msg_TableMeta(#'TableMeta'{table_name = F1,
			     primary_key = F2},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_TableMeta_primary_key(TrF2, B1, TrUserData)
      end
    end.

e_msg_DescribeTableResponse(Msg, TrUserData) ->
    e_msg_DescribeTableResponse(Msg, <<>>, TrUserData).


e_msg_DescribeTableResponse(#'DescribeTableResponse'{table_meta
							 = F1,
						     reserved_throughput_details
							 = F2,
						     table_options = F3,
						     table_status = F4,
						     shard_splits = F5},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_DescribeTableResponse_table_meta(TrF1,
						     <<Bin/binary, 10>>,
						     TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_mfield_DescribeTableResponse_reserved_throughput_details(TrF2,
								      <<B1/binary,
									18>>,
								      TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_mfield_DescribeTableResponse_table_options(TrF3,
							<<B2/binary, 26>>,
							TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_enum_TableStatus(TrF4, <<B3/binary, 32>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     e_field_DescribeTableResponse_shard_splits(TrF5, B4,
							TrUserData)
      end
    end.

e_msg_PartitionRange(Msg, TrUserData) ->
    e_msg_PartitionRange(Msg, <<>>, TrUserData).


e_msg_PartitionRange(#'PartitionRange'{'begin' = F1,
				       'end' = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bytes(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bytes(TrF2, <<B1/binary, 18>>)
    end.

e_msg_ReturnContent(Msg, TrUserData) ->
    e_msg_ReturnContent(Msg, <<>>, TrUserData).


e_msg_ReturnContent(#'ReturnContent'{return_type = F1},
		    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_enum_ReturnType(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_RowInBatchWriteRowRequest(Msg, TrUserData) ->
    e_msg_RowInBatchWriteRowRequest(Msg, <<>>, TrUserData).


e_msg_RowInBatchWriteRowRequest(#'RowInBatchWriteRowRequest'{type
								 = F1,
							     row_change = F2,
							     condition = F3,
							     return_content =
								 F4},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_OperationType(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_mfield_RowInBatchWriteRowRequest_condition(TrF3,
							<<B2/binary, 26>>,
							TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_mfield_RowInBatchWriteRowRequest_return_content(TrF4,
							       <<B3/binary,
								 34>>,
							       TrUserData)
	   end
    end.

e_msg_TableInBatchWriteRowRequest(Msg, TrUserData) ->
    e_msg_TableInBatchWriteRowRequest(Msg, <<>>,
				      TrUserData).


e_msg_TableInBatchWriteRowRequest(#'TableInBatchWriteRowRequest'{table_name
								     = F1,
								 rows = F2},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_TableInBatchWriteRowRequest_rows(TrF2, B1,
						      TrUserData)
      end
    end.

e_msg_BatchWriteRowRequest(Msg, TrUserData) ->
    e_msg_BatchWriteRowRequest(Msg, <<>>, TrUserData).


e_msg_BatchWriteRowRequest(#'BatchWriteRowRequest'{tables
						       = F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_BatchWriteRowRequest_tables(TrF1, Bin,
						 TrUserData)
      end
    end.

e_msg_UnloadTableRequest(Msg, TrUserData) ->
    e_msg_UnloadTableRequest(Msg, <<>>, TrUserData).


e_msg_UnloadTableRequest(#'UnloadTableRequest'{table_name
						   = F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_LoadTableRequest(Msg, TrUserData) ->
    e_msg_LoadTableRequest(Msg, <<>>, TrUserData).


e_msg_LoadTableRequest(#'LoadTableRequest'{table_name =
					       F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_PutRowRequest(Msg, TrUserData) ->
    e_msg_PutRowRequest(Msg, <<>>, TrUserData).


e_msg_PutRowRequest(#'PutRowRequest'{table_name = F1,
				     row = F2, condition = F3,
				     return_content = F4},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_mfield_PutRowRequest_condition(TrF3,
					    <<B2/binary, 26>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_mfield_PutRowRequest_return_content(TrF4,
						   <<B3/binary, 34>>,
						   TrUserData)
	   end
    end.

e_msg_Error(Msg, TrUserData) ->
    e_msg_Error(Msg, <<>>, TrUserData).


e_msg_Error(#'Error'{code = F1, message = F2}, Bin,
	    TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_RowInBatchGetRowResponse(Msg, TrUserData) ->
    e_msg_RowInBatchGetRowResponse(Msg, <<>>, TrUserData).


e_msg_RowInBatchGetRowResponse(#'RowInBatchGetRowResponse'{is_ok
							       = F1,
							   error = F2,
							   consumed = F3,
							   row = F4,
							   next_token = F5},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_RowInBatchGetRowResponse_error(TrF2,
							  <<B1/binary, 18>>,
							  TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_RowInBatchGetRowResponse_consumed(TrF3,
							     <<B2/binary, 26>>,
							     TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bytes(TrF4, <<B3/binary, 34>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_type_bytes(TrF5, <<B4/binary, 42>>)
	   end
    end.

e_msg_UpdateTableResponse(Msg, TrUserData) ->
    e_msg_UpdateTableResponse(Msg, <<>>, TrUserData).


e_msg_UpdateTableResponse(#'UpdateTableResponse'{reserved_throughput_details
						     = F1,
						 table_options = F2},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_UpdateTableResponse_reserved_throughput_details(TrF1,
								    <<Bin/binary,
								      10>>,
								    TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_UpdateTableResponse_table_options(TrF2,
						 <<B1/binary, 18>>, TrUserData)
    end.

e_msg_PutRowResponse(Msg, TrUserData) ->
    e_msg_PutRowResponse(Msg, <<>>, TrUserData).


e_msg_PutRowResponse(#'PutRowResponse'{consumed = F1,
				       row = F2},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_PutRowResponse_consumed(TrF1,
					    <<Bin/binary, 10>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_ReservedThroughput(Msg, TrUserData) ->
    e_msg_ReservedThroughput(Msg, <<>>, TrUserData).


e_msg_ReservedThroughput(#'ReservedThroughput'{capacity_unit
						   = F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_ReservedThroughput_capacity_unit(TrF1,
						<<Bin/binary, 10>>, TrUserData)
    end.

e_msg_TimeRange(Msg, TrUserData) ->
    e_msg_TimeRange(Msg, <<>>, TrUserData).


e_msg_TimeRange(#'TimeRange'{start_time = F1,
			     end_time = F2, specific_time = F3},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int64(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int64(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_int64(TrF3, <<B2/binary, 24>>)
	   end
    end.

e_msg_TableInBatchGetRowRequest(Msg, TrUserData) ->
    e_msg_TableInBatchGetRowRequest(Msg, <<>>, TrUserData).


e_msg_TableInBatchGetRowRequest(#'TableInBatchGetRowRequest'{table_name
								 = F1,
							     primary_key = F2,
							     token = F3,
							     columns_to_get =
								 F4,
							     time_range = F5,
							     max_versions = F6,
							     cache_blocks = F7,
							     filter = F8,
							     start_column = F9,
							     end_column = F10},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_TableInBatchGetRowRequest_primary_key(TrF2, B1,
								TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_TableInBatchGetRowRequest_token(TrF3, B2,
							  TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_TableInBatchGetRowRequest_columns_to_get(TrF4,
								   B3,
								   TrUserData)
	   end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_mfield_TableInBatchGetRowRequest_time_range(TrF5,
								<<B4/binary,
								  42>>,
								TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_int32(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bool(TrF7, <<B6/binary, 56>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_bytes(TrF8, <<B7/binary, 66>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_string(TrF9, <<B8/binary, 74>>)
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     e_type_string(TrF10, <<B9/binary, 82>>)
	   end
    end.

e_msg_BatchGetRowRequest(Msg, TrUserData) ->
    e_msg_BatchGetRowRequest(Msg, <<>>, TrUserData).


e_msg_BatchGetRowRequest(#'BatchGetRowRequest'{tables =
						   F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_BatchGetRowRequest_tables(TrF1, Bin, TrUserData)
      end
    end.

e_msg_DeleteTableRequest(Msg, TrUserData) ->
    e_msg_DeleteTableRequest(Msg, <<>>, TrUserData).


e_msg_DeleteTableRequest(#'DeleteTableRequest'{table_name
						   = F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_ListTableRequest(_Msg, _TrUserData) -> <<>>.

e_msg_UpdateTableRequest(Msg, TrUserData) ->
    e_msg_UpdateTableRequest(Msg, <<>>, TrUserData).


e_msg_UpdateTableRequest(#'UpdateTableRequest'{table_name
						   = F1,
					       reserved_throughput = F2,
					       table_options = F3},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_UpdateTableRequest_reserved_throughput(TrF2,
								  <<B1/binary,
								    18>>,
								  TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_UpdateTableRequest_table_options(TrF3,
						       <<B2/binary, 26>>,
						       TrUserData)
	   end
    end.

e_msg_CreateTableRequest(Msg, TrUserData) ->
    e_msg_CreateTableRequest(Msg, <<>>, TrUserData).


e_msg_CreateTableRequest(#'CreateTableRequest'{table_meta
						   = F1,
					       reserved_throughput = F2,
					       table_options = F3,
					       partitions = F4},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_CreateTableRequest_table_meta(TrF1,
						  <<Bin/binary, 10>>,
						  TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_mfield_CreateTableRequest_reserved_throughput(TrF2,
							   <<B1/binary, 18>>,
							   TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_CreateTableRequest_table_options(TrF3,
							    <<B2/binary, 26>>,
							    TrUserData)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_CreateTableRequest_partitions(TrF4, B3,
						   TrUserData)
      end
    end.

e_msg_GetRowRequest(Msg, TrUserData) ->
    e_msg_GetRowRequest(Msg, <<>>, TrUserData).


e_msg_GetRowRequest(#'GetRowRequest'{table_name = F1,
				     primary_key = F2, columns_to_get = F3,
				     time_range = F4, max_versions = F5,
				     cache_blocks = F6, filter = F7,
				     start_column = F8, end_column = F9,
				     token = F10},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_GetRowRequest_columns_to_get(TrF3, B2,
						       TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_GetRowRequest_time_range(TrF4,
						    <<B3/binary, 34>>,
						    TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_int32(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_bool(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_bytes(TrF7, <<B6/binary, 58>>)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_string(TrF8, <<B7/binary, 66>>)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_string(TrF9, <<B8/binary, 74>>)
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     e_type_bytes(TrF10, <<B9/binary, 82>>)
	   end
    end.

e_msg_DescribeTableRequest(Msg, TrUserData) ->
    e_msg_DescribeTableRequest(Msg, <<>>, TrUserData).


e_msg_DescribeTableRequest(#'DescribeTableRequest'{table_name
						       = F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_DeleteRowResponse(Msg, TrUserData) ->
    e_msg_DeleteRowResponse(Msg, <<>>, TrUserData).


e_msg_DeleteRowResponse(#'DeleteRowResponse'{consumed =
						 F1,
					     row = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_DeleteRowResponse_consumed(TrF1,
					       <<Bin/binary, 10>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_UnloadTableResponse(_Msg, _TrUserData) -> <<>>.

e_msg_RowInBatchWriteRowResponse(Msg, TrUserData) ->
    e_msg_RowInBatchWriteRowResponse(Msg, <<>>, TrUserData).


e_msg_RowInBatchWriteRowResponse(#'RowInBatchWriteRowResponse'{is_ok
								   = F1,
							       error = F2,
							       consumed = F3,
							       row = F4},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_RowInBatchWriteRowResponse_error(TrF2,
							    <<B1/binary, 18>>,
							    TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_RowInBatchWriteRowResponse_consumed(TrF3,
							       <<B2/binary,
								 26>>,
							       TrUserData)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_bytes(TrF4, <<B3/binary, 34>>)
	   end
    end.

e_msg_TableInBatchWriteRowResponse(Msg, TrUserData) ->
    e_msg_TableInBatchWriteRowResponse(Msg, <<>>,
				       TrUserData).


e_msg_TableInBatchWriteRowResponse(#'TableInBatchWriteRowResponse'{table_name
								       = F1,
								   rows = F2},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_TableInBatchWriteRowResponse_rows(TrF2, B1,
						       TrUserData)
      end
    end.

e_msg_BatchWriteRowResponse(Msg, TrUserData) ->
    e_msg_BatchWriteRowResponse(Msg, <<>>, TrUserData).


e_msg_BatchWriteRowResponse(#'BatchWriteRowResponse'{tables
							 = F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_BatchWriteRowResponse_tables(TrF1, Bin,
						  TrUserData)
      end
    end.

e_msg_UpdateRowResponse(Msg, TrUserData) ->
    e_msg_UpdateRowResponse(Msg, <<>>, TrUserData).


e_msg_UpdateRowResponse(#'UpdateRowResponse'{consumed =
						 F1,
					     row = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_UpdateRowResponse_consumed(TrF1,
					       <<Bin/binary, 10>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_bytes(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_GetRowResponse(Msg, TrUserData) ->
    e_msg_GetRowResponse(Msg, <<>>, TrUserData).


e_msg_GetRowResponse(#'GetRowResponse'{consumed = F1,
				       row = F2, next_token = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_GetRowResponse_consumed(TrF1,
					    <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bytes(TrF3, <<B2/binary, 26>>)
	   end
    end.

e_msg_GetRangeResponse(Msg, TrUserData) ->
    e_msg_GetRangeResponse(Msg, <<>>, TrUserData).


e_msg_GetRangeResponse(#'GetRangeResponse'{consumed =
					       F1,
					   rows = F2,
					   next_start_primary_key = F3,
					   next_token = F4},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_GetRangeResponse_consumed(TrF1,
					      <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_bytes(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_bytes(TrF4, <<B3/binary, 34>>)
	   end
    end.

e_msg_TableInBatchGetRowResponse(Msg, TrUserData) ->
    e_msg_TableInBatchGetRowResponse(Msg, <<>>, TrUserData).


e_msg_TableInBatchGetRowResponse(#'TableInBatchGetRowResponse'{table_name
								   = F1,
							       rows = F2},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_TableInBatchGetRowResponse_rows(TrF2, B1,
						     TrUserData)
      end
    end.

e_msg_BatchGetRowResponse(Msg, TrUserData) ->
    e_msg_BatchGetRowResponse(Msg, <<>>, TrUserData).


e_msg_BatchGetRowResponse(#'BatchGetRowResponse'{tables
						     = F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_BatchGetRowResponse_tables(TrF1, Bin,
						TrUserData)
      end
    end.

e_msg_LoadTableResponse(_Msg, _TrUserData) -> <<>>.

e_msg_ListTableResponse(Msg, TrUserData) ->
    e_msg_ListTableResponse(Msg, <<>>, TrUserData).


e_msg_ListTableResponse(#'ListTableResponse'{table_names
						 = F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_ListTableResponse_table_names(TrF1, Bin,
						   TrUserData)
      end
    end.

e_msg_GetRangeRequest(Msg, TrUserData) ->
    e_msg_GetRangeRequest(Msg, <<>>, TrUserData).


e_msg_GetRangeRequest(#'GetRangeRequest'{table_name =
					     F1,
					 direction = F2, columns_to_get = F3,
					 time_range = F4, max_versions = F5,
					 limit = F6,
					 inclusive_start_primary_key = F7,
					 exclusive_end_primary_key = F8,
					 cache_blocks = F9, filter = F10,
					 start_column = F11, end_column = F12,
					 token = F13},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_enum_Direction(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_GetRangeRequest_columns_to_get(TrF3, B2,
							 TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_GetRangeRequest_time_range(TrF4,
						      <<B3/binary, 34>>,
						      TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_int32(TrF5, <<B4/binary, 40>>)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_int32(TrF6, <<B5/binary, 48>>)
		end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_bytes(TrF7, <<B6/binary, 58>>)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_bytes(TrF8, <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_bool(TrF9, <<B8/binary, 72>>)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_bytes(TrF10, <<B9/binary, 82>>)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_string(TrF11, <<B10/binary, 90>>)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_type_string(TrF12, <<B11/binary, 98>>)
		 end
	  end,
    if F13 == undefined -> B12;
       true ->
	   begin
	     TrF13 = id(F13, TrUserData),
	     e_type_bytes(TrF13, <<B12/binary, 106>>)
	   end
    end.

e_msg_UpdateRowRequest(Msg, TrUserData) ->
    e_msg_UpdateRowRequest(Msg, <<>>, TrUserData).


e_msg_UpdateRowRequest(#'UpdateRowRequest'{table_name =
					       F1,
					   row_change = F2, condition = F3,
					   return_content = F4},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_mfield_UpdateRowRequest_condition(TrF3,
					       <<B2/binary, 26>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_mfield_UpdateRowRequest_return_content(TrF4,
						      <<B3/binary, 34>>,
						      TrUserData)
	   end
    end.

e_msg_DeleteRowRequest(Msg, TrUserData) ->
    e_msg_DeleteRowRequest(Msg, <<>>, TrUserData).


e_msg_DeleteRowRequest(#'DeleteRowRequest'{table_name =
					       F1,
					   primary_key = F2, condition = F3,
					   return_content = F4},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bytes(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_mfield_DeleteRowRequest_condition(TrF3,
					       <<B2/binary, 26>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_mfield_DeleteRowRequest_return_content(TrF4,
						      <<B3/binary, 34>>,
						      TrUserData)
	   end
    end.

e_msg_ComputeSplitPointsBySizeRequest(Msg,
				      TrUserData) ->
    e_msg_ComputeSplitPointsBySizeRequest(Msg, <<>>,
					  TrUserData).


e_msg_ComputeSplitPointsBySizeRequest(#'ComputeSplitPointsBySizeRequest'{table_name
									     =
									     F1,
									 split_size
									     =
									     F2},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int64(TrF2, <<B1/binary, 16>>)
    end.

e_mfield_ConsumedCapacity_capacity_unit(Msg, Bin,
					TrUserData) ->
    SubBin = e_msg_CapacityUnit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ComputeSplitPointsBySizeResponse_consumed(Msg,
						   Bin, TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ComputeSplitPointsBySizeResponse_schema(Msg,
						 Bin, TrUserData) ->
    SubBin = e_msg_PrimaryKeySchema(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ComputeSplitPointsBySizeResponse_schema([Elem
						 | Rest],
						Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_ComputeSplitPointsBySizeResponse_schema(id(Elem,
							    TrUserData),
							 Bin2, TrUserData),
    e_field_ComputeSplitPointsBySizeResponse_schema(Rest,
						    Bin3, TrUserData);
e_field_ComputeSplitPointsBySizeResponse_schema([], Bin,
						_TrUserData) ->
    Bin.

e_field_ComputeSplitPointsBySizeResponse_split_points([Elem
						       | Rest],
						      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_ComputeSplitPointsBySizeResponse_split_points(Rest,
							  Bin3, TrUserData);
e_field_ComputeSplitPointsBySizeResponse_split_points([],
						      Bin, _TrUserData) ->
    Bin.

e_mfield_ComputeSplitPointsBySizeResponse_locations(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'e_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Msg,
							       <<>>,
							       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ComputeSplitPointsBySizeResponse_locations([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_ComputeSplitPointsBySizeResponse_locations(id(Elem,
							       TrUserData),
							    Bin2, TrUserData),
    e_field_ComputeSplitPointsBySizeResponse_locations(Rest,
						       Bin3, TrUserData);
e_field_ComputeSplitPointsBySizeResponse_locations([],
						   Bin, _TrUserData) ->
    Bin.

e_mfield_ReservedThroughputDetails_capacity_unit(Msg,
						 Bin, TrUserData) ->
    SubBin = e_msg_CapacityUnit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TableMeta_primary_key(Msg, Bin, TrUserData) ->
    SubBin = e_msg_PrimaryKeySchema(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TableMeta_primary_key([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_TableMeta_primary_key(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_TableMeta_primary_key(Rest, Bin3, TrUserData);
e_field_TableMeta_primary_key([], Bin, _TrUserData) ->
    Bin.

e_mfield_DescribeTableResponse_table_meta(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_TableMeta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DescribeTableResponse_reserved_throughput_details(Msg,
							   Bin, TrUserData) ->
    SubBin = e_msg_ReservedThroughputDetails(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DescribeTableResponse_table_options(Msg, Bin,
					     TrUserData) ->
    SubBin = e_msg_TableOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DescribeTableResponse_shard_splits([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_DescribeTableResponse_shard_splits(Rest, Bin3,
					       TrUserData);
e_field_DescribeTableResponse_shard_splits([], Bin,
					   _TrUserData) ->
    Bin.

e_mfield_RowInBatchWriteRowRequest_condition(Msg, Bin,
					     TrUserData) ->
    SubBin = e_msg_Condition(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RowInBatchWriteRowRequest_return_content(Msg,
						  Bin, TrUserData) ->
    SubBin = e_msg_ReturnContent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TableInBatchWriteRowRequest_rows(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_RowInBatchWriteRowRequest(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TableInBatchWriteRowRequest_rows([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_TableInBatchWriteRowRequest_rows(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_TableInBatchWriteRowRequest_rows(Rest, Bin3,
					     TrUserData);
e_field_TableInBatchWriteRowRequest_rows([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_BatchWriteRowRequest_tables(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_TableInBatchWriteRowRequest(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BatchWriteRowRequest_tables([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_BatchWriteRowRequest_tables(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_BatchWriteRowRequest_tables(Rest, Bin3,
					TrUserData);
e_field_BatchWriteRowRequest_tables([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_PutRowRequest_condition(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_Condition(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_PutRowRequest_return_content(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_ReturnContent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RowInBatchGetRowResponse_error(Msg, Bin,
					TrUserData) ->
    SubBin = e_msg_Error(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RowInBatchGetRowResponse_consumed(Msg, Bin,
					   TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UpdateTableResponse_reserved_throughput_details(Msg,
							 Bin, TrUserData) ->
    SubBin = e_msg_ReservedThroughputDetails(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UpdateTableResponse_table_options(Msg, Bin,
					   TrUserData) ->
    SubBin = e_msg_TableOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_PutRowResponse_consumed(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ReservedThroughput_capacity_unit(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_CapacityUnit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TableInBatchGetRowRequest_primary_key([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_TableInBatchGetRowRequest_primary_key(Rest,
						  Bin3, TrUserData);
e_field_TableInBatchGetRowRequest_primary_key([], Bin,
					      _TrUserData) ->
    Bin.

e_field_TableInBatchGetRowRequest_token([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2),
    e_field_TableInBatchGetRowRequest_token(Rest, Bin3,
					    TrUserData);
e_field_TableInBatchGetRowRequest_token([], Bin,
					_TrUserData) ->
    Bin.

e_field_TableInBatchGetRowRequest_columns_to_get([Elem
						  | Rest],
						 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_TableInBatchGetRowRequest_columns_to_get(Rest,
						     Bin3, TrUserData);
e_field_TableInBatchGetRowRequest_columns_to_get([],
						 Bin, _TrUserData) ->
    Bin.

e_mfield_TableInBatchGetRowRequest_time_range(Msg, Bin,
					      TrUserData) ->
    SubBin = e_msg_TimeRange(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_BatchGetRowRequest_tables(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_TableInBatchGetRowRequest(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BatchGetRowRequest_tables([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_BatchGetRowRequest_tables(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_BatchGetRowRequest_tables(Rest, Bin3,
				      TrUserData);
e_field_BatchGetRowRequest_tables([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_UpdateTableRequest_reserved_throughput(Msg,
						Bin, TrUserData) ->
    SubBin = e_msg_ReservedThroughput(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UpdateTableRequest_table_options(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_TableOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CreateTableRequest_table_meta(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_TableMeta(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CreateTableRequest_reserved_throughput(Msg,
						Bin, TrUserData) ->
    SubBin = e_msg_ReservedThroughput(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CreateTableRequest_table_options(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_TableOptions(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CreateTableRequest_partitions(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_PartitionRange(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CreateTableRequest_partitions([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_CreateTableRequest_partitions(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_CreateTableRequest_partitions(Rest, Bin3,
					  TrUserData);
e_field_CreateTableRequest_partitions([], Bin,
				      _TrUserData) ->
    Bin.

e_field_GetRowRequest_columns_to_get([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_GetRowRequest_columns_to_get(Rest, Bin3,
					 TrUserData);
e_field_GetRowRequest_columns_to_get([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_GetRowRequest_time_range(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_TimeRange(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteRowResponse_consumed(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RowInBatchWriteRowResponse_error(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_Error(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RowInBatchWriteRowResponse_consumed(Msg, Bin,
					     TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TableInBatchWriteRowResponse_rows(Msg, Bin,
					   TrUserData) ->
    SubBin = e_msg_RowInBatchWriteRowResponse(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TableInBatchWriteRowResponse_rows([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_TableInBatchWriteRowResponse_rows(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_TableInBatchWriteRowResponse_rows(Rest, Bin3,
					      TrUserData);
e_field_TableInBatchWriteRowResponse_rows([], Bin,
					  _TrUserData) ->
    Bin.

e_mfield_BatchWriteRowResponse_tables(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_TableInBatchWriteRowResponse(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BatchWriteRowResponse_tables([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_BatchWriteRowResponse_tables(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_BatchWriteRowResponse_tables(Rest, Bin3,
					 TrUserData);
e_field_BatchWriteRowResponse_tables([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_UpdateRowResponse_consumed(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRowResponse_consumed(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRangeResponse_consumed(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_ConsumedCapacity(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TableInBatchGetRowResponse_rows(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_RowInBatchGetRowResponse(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TableInBatchGetRowResponse_rows([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_TableInBatchGetRowResponse_rows(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_TableInBatchGetRowResponse_rows(Rest, Bin3,
					    TrUserData);
e_field_TableInBatchGetRowResponse_rows([], Bin,
					_TrUserData) ->
    Bin.

e_mfield_BatchGetRowResponse_tables(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_TableInBatchGetRowResponse(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BatchGetRowResponse_tables([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_BatchGetRowResponse_tables(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_BatchGetRowResponse_tables(Rest, Bin3,
				       TrUserData);
e_field_BatchGetRowResponse_tables([], Bin,
				   _TrUserData) ->
    Bin.

e_field_ListTableResponse_table_names([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_ListTableResponse_table_names(Rest, Bin3,
					  TrUserData);
e_field_ListTableResponse_table_names([], Bin,
				      _TrUserData) ->
    Bin.

e_field_GetRangeRequest_columns_to_get([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_GetRangeRequest_columns_to_get(Rest, Bin3,
					   TrUserData);
e_field_GetRangeRequest_columns_to_get([], Bin,
				       _TrUserData) ->
    Bin.

e_mfield_GetRangeRequest_time_range(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_TimeRange(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UpdateRowRequest_condition(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_Condition(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UpdateRowRequest_return_content(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_ReturnContent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteRowRequest_condition(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_Condition(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteRowRequest_return_content(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_ReturnContent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



e_enum_PrimaryKeyType('INTEGER', Bin) ->
    <<Bin/binary, 1>>;
e_enum_PrimaryKeyType('STRING', Bin) ->
    <<Bin/binary, 2>>;
e_enum_PrimaryKeyType('BINARY', Bin) ->
    <<Bin/binary, 3>>;
e_enum_PrimaryKeyType(V, Bin) -> e_varint(V, Bin).

e_enum_PrimaryKeyOption('AUTO_INCREMENT', Bin) ->
    <<Bin/binary, 1>>;
e_enum_PrimaryKeyOption(V, Bin) -> e_varint(V, Bin).

e_enum_BloomFilterType('NONE', Bin) ->
    <<Bin/binary, 1>>;
e_enum_BloomFilterType('CELL', Bin) ->
    <<Bin/binary, 2>>;
e_enum_BloomFilterType('ROW', Bin) -> <<Bin/binary, 3>>;
e_enum_BloomFilterType(V, Bin) -> e_varint(V, Bin).

e_enum_TableStatus('ACTIVE', Bin) -> <<Bin/binary, 1>>;
e_enum_TableStatus('INACTIVE', Bin) ->
    <<Bin/binary, 2>>;
e_enum_TableStatus('LOADING', Bin) -> <<Bin/binary, 3>>;
e_enum_TableStatus('UNLOADING', Bin) ->
    <<Bin/binary, 4>>;
e_enum_TableStatus('UPDATING', Bin) ->
    <<Bin/binary, 5>>;
e_enum_TableStatus(V, Bin) -> e_varint(V, Bin).

e_enum_RowExistenceExpectation('IGNORE', Bin) ->
    <<Bin/binary, 0>>;
e_enum_RowExistenceExpectation('EXPECT_EXIST', Bin) ->
    <<Bin/binary, 1>>;
e_enum_RowExistenceExpectation('EXPECT_NOT_EXIST',
			       Bin) ->
    <<Bin/binary, 2>>;
e_enum_RowExistenceExpectation(V, Bin) ->
    e_varint(V, Bin).

e_enum_ReturnType('RT_NONE', Bin) -> <<Bin/binary, 0>>;
e_enum_ReturnType('RT_PK', Bin) -> <<Bin/binary, 1>>;
e_enum_ReturnType(V, Bin) -> e_varint(V, Bin).

e_enum_OperationType('PUT', Bin) -> <<Bin/binary, 1>>;
e_enum_OperationType('UPDATE', Bin) ->
    <<Bin/binary, 2>>;
e_enum_OperationType('DELETE', Bin) ->
    <<Bin/binary, 3>>;
e_enum_OperationType(V, Bin) -> e_varint(V, Bin).

e_enum_Direction('FORWARD', Bin) -> <<Bin/binary, 0>>;
e_enum_Direction('BACKWARD', Bin) -> <<Bin/binary, 1>>;
e_enum_Direction(V, Bin) -> e_varint(V, Bin).

e_type_sint(Value, Bin) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin) ->
    e_varint(Value * -2 - 1, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Condition' -> d_msg_Condition(Bin, TrUserData);
      'CapacityUnit' -> d_msg_CapacityUnit(Bin, TrUserData);
      'ConsumedCapacity' ->
	  d_msg_ConsumedCapacity(Bin, TrUserData);
      'ComputeSplitPointsBySizeResponse.SplitLocation' ->
	  'd_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Bin,
								 TrUserData);
      'PrimaryKeySchema' ->
	  d_msg_PrimaryKeySchema(Bin, TrUserData);
      'ComputeSplitPointsBySizeResponse' ->
	  d_msg_ComputeSplitPointsBySizeResponse(Bin, TrUserData);
      'DeleteTableResponse' ->
	  d_msg_DeleteTableResponse(Bin, TrUserData);
      'CreateTableResponse' ->
	  d_msg_CreateTableResponse(Bin, TrUserData);
      'TableOptions' -> d_msg_TableOptions(Bin, TrUserData);
      'ReservedThroughputDetails' ->
	  d_msg_ReservedThroughputDetails(Bin, TrUserData);
      'TableMeta' -> d_msg_TableMeta(Bin, TrUserData);
      'DescribeTableResponse' ->
	  d_msg_DescribeTableResponse(Bin, TrUserData);
      'PartitionRange' ->
	  d_msg_PartitionRange(Bin, TrUserData);
      'ReturnContent' -> d_msg_ReturnContent(Bin, TrUserData);
      'RowInBatchWriteRowRequest' ->
	  d_msg_RowInBatchWriteRowRequest(Bin, TrUserData);
      'TableInBatchWriteRowRequest' ->
	  d_msg_TableInBatchWriteRowRequest(Bin, TrUserData);
      'BatchWriteRowRequest' ->
	  d_msg_BatchWriteRowRequest(Bin, TrUserData);
      'UnloadTableRequest' ->
	  d_msg_UnloadTableRequest(Bin, TrUserData);
      'LoadTableRequest' ->
	  d_msg_LoadTableRequest(Bin, TrUserData);
      'PutRowRequest' -> d_msg_PutRowRequest(Bin, TrUserData);
      'Error' -> d_msg_Error(Bin, TrUserData);
      'RowInBatchGetRowResponse' ->
	  d_msg_RowInBatchGetRowResponse(Bin, TrUserData);
      'UpdateTableResponse' ->
	  d_msg_UpdateTableResponse(Bin, TrUserData);
      'PutRowResponse' ->
	  d_msg_PutRowResponse(Bin, TrUserData);
      'ReservedThroughput' ->
	  d_msg_ReservedThroughput(Bin, TrUserData);
      'TimeRange' -> d_msg_TimeRange(Bin, TrUserData);
      'TableInBatchGetRowRequest' ->
	  d_msg_TableInBatchGetRowRequest(Bin, TrUserData);
      'BatchGetRowRequest' ->
	  d_msg_BatchGetRowRequest(Bin, TrUserData);
      'DeleteTableRequest' ->
	  d_msg_DeleteTableRequest(Bin, TrUserData);
      'ListTableRequest' ->
	  d_msg_ListTableRequest(Bin, TrUserData);
      'UpdateTableRequest' ->
	  d_msg_UpdateTableRequest(Bin, TrUserData);
      'CreateTableRequest' ->
	  d_msg_CreateTableRequest(Bin, TrUserData);
      'GetRowRequest' -> d_msg_GetRowRequest(Bin, TrUserData);
      'DescribeTableRequest' ->
	  d_msg_DescribeTableRequest(Bin, TrUserData);
      'DeleteRowResponse' ->
	  d_msg_DeleteRowResponse(Bin, TrUserData);
      'UnloadTableResponse' ->
	  d_msg_UnloadTableResponse(Bin, TrUserData);
      'RowInBatchWriteRowResponse' ->
	  d_msg_RowInBatchWriteRowResponse(Bin, TrUserData);
      'TableInBatchWriteRowResponse' ->
	  d_msg_TableInBatchWriteRowResponse(Bin, TrUserData);
      'BatchWriteRowResponse' ->
	  d_msg_BatchWriteRowResponse(Bin, TrUserData);
      'UpdateRowResponse' ->
	  d_msg_UpdateRowResponse(Bin, TrUserData);
      'GetRowResponse' ->
	  d_msg_GetRowResponse(Bin, TrUserData);
      'GetRangeResponse' ->
	  d_msg_GetRangeResponse(Bin, TrUserData);
      'TableInBatchGetRowResponse' ->
	  d_msg_TableInBatchGetRowResponse(Bin, TrUserData);
      'BatchGetRowResponse' ->
	  d_msg_BatchGetRowResponse(Bin, TrUserData);
      'LoadTableResponse' ->
	  d_msg_LoadTableResponse(Bin, TrUserData);
      'ListTableResponse' ->
	  d_msg_ListTableResponse(Bin, TrUserData);
      'GetRangeRequest' ->
	  d_msg_GetRangeRequest(Bin, TrUserData);
      'UpdateRowRequest' ->
	  d_msg_UpdateRowRequest(Bin, TrUserData);
      'DeleteRowRequest' ->
	  d_msg_DeleteRowRequest(Bin, TrUserData);
      'ComputeSplitPointsBySizeRequest' ->
	  d_msg_ComputeSplitPointsBySizeRequest(Bin, TrUserData)
    end.



d_msg_Condition(Bin, TrUserData) ->
    dfp_read_field_def_Condition(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Condition(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, TrUserData) ->
    d_field_Condition_row_existence(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_Condition(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_Condition_column_condition(Rest, Z1, Z2, F1, F2,
				       TrUserData);
dfp_read_field_def_Condition(<<>>, 0, 0, F1, F2, _) ->
    #'Condition'{row_existence = F1, column_condition = F2};
dfp_read_field_def_Condition(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_Condition(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_Condition(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Condition(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_Condition(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Condition_row_existence(Rest, 0, 0, F1, F2,
					  TrUserData);
      18 ->
	  d_field_Condition_column_condition(Rest, 0, 0, F1, F2,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Condition(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Condition(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Condition(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_Condition(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Condition(<<>>, 0, 0, F1, F2, _) ->
    #'Condition'{row_existence = F1, column_condition = F2}.

d_field_Condition_row_existence(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Condition_row_existence(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_Condition_row_existence(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_RowExistenceExpectation(Tmp),
    dfp_read_field_def_Condition(Rest, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_Condition_column_condition(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Condition_column_condition(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
d_field_Condition_column_condition(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Condition(Rest2, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_Condition(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_Condition(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Condition(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_Condition(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_Condition(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Condition(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_Condition(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Condition(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_Condition(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_Condition(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_Condition(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_Condition(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_CapacityUnit(Bin, TrUserData) ->
    dfp_read_field_def_CapacityUnit(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CapacityUnit(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_CapacityUnit_read(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_CapacityUnit(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_CapacityUnit_write(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_CapacityUnit(<<>>, 0, 0, F1, F2,
				_) ->
    #'CapacityUnit'{read = F1, write = F2};
dfp_read_field_def_CapacityUnit(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_CapacityUnit(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_CapacityUnit(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CapacityUnit(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_CapacityUnit(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CapacityUnit_read(Rest, 0, 0, F1, F2,
				    TrUserData);
      16 ->
	  d_field_CapacityUnit_write(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CapacityUnit(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_CapacityUnit(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_CapacityUnit(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_CapacityUnit(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_CapacityUnit(<<>>, 0, 0, F1, F2, _) ->
    #'CapacityUnit'{read = F1, write = F2}.

d_field_CapacityUnit_read(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CapacityUnit_read(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_CapacityUnit_read(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CapacityUnit(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_CapacityUnit_write(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CapacityUnit_write(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_CapacityUnit_write(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CapacityUnit(Rest, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_CapacityUnit(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_CapacityUnit(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_CapacityUnit(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_CapacityUnit(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_CapacityUnit(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CapacityUnit(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_CapacityUnit(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CapacityUnit(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_CapacityUnit(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_CapacityUnit(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_CapacityUnit(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_CapacityUnit(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_ConsumedCapacity(Bin, TrUserData) ->
    dfp_read_field_def_ConsumedCapacity(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ConsumedCapacity(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_ConsumedCapacity_capacity_unit(Rest, Z1, Z2, F1,
					   TrUserData);
dfp_read_field_def_ConsumedCapacity(<<>>, 0, 0, F1,
				    _) ->
    #'ConsumedCapacity'{capacity_unit = F1};
dfp_read_field_def_ConsumedCapacity(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_ConsumedCapacity(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_ConsumedCapacity(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ConsumedCapacity(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ConsumedCapacity(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ConsumedCapacity_capacity_unit(Rest, 0, 0, F1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ConsumedCapacity(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_ConsumedCapacity(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ConsumedCapacity(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_ConsumedCapacity(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ConsumedCapacity(<<>>, 0, 0, F1, _) ->
    #'ConsumedCapacity'{capacity_unit = F1}.

d_field_ConsumedCapacity_capacity_unit(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ConsumedCapacity_capacity_unit(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
d_field_ConsumedCapacity_capacity_unit(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_CapacityUnit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ConsumedCapacity(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_CapacityUnit(F1,
								      NewFValue,
								      TrUserData)
					end,
					TrUserData).


skip_varint_ConsumedCapacity(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_ConsumedCapacity(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_ConsumedCapacity(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ConsumedCapacity(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_ConsumedCapacity(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ConsumedCapacity(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ConsumedCapacity(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ConsumedCapacity(Rest2, 0, 0, F1,
					TrUserData).


skip_32_ConsumedCapacity(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_ConsumedCapacity(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_ConsumedCapacity(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_ConsumedCapacity(Rest, Z1, Z2, F1,
					TrUserData).


'd_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Bin,
						       TrUserData) ->
    'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Bin,
									0, 0,
									id(undefined,
									   TrUserData),
									id(undefined,
									   TrUserData),
									TrUserData).

'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(<<10,
								      Rest/binary>>,
								    Z1, Z2, F1,
								    F2,
								    TrUserData) ->
    'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_location'(Rest,
								      Z1, Z2,
								      F1, F2,
								      TrUserData);
'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(<<16,
								      Rest/binary>>,
								    Z1, Z2, F1,
								    F2,
								    TrUserData) ->
    'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_repeat'(Rest,
								    Z1, Z2, F1,
								    F2,
								    TrUserData);
'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(<<>>,
								    0, 0, F1,
								    F2, _) ->
    #'ComputeSplitPointsBySizeResponse.SplitLocation'{location
							  = F1,
						      repeat = F2};
'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Other,
								    Z1, Z2, F1,
								    F2,
								    TrUserData) ->
    'dg_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Other,
								       Z1, Z2,
								       F1, F2,
								       TrUserData).

'dg_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F1,
								   F2,
								   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F1, F2,
								       TrUserData);
'dg_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F1,
								   F2,
								   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_location'(Rest,
									    0,
									    0,
									    F1,
									    F2,
									    TrUserData);
      16 ->
	  'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_repeat'(Rest,
									  0, 0,
									  F1,
									  F2,
									  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									     0,
									     0,
									     F1,
									     F2,
									     TrUserData);
	    1 ->
		'skip_64_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									 0, 0,
									 F1, F2,
									 TrUserData);
	    2 ->
		'skip_length_delimited_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
										       0,
										       0,
										       F1,
										       F2,
										       TrUserData);
	    5 ->
		'skip_32_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									 0, 0,
									 F1, F2,
									 TrUserData)
	  end
    end;
'dg_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(<<>>,
								   0, 0, F1, F2,
								   _) ->
    #'ComputeSplitPointsBySizeResponse.SplitLocation'{location
							  = F1,
						      repeat = F2}.

'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_location'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F1,
								  F2,
								  TrUserData)
    when N < 57 ->
    'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_location'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F1, F2,
								      TrUserData);
'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_location'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, _, F2,
								  TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest2,
									0, 0,
									NewFValue,
									F2,
									TrUserData).


'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_repeat'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F1, F2,
								TrUserData)
    when N < 57 ->
    'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_repeat'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F1, F2,
								    TrUserData);
'd_field_ComputeSplitPointsBySizeResponse.SplitLocation_repeat'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F1, _,
								TrUserData) ->
    ZValue = X bsl N + Acc,
    NewFValue = if ZValue band 1 =:= 0 -> ZValue bsr 1;
		   true -> -(ZValue + 1 bsr 1)
		end,
    'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									0, 0,
									F1,
									NewFValue,
									TrUserData).


'skip_varint_ComputeSplitPointsBySizeResponse.SplitLocation'(<<1:1,
							       _:7,
							       Rest/binary>>,
							     Z1, Z2, F1, F2,
							     TrUserData) ->
    'skip_varint_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
								 Z1, Z2, F1, F2,
								 TrUserData);
'skip_varint_ComputeSplitPointsBySizeResponse.SplitLocation'(<<0:1,
							       _:7,
							       Rest/binary>>,
							     Z1, Z2, F1, F2,
							     TrUserData) ->
    'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									Z1, Z2,
									F1, F2,
									TrUserData).


'skip_length_delimited_ComputeSplitPointsBySizeResponse.SplitLocation'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F1, F2,
								       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F1,
									   F2,
									   TrUserData);
'skip_length_delimited_ComputeSplitPointsBySizeResponse.SplitLocation'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F1, F2,
								       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest2,
									0, 0,
									F1, F2,
									TrUserData).


'skip_32_ComputeSplitPointsBySizeResponse.SplitLocation'(<<_:32,
							   Rest/binary>>,
							 Z1, Z2, F1, F2,
							 TrUserData) ->
    'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									Z1, Z2,
									F1, F2,
									TrUserData).


'skip_64_ComputeSplitPointsBySizeResponse.SplitLocation'(<<_:64,
							   Rest/binary>>,
							 Z1, Z2, F1, F2,
							 TrUserData) ->
    'dfp_read_field_def_ComputeSplitPointsBySizeResponse.SplitLocation'(Rest,
									Z1, Z2,
									F1, F2,
									TrUserData).


d_msg_PrimaryKeySchema(Bin, TrUserData) ->
    dfp_read_field_def_PrimaryKeySchema(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PrimaryKeySchema(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_PrimaryKeySchema_name(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_PrimaryKeySchema(<<16, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_PrimaryKeySchema_type(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_PrimaryKeySchema(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_PrimaryKeySchema_option(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_PrimaryKeySchema(<<>>, 0, 0, F1, F2,
				    F3, _) ->
    #'PrimaryKeySchema'{name = F1, type = F2, option = F3};
dfp_read_field_def_PrimaryKeySchema(Other, Z1, Z2, F1,
				    F2, F3, TrUserData) ->
    dg_read_field_def_PrimaryKeySchema(Other, Z1, Z2, F1,
				       F2, F3, TrUserData).

dg_read_field_def_PrimaryKeySchema(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PrimaryKeySchema(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_PrimaryKeySchema(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PrimaryKeySchema_name(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      16 ->
	  d_field_PrimaryKeySchema_type(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      24 ->
	  d_field_PrimaryKeySchema_option(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PrimaryKeySchema(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    1 ->
		skip_64_PrimaryKeySchema(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
	    2 ->
		skip_length_delimited_PrimaryKeySchema(Rest, 0, 0, F1,
						       F2, F3, TrUserData);
	    5 ->
		skip_32_PrimaryKeySchema(Rest, 0, 0, F1, F2, F3,
					 TrUserData)
	  end
    end;
dg_read_field_def_PrimaryKeySchema(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #'PrimaryKeySchema'{name = F1, type = F2, option = F3}.

d_field_PrimaryKeySchema_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_PrimaryKeySchema_name(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_PrimaryKeySchema_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PrimaryKeySchema(Rest2, 0, 0,
					NewFValue, F2, F3, TrUserData).


d_field_PrimaryKeySchema_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_PrimaryKeySchema_type(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_PrimaryKeySchema_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_PrimaryKeyType(Tmp),
    dfp_read_field_def_PrimaryKeySchema(Rest, 0, 0, F1,
					NewFValue, F3, TrUserData).


d_field_PrimaryKeySchema_option(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_PrimaryKeySchema_option(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_PrimaryKeySchema_option(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_PrimaryKeyOption(Tmp),
    dfp_read_field_def_PrimaryKeySchema(Rest, 0, 0, F1, F2,
					NewFValue, TrUserData).


skip_varint_PrimaryKeySchema(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_PrimaryKeySchema(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
skip_varint_PrimaryKeySchema(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_PrimaryKeySchema(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_length_delimited_PrimaryKeySchema(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_PrimaryKeySchema(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
skip_length_delimited_PrimaryKeySchema(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PrimaryKeySchema(Rest2, 0, 0, F1, F2,
					F3, TrUserData).


skip_32_PrimaryKeySchema(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_PrimaryKeySchema(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_64_PrimaryKeySchema(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_PrimaryKeySchema(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


d_msg_ComputeSplitPointsBySizeResponse(Bin,
				       TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Bin,
							0, 0,
							id(undefined,
							   TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							TrUserData).

dfp_read_field_def_ComputeSplitPointsBySizeResponse(<<10,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3, F4,
						    TrUserData) ->
    d_field_ComputeSplitPointsBySizeResponse_consumed(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      TrUserData);
dfp_read_field_def_ComputeSplitPointsBySizeResponse(<<18,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3, F4,
						    TrUserData) ->
    d_field_ComputeSplitPointsBySizeResponse_schema(Rest,
						    Z1, Z2, F1, F2, F3, F4,
						    TrUserData);
dfp_read_field_def_ComputeSplitPointsBySizeResponse(<<26,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3, F4,
						    TrUserData) ->
    d_field_ComputeSplitPointsBySizeResponse_split_points(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, TrUserData);
dfp_read_field_def_ComputeSplitPointsBySizeResponse(<<34,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3, F4,
						    TrUserData) ->
    d_field_ComputeSplitPointsBySizeResponse_locations(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       TrUserData);
dfp_read_field_def_ComputeSplitPointsBySizeResponse(<<>>,
						    0, 0, F1, F2, F3, F4,
						    TrUserData) ->
    #'ComputeSplitPointsBySizeResponse'{consumed = F1,
					schema = lists_reverse(F2, TrUserData),
					split_points =
					    lists_reverse(F3, TrUserData),
					locations =
					    lists_reverse(F4, TrUserData)};
dfp_read_field_def_ComputeSplitPointsBySizeResponse(Other,
						    Z1, Z2, F1, F2, F3, F4,
						    TrUserData) ->
    dg_read_field_def_ComputeSplitPointsBySizeResponse(Other,
						       Z1, Z2, F1, F2, F3, F4,
						       TrUserData).

dg_read_field_def_ComputeSplitPointsBySizeResponse(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4,
						   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ComputeSplitPointsBySizeResponse(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, TrUserData);
dg_read_field_def_ComputeSplitPointsBySizeResponse(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ComputeSplitPointsBySizeResponse_consumed(Rest,
							    0, 0, F1, F2, F3,
							    F4, TrUserData);
      18 ->
	  d_field_ComputeSplitPointsBySizeResponse_schema(Rest, 0,
							  0, F1, F2, F3, F4,
							  TrUserData);
      26 ->
	  d_field_ComputeSplitPointsBySizeResponse_split_points(Rest,
								0, 0, F1, F2,
								F3, F4,
								TrUserData);
      34 ->
	  d_field_ComputeSplitPointsBySizeResponse_locations(Rest,
							     0, 0, F1, F2, F3,
							     F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ComputeSplitPointsBySizeResponse(Rest, 0, 0,
							     F1, F2, F3, F4,
							     TrUserData);
	    1 ->
		skip_64_ComputeSplitPointsBySizeResponse(Rest, 0, 0, F1,
							 F2, F3, F4,
							 TrUserData);
	    2 ->
		skip_length_delimited_ComputeSplitPointsBySizeResponse(Rest,
								       0, 0, F1,
								       F2, F3,
								       F4,
								       TrUserData);
	    5 ->
		skip_32_ComputeSplitPointsBySizeResponse(Rest, 0, 0, F1,
							 F2, F3, F4, TrUserData)
	  end
    end;
dg_read_field_def_ComputeSplitPointsBySizeResponse(<<>>,
						   0, 0, F1, F2, F3, F4,
						   TrUserData) ->
    #'ComputeSplitPointsBySizeResponse'{consumed = F1,
					schema = lists_reverse(F2, TrUserData),
					split_points =
					    lists_reverse(F3, TrUserData),
					locations =
					    lists_reverse(F4, TrUserData)}.

d_field_ComputeSplitPointsBySizeResponse_consumed(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4,
						  TrUserData)
    when N < 57 ->
    d_field_ComputeSplitPointsBySizeResponse_consumed(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, TrUserData);
d_field_ComputeSplitPointsBySizeResponse_consumed(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4,
						  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest2,
							0, 0,
							if F1 == undefined ->
							       NewFValue;
							   true ->
							       merge_msg_ConsumedCapacity(F1,
											  NewFValue,
											  TrUserData)
							end,
							F2, F3, F4, TrUserData).


d_field_ComputeSplitPointsBySizeResponse_schema(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4,
						TrUserData)
    when N < 57 ->
    d_field_ComputeSplitPointsBySizeResponse_schema(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, TrUserData);
d_field_ComputeSplitPointsBySizeResponse_schema(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4,
						TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PrimaryKeySchema(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest2,
							0, 0, F1,
							cons(NewFValue, F2,
							     TrUserData),
							F3, F4, TrUserData).


d_field_ComputeSplitPointsBySizeResponse_split_points(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      TrUserData)
    when N < 57 ->
    d_field_ComputeSplitPointsBySizeResponse_split_points(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, F3, F4,
							  TrUserData);
d_field_ComputeSplitPointsBySizeResponse_split_points(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2, F3, F4,
						      TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest2,
							0, 0, F1, F2,
							cons(NewFValue, F3,
							     TrUserData),
							F4, TrUserData).


d_field_ComputeSplitPointsBySizeResponse_locations(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4,
						   TrUserData)
    when N < 57 ->
    d_field_ComputeSplitPointsBySizeResponse_locations(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, TrUserData);
d_field_ComputeSplitPointsBySizeResponse_locations(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4,
						   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue =
	id('d_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Bs,
								  TrUserData),
	   TrUserData),
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest2,
							0, 0, F1, F2, F3,
							cons(NewFValue, F4,
							     TrUserData),
							TrUserData).


skip_varint_ComputeSplitPointsBySizeResponse(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4,
					     TrUserData) ->
    skip_varint_ComputeSplitPointsBySizeResponse(Rest, Z1,
						 Z2, F1, F2, F3, F4,
						 TrUserData);
skip_varint_ComputeSplitPointsBySizeResponse(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4,
					     TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest,
							Z1, Z2, F1, F2, F3, F4,
							TrUserData).


skip_length_delimited_ComputeSplitPointsBySizeResponse(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       TrUserData)
    when N < 57 ->
    skip_length_delimited_ComputeSplitPointsBySizeResponse(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4,
							   TrUserData);
skip_length_delimited_ComputeSplitPointsBySizeResponse(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest2,
							0, 0, F1, F2, F3, F4,
							TrUserData).


skip_32_ComputeSplitPointsBySizeResponse(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest,
							Z1, Z2, F1, F2, F3, F4,
							TrUserData).


skip_64_ComputeSplitPointsBySizeResponse(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeResponse(Rest,
							Z1, Z2, F1, F2, F3, F4,
							TrUserData).


d_msg_DeleteTableResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteTableResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_DeleteTableResponse(<<>>, 0, 0, _) ->
    #'DeleteTableResponse'{};
dfp_read_field_def_DeleteTableResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_DeleteTableResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_DeleteTableResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteTableResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_DeleteTableResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_DeleteTableResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_DeleteTableResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_DeleteTableResponse(Rest, 0, 0,
						    TrUserData);
      5 -> skip_32_DeleteTableResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_DeleteTableResponse(<<>>, 0, 0, _) ->
    #'DeleteTableResponse'{}.

skip_varint_DeleteTableResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_DeleteTableResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_DeleteTableResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_DeleteTableResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_DeleteTableResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteTableResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_DeleteTableResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteTableResponse(Rest2, 0, 0,
					   TrUserData).


skip_32_DeleteTableResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_DeleteTableResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_DeleteTableResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_DeleteTableResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_CreateTableResponse(Bin, TrUserData) ->
    dfp_read_field_def_CreateTableResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_CreateTableResponse(<<>>, 0, 0, _) ->
    #'CreateTableResponse'{};
dfp_read_field_def_CreateTableResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_CreateTableResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_CreateTableResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CreateTableResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_CreateTableResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_CreateTableResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_CreateTableResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_CreateTableResponse(Rest, 0, 0,
						    TrUserData);
      5 -> skip_32_CreateTableResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_CreateTableResponse(<<>>, 0, 0, _) ->
    #'CreateTableResponse'{}.

skip_varint_CreateTableResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_CreateTableResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_CreateTableResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_CreateTableResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_CreateTableResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_CreateTableResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_CreateTableResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CreateTableResponse(Rest2, 0, 0,
					   TrUserData).


skip_32_CreateTableResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_CreateTableResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_CreateTableResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_CreateTableResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_TableOptions(Bin, TrUserData) ->
    dfp_read_field_def_TableOptions(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TableOptions(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_TableOptions_time_to_live(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
dfp_read_field_def_TableOptions(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_TableOptions_max_versions(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
dfp_read_field_def_TableOptions(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_TableOptions_bloom_filter_type(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData);
dfp_read_field_def_TableOptions(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_TableOptions_block_size(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData);
dfp_read_field_def_TableOptions(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_TableOptions_deviation_cell_version_in_sec(Rest,
						       Z1, Z2, F1, F2, F3, F4,
						       F5, TrUserData);
dfp_read_field_def_TableOptions(<<>>, 0, 0, F1, F2, F3,
				F4, F5, _) ->
    #'TableOptions'{time_to_live = F1, max_versions = F2,
		    bloom_filter_type = F3, block_size = F4,
		    deviation_cell_version_in_sec = F5};
dfp_read_field_def_TableOptions(Other, Z1, Z2, F1, F2,
				F3, F4, F5, TrUserData) ->
    dg_read_field_def_TableOptions(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, TrUserData).

dg_read_field_def_TableOptions(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableOptions(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
dg_read_field_def_TableOptions(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TableOptions_time_to_live(Rest, 0, 0, F1, F2,
					    F3, F4, F5, TrUserData);
      16 ->
	  d_field_TableOptions_max_versions(Rest, 0, 0, F1, F2,
					    F3, F4, F5, TrUserData);
      24 ->
	  d_field_TableOptions_bloom_filter_type(Rest, 0, 0, F1,
						 F2, F3, F4, F5, TrUserData);
      32 ->
	  d_field_TableOptions_block_size(Rest, 0, 0, F1, F2, F3,
					  F4, F5, TrUserData);
      40 ->
	  d_field_TableOptions_deviation_cell_version_in_sec(Rest,
							     0, 0, F1, F2, F3,
							     F4, F5,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
					 TrUserData);
	    1 ->
		skip_64_TableOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
				     TrUserData);
	    2 ->
		skip_length_delimited_TableOptions(Rest, 0, 0, F1, F2,
						   F3, F4, F5, TrUserData);
	    5 ->
		skip_32_TableOptions(Rest, 0, 0, F1, F2, F3, F4, F5,
				     TrUserData)
	  end
    end;
dg_read_field_def_TableOptions(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, _) ->
    #'TableOptions'{time_to_live = F1, max_versions = F2,
		    bloom_filter_type = F3, block_size = F4,
		    deviation_cell_version_in_sec = F5}.

d_field_TableOptions_time_to_live(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_TableOptions_time_to_live(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
d_field_TableOptions_time_to_live(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_TableOptions(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, TrUserData).


d_field_TableOptions_max_versions(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_TableOptions_max_versions(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5,
				      TrUserData);
d_field_TableOptions_max_versions(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_TableOptions(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5, TrUserData).


d_field_TableOptions_bloom_filter_type(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_TableOptions_bloom_filter_type(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
d_field_TableOptions_bloom_filter_type(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_BloomFilterType(Tmp),
    dfp_read_field_def_TableOptions(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, TrUserData).


d_field_TableOptions_block_size(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_TableOptions_block_size(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5,
				    TrUserData);
d_field_TableOptions_block_size(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_TableOptions(Rest, 0, 0, F1, F2, F3,
				    NewFValue, F5, TrUserData).


d_field_TableOptions_deviation_cell_version_in_sec(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, F5,
						   TrUserData)
    when N < 57 ->
    d_field_TableOptions_deviation_cell_version_in_sec(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3, F4, F5,
						       TrUserData);
d_field_TableOptions_deviation_cell_version_in_sec(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3, F4, _,
						   TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TableOptions(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue, TrUserData).


skip_varint_TableOptions(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_TableOptions(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, TrUserData);
skip_varint_TableOptions(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_TableOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData).


skip_length_delimited_TableOptions(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableOptions(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5,
				       TrUserData);
skip_length_delimited_TableOptions(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableOptions(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, TrUserData).


skip_32_TableOptions(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_TableOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData).


skip_64_TableOptions(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_TableOptions(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData).


d_msg_ReservedThroughputDetails(Bin, TrUserData) ->
    dfp_read_field_def_ReservedThroughputDetails(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_ReservedThroughputDetails(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ReservedThroughputDetails_capacity_unit(Rest,
						    Z1, Z2, F1, F2, F3,
						    TrUserData);
dfp_read_field_def_ReservedThroughputDetails(<<16,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ReservedThroughputDetails_last_increase_time(Rest,
							 Z1, Z2, F1, F2, F3,
							 TrUserData);
dfp_read_field_def_ReservedThroughputDetails(<<24,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_ReservedThroughputDetails_last_decrease_time(Rest,
							 Z1, Z2, F1, F2, F3,
							 TrUserData);
dfp_read_field_def_ReservedThroughputDetails(<<>>, 0, 0,
					     F1, F2, F3, _) ->
    #'ReservedThroughputDetails'{capacity_unit = F1,
				 last_increase_time = F2,
				 last_decrease_time = F3};
dfp_read_field_def_ReservedThroughputDetails(Other, Z1,
					     Z2, F1, F2, F3, TrUserData) ->
    dg_read_field_def_ReservedThroughputDetails(Other, Z1,
						Z2, F1, F2, F3, TrUserData).

dg_read_field_def_ReservedThroughputDetails(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReservedThroughputDetails(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3,
						TrUserData);
dg_read_field_def_ReservedThroughputDetails(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReservedThroughputDetails_capacity_unit(Rest, 0,
							  0, F1, F2, F3,
							  TrUserData);
      16 ->
	  d_field_ReservedThroughputDetails_last_increase_time(Rest,
							       0, 0, F1, F2, F3,
							       TrUserData);
      24 ->
	  d_field_ReservedThroughputDetails_last_decrease_time(Rest,
							       0, 0, F1, F2, F3,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReservedThroughputDetails(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    1 ->
		skip_64_ReservedThroughputDetails(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    2 ->
		skip_length_delimited_ReservedThroughputDetails(Rest, 0,
								0, F1, F2, F3,
								TrUserData);
	    5 ->
		skip_32_ReservedThroughputDetails(Rest, 0, 0, F1, F2,
						  F3, TrUserData)
	  end
    end;
dg_read_field_def_ReservedThroughputDetails(<<>>, 0, 0,
					    F1, F2, F3, _) ->
    #'ReservedThroughputDetails'{capacity_unit = F1,
				 last_increase_time = F2,
				 last_decrease_time = F3}.

d_field_ReservedThroughputDetails_capacity_unit(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_ReservedThroughputDetails_capacity_unit(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, TrUserData);
d_field_ReservedThroughputDetails_capacity_unit(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3,
						TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_CapacityUnit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ReservedThroughputDetails(Rest2, 0,
						 0,
						 if F1 == undefined ->
							NewFValue;
						    true ->
							merge_msg_CapacityUnit(F1,
									       NewFValue,
									       TrUserData)
						 end,
						 F2, F3, TrUserData).


d_field_ReservedThroughputDetails_last_increase_time(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3,
						     TrUserData)
    when N < 57 ->
    d_field_ReservedThroughputDetails_last_increase_time(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3,
							 TrUserData);
d_field_ReservedThroughputDetails_last_increase_time(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, _, F3,
						     TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ReservedThroughputDetails(Rest, 0, 0,
						 F1, NewFValue, F3, TrUserData).


d_field_ReservedThroughputDetails_last_decrease_time(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3,
						     TrUserData)
    when N < 57 ->
    d_field_ReservedThroughputDetails_last_decrease_time(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3,
							 TrUserData);
d_field_ReservedThroughputDetails_last_decrease_time(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, _,
						     TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ReservedThroughputDetails(Rest, 0, 0,
						 F1, F2, NewFValue, TrUserData).


skip_varint_ReservedThroughputDetails(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_ReservedThroughputDetails(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
skip_varint_ReservedThroughputDetails(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ReservedThroughputDetails(Rest, Z1,
						 Z2, F1, F2, F3, TrUserData).


skip_length_delimited_ReservedThroughputDetails(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReservedThroughputDetails(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, TrUserData);
skip_length_delimited_ReservedThroughputDetails(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReservedThroughputDetails(Rest2, 0,
						 0, F1, F2, F3, TrUserData).


skip_32_ReservedThroughputDetails(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ReservedThroughputDetails(Rest, Z1,
						 Z2, F1, F2, F3, TrUserData).


skip_64_ReservedThroughputDetails(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_ReservedThroughputDetails(Rest, Z1,
						 Z2, F1, F2, F3, TrUserData).


d_msg_TableMeta(Bin, TrUserData) ->
    dfp_read_field_def_TableMeta(Bin, 0, 0,
				 id(undefined, TrUserData), id([], TrUserData),
				 TrUserData).

dfp_read_field_def_TableMeta(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_TableMeta_table_name(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_TableMeta(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_TableMeta_primary_key(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_TableMeta(<<>>, 0, 0, F1, F2,
			     TrUserData) ->
    #'TableMeta'{table_name = F1,
		 primary_key = lists_reverse(F2, TrUserData)};
dfp_read_field_def_TableMeta(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_TableMeta(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_TableMeta(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableMeta(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_TableMeta(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TableMeta_table_name(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  d_field_TableMeta_primary_key(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableMeta(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_TableMeta(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_TableMeta(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_TableMeta(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_TableMeta(<<>>, 0, 0, F1, F2,
			    TrUserData) ->
    #'TableMeta'{table_name = F1,
		 primary_key = lists_reverse(F2, TrUserData)}.

d_field_TableMeta_table_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableMeta_table_name(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_TableMeta_table_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableMeta(Rest2, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_TableMeta_primary_key(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableMeta_primary_key(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_TableMeta_primary_key(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PrimaryKeySchema(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_TableMeta(Rest2, 0, 0, F1,
				 cons(NewFValue, F2, TrUserData), TrUserData).


skip_varint_TableMeta(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_TableMeta(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_TableMeta(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_TableMeta(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_TableMeta(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableMeta(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_TableMeta(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableMeta(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_TableMeta(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_TableMeta(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_TableMeta(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_TableMeta(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_DescribeTableResponse(Bin, TrUserData) ->
    dfp_read_field_def_DescribeTableResponse(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id([], TrUserData), TrUserData).

dfp_read_field_def_DescribeTableResponse(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_DescribeTableResponse_table_meta(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_DescribeTableResponse(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_DescribeTableResponse_reserved_throughput_details(Rest,
							      Z1, Z2, F1, F2,
							      F3, F4, F5,
							      TrUserData);
dfp_read_field_def_DescribeTableResponse(<<26,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_DescribeTableResponse_table_options(Rest, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData);
dfp_read_field_def_DescribeTableResponse(<<32,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_DescribeTableResponse_table_status(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_DescribeTableResponse(<<50,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5,
					 TrUserData) ->
    d_field_DescribeTableResponse_shard_splits(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_DescribeTableResponse(<<>>, 0, 0, F1,
					 F2, F3, F4, F5, TrUserData) ->
    #'DescribeTableResponse'{table_meta = F1,
			     reserved_throughput_details = F2,
			     table_options = F3, table_status = F4,
			     shard_splits = lists_reverse(F5, TrUserData)};
dfp_read_field_def_DescribeTableResponse(Other, Z1, Z2,
					 F1, F2, F3, F4, F5, TrUserData) ->
    dg_read_field_def_DescribeTableResponse(Other, Z1, Z2,
					    F1, F2, F3, F4, F5, TrUserData).

dg_read_field_def_DescribeTableResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DescribeTableResponse(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    TrUserData);
dg_read_field_def_DescribeTableResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5,
					TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DescribeTableResponse_table_meta(Rest, 0, 0, F1,
						   F2, F3, F4, F5, TrUserData);
      18 ->
	  d_field_DescribeTableResponse_reserved_throughput_details(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5,
								    TrUserData);
      26 ->
	  d_field_DescribeTableResponse_table_options(Rest, 0, 0,
						      F1, F2, F3, F4, F5,
						      TrUserData);
      32 ->
	  d_field_DescribeTableResponse_table_status(Rest, 0, 0,
						     F1, F2, F3, F4, F5,
						     TrUserData);
      50 ->
	  d_field_DescribeTableResponse_shard_splits(Rest, 0, 0,
						     F1, F2, F3, F4, F5,
						     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DescribeTableResponse(Rest, 0, 0, F1, F2,
						  F3, F4, F5, TrUserData);
	    1 ->
		skip_64_DescribeTableResponse(Rest, 0, 0, F1, F2, F3,
					      F4, F5, TrUserData);
	    2 ->
		skip_length_delimited_DescribeTableResponse(Rest, 0, 0,
							    F1, F2, F3, F4, F5,
							    TrUserData);
	    5 ->
		skip_32_DescribeTableResponse(Rest, 0, 0, F1, F2, F3,
					      F4, F5, TrUserData)
	  end
    end;
dg_read_field_def_DescribeTableResponse(<<>>, 0, 0, F1,
					F2, F3, F4, F5, TrUserData) ->
    #'DescribeTableResponse'{table_meta = F1,
			     reserved_throughput_details = F2,
			     table_options = F3, table_status = F4,
			     shard_splits = lists_reverse(F5, TrUserData)}.

d_field_DescribeTableResponse_table_meta(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_DescribeTableResponse_table_meta(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     TrUserData);
d_field_DescribeTableResponse_table_meta(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5,
					 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableMeta(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DescribeTableResponse(Rest2, 0, 0,
					     if F1 == undefined -> NewFValue;
						true ->
						    merge_msg_TableMeta(F1,
									NewFValue,
									TrUserData)
					     end,
					     F2, F3, F4, F5, TrUserData).


d_field_DescribeTableResponse_reserved_throughput_details(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, TrUserData)
    when N < 57 ->
    d_field_DescribeTableResponse_reserved_throughput_details(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2, F3, F4, F5,
							      TrUserData);
d_field_DescribeTableResponse_reserved_throughput_details(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReservedThroughputDetails(Bs,
						   TrUserData),
		   TrUserData),
    dfp_read_field_def_DescribeTableResponse(Rest2, 0, 0,
					     F1,
					     if F2 == undefined -> NewFValue;
						true ->
						    merge_msg_ReservedThroughputDetails(F2,
											NewFValue,
											TrUserData)
					     end,
					     F3, F4, F5, TrUserData).


d_field_DescribeTableResponse_table_options(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData)
    when N < 57 ->
    d_field_DescribeTableResponse_table_options(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, TrUserData);
d_field_DescribeTableResponse_table_options(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DescribeTableResponse(Rest2, 0, 0,
					     F1, F2,
					     if F3 == undefined -> NewFValue;
						true ->
						    merge_msg_TableOptions(F3,
									   NewFValue,
									   TrUserData)
					     end,
					     F4, F5, TrUserData).


d_field_DescribeTableResponse_table_status(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5,
					   TrUserData)
    when N < 57 ->
    d_field_DescribeTableResponse_table_status(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, TrUserData);
d_field_DescribeTableResponse_table_status(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, _, F5,
					   TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_TableStatus(Tmp),
    dfp_read_field_def_DescribeTableResponse(Rest, 0, 0, F1,
					     F2, F3, NewFValue, F5, TrUserData).


d_field_DescribeTableResponse_shard_splits(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5,
					   TrUserData)
    when N < 57 ->
    d_field_DescribeTableResponse_shard_splits(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, TrUserData);
d_field_DescribeTableResponse_shard_splits(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5,
					   TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_DescribeTableResponse(Rest2, 0, 0,
					     F1, F2, F3, F4,
					     cons(NewFValue, F5, TrUserData),
					     TrUserData).


skip_varint_DescribeTableResponse(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_DescribeTableResponse(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, TrUserData);
skip_varint_DescribeTableResponse(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_DescribeTableResponse(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData).


skip_length_delimited_DescribeTableResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData)
    when N < 57 ->
    skip_length_delimited_DescribeTableResponse(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, TrUserData);
skip_length_delimited_DescribeTableResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DescribeTableResponse(Rest2, 0, 0,
					     F1, F2, F3, F4, F5, TrUserData).


skip_32_DescribeTableResponse(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_DescribeTableResponse(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData).


skip_64_DescribeTableResponse(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_DescribeTableResponse(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, TrUserData).


d_msg_PartitionRange(Bin, TrUserData) ->
    dfp_read_field_def_PartitionRange(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PartitionRange(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_PartitionRange_begin(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_PartitionRange(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_PartitionRange_end(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_PartitionRange(<<>>, 0, 0, F1, F2,
				  _) ->
    #'PartitionRange'{'begin' = F1, 'end' = F2};
dfp_read_field_def_PartitionRange(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_PartitionRange(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_PartitionRange(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PartitionRange(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_PartitionRange(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PartitionRange_begin(Rest, 0, 0, F1, F2,
				       TrUserData);
      18 ->
	  d_field_PartitionRange_end(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PartitionRange(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_PartitionRange(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_PartitionRange(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_PartitionRange(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_PartitionRange(<<>>, 0, 0, F1, F2,
				 _) ->
    #'PartitionRange'{'begin' = F1, 'end' = F2}.

d_field_PartitionRange_begin(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_PartitionRange_begin(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_PartitionRange_begin(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_PartitionRange(Rest2, 0, 0,
				      NewFValue, F2, TrUserData).


d_field_PartitionRange_end(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_PartitionRange_end(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_PartitionRange_end(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_PartitionRange(Rest2, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_PartitionRange(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_PartitionRange(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_PartitionRange(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_PartitionRange(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_PartitionRange(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PartitionRange(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_PartitionRange(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PartitionRange(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_PartitionRange(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_PartitionRange(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_PartitionRange(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_PartitionRange(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_ReturnContent(Bin, TrUserData) ->
    dfp_read_field_def_ReturnContent(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ReturnContent(<<8, Rest/binary>>, Z1,
				 Z2, F1, TrUserData) ->
    d_field_ReturnContent_return_type(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_ReturnContent(<<>>, 0, 0, F1, _) ->
    #'ReturnContent'{return_type = F1};
dfp_read_field_def_ReturnContent(Other, Z1, Z2, F1,
				 TrUserData) ->
    dg_read_field_def_ReturnContent(Other, Z1, Z2, F1,
				    TrUserData).

dg_read_field_def_ReturnContent(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReturnContent(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ReturnContent(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ReturnContent_return_type(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReturnContent(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_ReturnContent(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ReturnContent(Rest, 0, 0, F1,
						    TrUserData);
	    5 -> skip_32_ReturnContent(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ReturnContent(<<>>, 0, 0, F1, _) ->
    #'ReturnContent'{return_type = F1}.

d_field_ReturnContent_return_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ReturnContent_return_type(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_ReturnContent_return_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_ReturnType(Tmp),
    dfp_read_field_def_ReturnContent(Rest, 0, 0, NewFValue,
				     TrUserData).


skip_varint_ReturnContent(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    skip_varint_ReturnContent(Rest, Z1, Z2, F1, TrUserData);
skip_varint_ReturnContent(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, TrUserData) ->
    dfp_read_field_def_ReturnContent(Rest, Z1, Z2, F1,
				     TrUserData).


skip_length_delimited_ReturnContent(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReturnContent(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ReturnContent(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReturnContent(Rest2, 0, 0, F1,
				     TrUserData).


skip_32_ReturnContent(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_ReturnContent(Rest, Z1, Z2, F1,
				     TrUserData).


skip_64_ReturnContent(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      TrUserData) ->
    dfp_read_field_def_ReturnContent(Rest, Z1, Z2, F1,
				     TrUserData).


d_msg_RowInBatchWriteRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowRequest(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_RowInBatchWriteRowRequest(<<8,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4,
					     TrUserData) ->
    d_field_RowInBatchWriteRowRequest_type(Rest, Z1, Z2, F1,
					   F2, F3, F4, TrUserData);
dfp_read_field_def_RowInBatchWriteRowRequest(<<18,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4,
					     TrUserData) ->
    d_field_RowInBatchWriteRowRequest_row_change(Rest, Z1,
						 Z2, F1, F2, F3, F4,
						 TrUserData);
dfp_read_field_def_RowInBatchWriteRowRequest(<<26,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4,
					     TrUserData) ->
    d_field_RowInBatchWriteRowRequest_condition(Rest, Z1,
						Z2, F1, F2, F3, F4, TrUserData);
dfp_read_field_def_RowInBatchWriteRowRequest(<<34,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4,
					     TrUserData) ->
    d_field_RowInBatchWriteRowRequest_return_content(Rest,
						     Z1, Z2, F1, F2, F3, F4,
						     TrUserData);
dfp_read_field_def_RowInBatchWriteRowRequest(<<>>, 0, 0,
					     F1, F2, F3, F4, _) ->
    #'RowInBatchWriteRowRequest'{type = F1, row_change = F2,
				 condition = F3, return_content = F4};
dfp_read_field_def_RowInBatchWriteRowRequest(Other, Z1,
					     Z2, F1, F2, F3, F4, TrUserData) ->
    dg_read_field_def_RowInBatchWriteRowRequest(Other, Z1,
						Z2, F1, F2, F3, F4, TrUserData).

dg_read_field_def_RowInBatchWriteRowRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RowInBatchWriteRowRequest(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						TrUserData);
dg_read_field_def_RowInBatchWriteRowRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4,
					    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RowInBatchWriteRowRequest_type(Rest, 0, 0, F1,
						 F2, F3, F4, TrUserData);
      18 ->
	  d_field_RowInBatchWriteRowRequest_row_change(Rest, 0, 0,
						       F1, F2, F3, F4,
						       TrUserData);
      26 ->
	  d_field_RowInBatchWriteRowRequest_condition(Rest, 0, 0,
						      F1, F2, F3, F4,
						      TrUserData);
      34 ->
	  d_field_RowInBatchWriteRowRequest_return_content(Rest,
							   0, 0, F1, F2, F3, F4,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RowInBatchWriteRowRequest(Rest, 0, 0, F1,
						      F2, F3, F4, TrUserData);
	    1 ->
		skip_64_RowInBatchWriteRowRequest(Rest, 0, 0, F1, F2,
						  F3, F4, TrUserData);
	    2 ->
		skip_length_delimited_RowInBatchWriteRowRequest(Rest, 0,
								0, F1, F2, F3,
								F4, TrUserData);
	    5 ->
		skip_32_RowInBatchWriteRowRequest(Rest, 0, 0, F1, F2,
						  F3, F4, TrUserData)
	  end
    end;
dg_read_field_def_RowInBatchWriteRowRequest(<<>>, 0, 0,
					    F1, F2, F3, F4, _) ->
    #'RowInBatchWriteRowRequest'{type = F1, row_change = F2,
				 condition = F3, return_content = F4}.

d_field_RowInBatchWriteRowRequest_type(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowRequest_type(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
d_field_RowInBatchWriteRowRequest_type(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F2, F3, F4, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_OperationType(Tmp),
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest, 0, 0,
						 NewFValue, F2, F3, F4,
						 TrUserData).


d_field_RowInBatchWriteRowRequest_row_change(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowRequest_row_change(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, TrUserData);
d_field_RowInBatchWriteRowRequest_row_change(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, _, F3, F4,
					     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest2, 0,
						 0, F1, NewFValue, F3, F4,
						 TrUserData).


d_field_RowInBatchWriteRowRequest_condition(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowRequest_condition(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						TrUserData);
d_field_RowInBatchWriteRowRequest_condition(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Condition(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest2, 0,
						 0, F1, F2,
						 if F3 == undefined ->
							NewFValue;
						    true ->
							merge_msg_Condition(F3,
									    NewFValue,
									    TrUserData)
						 end,
						 F4, TrUserData).


d_field_RowInBatchWriteRowRequest_return_content(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4,
						 TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowRequest_return_content(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, TrUserData);
d_field_RowInBatchWriteRowRequest_return_content(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4,
						 TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReturnContent(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest2, 0,
						 0, F1, F2, F3,
						 if F4 == undefined ->
							NewFValue;
						    true ->
							merge_msg_ReturnContent(F4,
										NewFValue,
										TrUserData)
						 end,
						 TrUserData).


skip_varint_RowInBatchWriteRowRequest(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_RowInBatchWriteRowRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData);
skip_varint_RowInBatchWriteRowRequest(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest, Z1,
						 Z2, F1, F2, F3, F4,
						 TrUserData).


skip_length_delimited_RowInBatchWriteRowRequest(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4,
						TrUserData)
    when N < 57 ->
    skip_length_delimited_RowInBatchWriteRowRequest(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, TrUserData);
skip_length_delimited_RowInBatchWriteRowRequest(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest2, 0,
						 0, F1, F2, F3, F4, TrUserData).


skip_32_RowInBatchWriteRowRequest(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest, Z1,
						 Z2, F1, F2, F3, F4,
						 TrUserData).


skip_64_RowInBatchWriteRowRequest(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowRequest(Rest, Z1,
						 Z2, F1, F2, F3, F4,
						 TrUserData).


d_msg_TableInBatchWriteRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowRequest(Bin, 0,
						   0, id(undefined, TrUserData),
						   id([], TrUserData),
						   TrUserData).

dfp_read_field_def_TableInBatchWriteRowRequest(<<10,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableInBatchWriteRowRequest_table_name(Rest, Z1,
						   Z2, F1, F2, TrUserData);
dfp_read_field_def_TableInBatchWriteRowRequest(<<18,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableInBatchWriteRowRequest_rows(Rest, Z1, Z2,
					     F1, F2, TrUserData);
dfp_read_field_def_TableInBatchWriteRowRequest(<<>>, 0,
					       0, F1, F2, TrUserData) ->
    #'TableInBatchWriteRowRequest'{table_name = F1,
				   rows = lists_reverse(F2, TrUserData)};
dfp_read_field_def_TableInBatchWriteRowRequest(Other,
					       Z1, Z2, F1, F2, TrUserData) ->
    dg_read_field_def_TableInBatchWriteRowRequest(Other, Z1,
						  Z2, F1, F2, TrUserData).

dg_read_field_def_TableInBatchWriteRowRequest(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableInBatchWriteRowRequest(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
dg_read_field_def_TableInBatchWriteRowRequest(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TableInBatchWriteRowRequest_table_name(Rest, 0,
							 0, F1, F2, TrUserData);
      18 ->
	  d_field_TableInBatchWriteRowRequest_rows(Rest, 0, 0, F1,
						   F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableInBatchWriteRowRequest(Rest, 0, 0, F1,
							F2, TrUserData);
	    1 ->
		skip_64_TableInBatchWriteRowRequest(Rest, 0, 0, F1, F2,
						    TrUserData);
	    2 ->
		skip_length_delimited_TableInBatchWriteRowRequest(Rest,
								  0, 0, F1, F2,
								  TrUserData);
	    5 ->
		skip_32_TableInBatchWriteRowRequest(Rest, 0, 0, F1, F2,
						    TrUserData)
	  end
    end;
dg_read_field_def_TableInBatchWriteRowRequest(<<>>, 0,
					      0, F1, F2, TrUserData) ->
    #'TableInBatchWriteRowRequest'{table_name = F1,
				   rows = lists_reverse(F2, TrUserData)}.

d_field_TableInBatchWriteRowRequest_table_name(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableInBatchWriteRowRequest_table_name(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
d_field_TableInBatchWriteRowRequest_table_name(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInBatchWriteRowRequest(Rest2, 0,
						   0, NewFValue, F2,
						   TrUserData).


d_field_TableInBatchWriteRowRequest_rows(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableInBatchWriteRowRequest_rows(Rest, N + 7,
					     X bsl N + Acc, F1, F2, TrUserData);
d_field_TableInBatchWriteRowRequest_rows(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RowInBatchWriteRowRequest(Bs,
						   TrUserData),
		   TrUserData),
    dfp_read_field_def_TableInBatchWriteRowRequest(Rest2, 0,
						   0, F1,
						   cons(NewFValue, F2,
							TrUserData),
						   TrUserData).


skip_varint_TableInBatchWriteRowRequest(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_TableInBatchWriteRowRequest(Rest, Z1, Z2,
					    F1, F2, TrUserData);
skip_varint_TableInBatchWriteRowRequest(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowRequest(Rest, Z1,
						   Z2, F1, F2, TrUserData).


skip_length_delimited_TableInBatchWriteRowRequest(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableInBatchWriteRowRequest(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, TrUserData);
skip_length_delimited_TableInBatchWriteRowRequest(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableInBatchWriteRowRequest(Rest2, 0,
						   0, F1, F2, TrUserData).


skip_32_TableInBatchWriteRowRequest(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowRequest(Rest, Z1,
						   Z2, F1, F2, TrUserData).


skip_64_TableInBatchWriteRowRequest(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowRequest(Rest, Z1,
						   Z2, F1, F2, TrUserData).


d_msg_BatchWriteRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_BatchWriteRowRequest(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_BatchWriteRowRequest(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_BatchWriteRowRequest_tables(Rest, Z1, Z2, F1,
					TrUserData);
dfp_read_field_def_BatchWriteRowRequest(<<>>, 0, 0, F1,
					TrUserData) ->
    #'BatchWriteRowRequest'{tables =
				lists_reverse(F1, TrUserData)};
dfp_read_field_def_BatchWriteRowRequest(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_BatchWriteRowRequest(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_BatchWriteRowRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BatchWriteRowRequest(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_BatchWriteRowRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BatchWriteRowRequest_tables(Rest, 0, 0, F1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BatchWriteRowRequest(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_BatchWriteRowRequest(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_BatchWriteRowRequest(Rest, 0, 0,
							   F1, TrUserData);
	    5 ->
		skip_32_BatchWriteRowRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_BatchWriteRowRequest(<<>>, 0, 0, F1,
				       TrUserData) ->
    #'BatchWriteRowRequest'{tables =
				lists_reverse(F1, TrUserData)}.

d_field_BatchWriteRowRequest_tables(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_BatchWriteRowRequest_tables(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
d_field_BatchWriteRowRequest_tables(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableInBatchWriteRowRequest(Bs,
						     TrUserData),
		   TrUserData),
    dfp_read_field_def_BatchWriteRowRequest(Rest2, 0, 0,
					    cons(NewFValue, F1, TrUserData),
					    TrUserData).


skip_varint_BatchWriteRowRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_BatchWriteRowRequest(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_BatchWriteRowRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchWriteRowRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_BatchWriteRowRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BatchWriteRowRequest(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_BatchWriteRowRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BatchWriteRowRequest(Rest2, 0, 0, F1,
					    TrUserData).


skip_32_BatchWriteRowRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchWriteRowRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_BatchWriteRowRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchWriteRowRequest(Rest, Z1, Z2,
					    F1, TrUserData).


d_msg_UnloadTableRequest(Bin, TrUserData) ->
    dfp_read_field_def_UnloadTableRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_UnloadTableRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_UnloadTableRequest_table_name(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_UnloadTableRequest(<<>>, 0, 0, F1,
				      _) ->
    #'UnloadTableRequest'{table_name = F1};
dfp_read_field_def_UnloadTableRequest(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_UnloadTableRequest(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_UnloadTableRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UnloadTableRequest(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_UnloadTableRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UnloadTableRequest_table_name(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UnloadTableRequest(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_UnloadTableRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_UnloadTableRequest(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_UnloadTableRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_UnloadTableRequest(<<>>, 0, 0, F1,
				     _) ->
    #'UnloadTableRequest'{table_name = F1}.

d_field_UnloadTableRequest_table_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_UnloadTableRequest_table_name(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_UnloadTableRequest_table_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_UnloadTableRequest(Rest2, 0, 0,
					  NewFValue, TrUserData).


skip_varint_UnloadTableRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_UnloadTableRequest(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_UnloadTableRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_UnloadTableRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_UnloadTableRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_UnloadTableRequest(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_UnloadTableRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UnloadTableRequest(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_UnloadTableRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_UnloadTableRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_UnloadTableRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_UnloadTableRequest(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_LoadTableRequest(Bin, TrUserData) ->
    dfp_read_field_def_LoadTableRequest(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_LoadTableRequest(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_LoadTableRequest_table_name(Rest, Z1, Z2, F1,
					TrUserData);
dfp_read_field_def_LoadTableRequest(<<>>, 0, 0, F1,
				    _) ->
    #'LoadTableRequest'{table_name = F1};
dfp_read_field_def_LoadTableRequest(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_LoadTableRequest(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_LoadTableRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoadTableRequest(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_LoadTableRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoadTableRequest_table_name(Rest, 0, 0, F1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoadTableRequest(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_LoadTableRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_LoadTableRequest(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_LoadTableRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_LoadTableRequest(<<>>, 0, 0, F1, _) ->
    #'LoadTableRequest'{table_name = F1}.

d_field_LoadTableRequest_table_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_LoadTableRequest_table_name(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
d_field_LoadTableRequest_table_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_LoadTableRequest(Rest2, 0, 0,
					NewFValue, TrUserData).


skip_varint_LoadTableRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_LoadTableRequest(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_LoadTableRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_LoadTableRequest(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_LoadTableRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoadTableRequest(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_LoadTableRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoadTableRequest(Rest2, 0, 0, F1,
					TrUserData).


skip_32_LoadTableRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_LoadTableRequest(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_LoadTableRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_LoadTableRequest(Rest, Z1, Z2, F1,
					TrUserData).


d_msg_PutRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_PutRowRequest(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PutRowRequest(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_PutRowRequest_table_name(Rest, Z1, Z2, F1, F2,
				     F3, F4, TrUserData);
dfp_read_field_def_PutRowRequest(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_PutRowRequest_row(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
dfp_read_field_def_PutRowRequest(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_PutRowRequest_condition(Rest, Z1, Z2, F1, F2,
				    F3, F4, TrUserData);
dfp_read_field_def_PutRowRequest(<<34, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_PutRowRequest_return_content(Rest, Z1, Z2, F1,
					 F2, F3, F4, TrUserData);
dfp_read_field_def_PutRowRequest(<<>>, 0, 0, F1, F2, F3,
				 F4, _) ->
    #'PutRowRequest'{table_name = F1, row = F2,
		     condition = F3, return_content = F4};
dfp_read_field_def_PutRowRequest(Other, Z1, Z2, F1, F2,
				 F3, F4, TrUserData) ->
    dg_read_field_def_PutRowRequest(Other, Z1, Z2, F1, F2,
				    F3, F4, TrUserData).

dg_read_field_def_PutRowRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PutRowRequest(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_PutRowRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PutRowRequest_table_name(Rest, 0, 0, F1, F2, F3,
					   F4, TrUserData);
      18 ->
	  d_field_PutRowRequest_row(Rest, 0, 0, F1, F2, F3, F4,
				    TrUserData);
      26 ->
	  d_field_PutRowRequest_condition(Rest, 0, 0, F1, F2, F3,
					  F4, TrUserData);
      34 ->
	  d_field_PutRowRequest_return_content(Rest, 0, 0, F1, F2,
					       F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PutRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					  TrUserData);
	    1 ->
		skip_64_PutRowRequest(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData);
	    2 ->
		skip_length_delimited_PutRowRequest(Rest, 0, 0, F1, F2,
						    F3, F4, TrUserData);
	    5 ->
		skip_32_PutRowRequest(Rest, 0, 0, F1, F2, F3, F4,
				      TrUserData)
	  end
    end;
dg_read_field_def_PutRowRequest(<<>>, 0, 0, F1, F2, F3,
				F4, _) ->
    #'PutRowRequest'{table_name = F1, row = F2,
		     condition = F3, return_content = F4}.

d_field_PutRowRequest_table_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_PutRowRequest_table_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_PutRowRequest_table_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_PutRowRequest(Rest2, 0, 0, NewFValue,
				     F2, F3, F4, TrUserData).


d_field_PutRowRequest_row(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_PutRowRequest_row(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, TrUserData);
d_field_PutRowRequest_row(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_PutRowRequest(Rest2, 0, 0, F1,
				     NewFValue, F3, F4, TrUserData).


d_field_PutRowRequest_condition(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_PutRowRequest_condition(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_PutRowRequest_condition(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Condition(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_PutRowRequest(Rest2, 0, 0, F1, F2,
				     if F3 == undefined -> NewFValue;
					true ->
					    merge_msg_Condition(F3, NewFValue,
								TrUserData)
				     end,
				     F4, TrUserData).


d_field_PutRowRequest_return_content(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_PutRowRequest_return_content(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4,
					 TrUserData);
d_field_PutRowRequest_return_content(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReturnContent(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_PutRowRequest(Rest2, 0, 0, F1, F2,
				     F3,
				     if F4 == undefined -> NewFValue;
					true ->
					    merge_msg_ReturnContent(F4,
								    NewFValue,
								    TrUserData)
				     end,
				     TrUserData).


skip_varint_PutRowRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_PutRowRequest(Rest, Z1, Z2, F1, F2, F3, F4,
			      TrUserData);
skip_varint_PutRowRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_PutRowRequest(Rest, Z1, Z2, F1, F2,
				     F3, F4, TrUserData).


skip_length_delimited_PutRowRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_PutRowRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
skip_length_delimited_PutRowRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutRowRequest(Rest2, 0, 0, F1, F2,
				     F3, F4, TrUserData).


skip_32_PutRowRequest(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, TrUserData) ->
    dfp_read_field_def_PutRowRequest(Rest, Z1, Z2, F1, F2,
				     F3, F4, TrUserData).


skip_64_PutRowRequest(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, TrUserData) ->
    dfp_read_field_def_PutRowRequest(Rest, Z1, Z2, F1, F2,
				     F3, F4, TrUserData).


d_msg_Error(Bin, TrUserData) ->
    dfp_read_field_def_Error(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Error(<<10, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    d_field_Error_code(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Error(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, TrUserData) ->
    d_field_Error_message(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_Error(<<>>, 0, 0, F1, F2, _) ->
    #'Error'{code = F1, message = F2};
dfp_read_field_def_Error(Other, Z1, Z2, F1, F2,
			 TrUserData) ->
    dg_read_field_def_Error(Other, Z1, Z2, F1, F2,
			    TrUserData).

dg_read_field_def_Error(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Error(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
dg_read_field_def_Error(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Error_code(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_Error_message(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Error(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Error(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Error(Rest, 0, 0, F1, F2,
					    TrUserData);
	    5 -> skip_32_Error(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Error(<<>>, 0, 0, F1, F2, _) ->
    #'Error'{code = F1, message = F2}.

d_field_Error_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, TrUserData)
    when N < 57 ->
    d_field_Error_code(Rest, N + 7, X bsl N + Acc, F1, F2,
		       TrUserData);
d_field_Error_code(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Error(Rest2, 0, 0, NewFValue, F2,
			     TrUserData).


d_field_Error_message(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_Error_message(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_Error_message(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Error(Rest2, 0, 0, F1, NewFValue,
			     TrUserData).


skip_varint_Error(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    skip_varint_Error(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Error(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, TrUserData) ->
    dfp_read_field_def_Error(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_length_delimited_Error(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Error(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
skip_length_delimited_Error(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Error(Rest2, 0, 0, F1, F2,
			     TrUserData).


skip_32_Error(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_Error(Rest, Z1, Z2, F1, F2,
			     TrUserData).


skip_64_Error(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	      TrUserData) ->
    dfp_read_field_def_Error(Rest, Z1, Z2, F1, F2,
			     TrUserData).


d_msg_RowInBatchGetRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_RowInBatchGetRowResponse(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_RowInBatchGetRowResponse(<<8,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5,
					    TrUserData) ->
    d_field_RowInBatchGetRowResponse_is_ok(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData);
dfp_read_field_def_RowInBatchGetRowResponse(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5,
					    TrUserData) ->
    d_field_RowInBatchGetRowResponse_error(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, TrUserData);
dfp_read_field_def_RowInBatchGetRowResponse(<<26,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5,
					    TrUserData) ->
    d_field_RowInBatchGetRowResponse_consumed(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, TrUserData);
dfp_read_field_def_RowInBatchGetRowResponse(<<34,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5,
					    TrUserData) ->
    d_field_RowInBatchGetRowResponse_row(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData);
dfp_read_field_def_RowInBatchGetRowResponse(<<42,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5,
					    TrUserData) ->
    d_field_RowInBatchGetRowResponse_next_token(Rest, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData);
dfp_read_field_def_RowInBatchGetRowResponse(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, _) ->
    #'RowInBatchGetRowResponse'{is_ok = F1, error = F2,
				consumed = F3, row = F4, next_token = F5};
dfp_read_field_def_RowInBatchGetRowResponse(Other, Z1,
					    Z2, F1, F2, F3, F4, F5,
					    TrUserData) ->
    dg_read_field_def_RowInBatchGetRowResponse(Other, Z1,
					       Z2, F1, F2, F3, F4, F5,
					       TrUserData).

dg_read_field_def_RowInBatchGetRowResponse(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5,
					   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RowInBatchGetRowResponse(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, TrUserData);
dg_read_field_def_RowInBatchGetRowResponse(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RowInBatchGetRowResponse_is_ok(Rest, 0, 0, F1,
						 F2, F3, F4, F5, TrUserData);
      18 ->
	  d_field_RowInBatchGetRowResponse_error(Rest, 0, 0, F1,
						 F2, F3, F4, F5, TrUserData);
      26 ->
	  d_field_RowInBatchGetRowResponse_consumed(Rest, 0, 0,
						    F1, F2, F3, F4, F5,
						    TrUserData);
      34 ->
	  d_field_RowInBatchGetRowResponse_row(Rest, 0, 0, F1, F2,
					       F3, F4, F5, TrUserData);
      42 ->
	  d_field_RowInBatchGetRowResponse_next_token(Rest, 0, 0,
						      F1, F2, F3, F4, F5,
						      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RowInBatchGetRowResponse(Rest, 0, 0, F1, F2,
						     F3, F4, F5, TrUserData);
	    1 ->
		skip_64_RowInBatchGetRowResponse(Rest, 0, 0, F1, F2, F3,
						 F4, F5, TrUserData);
	    2 ->
		skip_length_delimited_RowInBatchGetRowResponse(Rest, 0,
							       0, F1, F2, F3,
							       F4, F5,
							       TrUserData);
	    5 ->
		skip_32_RowInBatchGetRowResponse(Rest, 0, 0, F1, F2, F3,
						 F4, F5, TrUserData)
	  end
    end;
dg_read_field_def_RowInBatchGetRowResponse(<<>>, 0, 0,
					   F1, F2, F3, F4, F5, _) ->
    #'RowInBatchGetRowResponse'{is_ok = F1, error = F2,
				consumed = F3, row = F4, next_token = F5}.

d_field_RowInBatchGetRowResponse_is_ok(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RowInBatchGetRowResponse_is_ok(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
d_field_RowInBatchGetRowResponse_is_ok(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F2, F3, F4, F5, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RowInBatchGetRowResponse(Rest, 0, 0,
						NewFValue, F2, F3, F4, F5,
						TrUserData).


d_field_RowInBatchGetRowResponse_error(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RowInBatchGetRowResponse_error(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   TrUserData);
d_field_RowInBatchGetRowResponse_error(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5,
				       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Error(Bs, TrUserData), TrUserData),
    dfp_read_field_def_RowInBatchGetRowResponse(Rest2, 0, 0,
						F1,
						if F2 == undefined -> NewFValue;
						   true ->
						       merge_msg_Error(F2,
								       NewFValue,
								       TrUserData)
						end,
						F3, F4, F5, TrUserData).


d_field_RowInBatchGetRowResponse_consumed(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5,
					  TrUserData)
    when N < 57 ->
    d_field_RowInBatchGetRowResponse_consumed(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      TrUserData);
d_field_RowInBatchGetRowResponse_consumed(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5,
					  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_RowInBatchGetRowResponse(Rest2, 0, 0,
						F1, F2,
						if F3 == undefined -> NewFValue;
						   true ->
						       merge_msg_ConsumedCapacity(F3,
										  NewFValue,
										  TrUserData)
						end,
						F4, F5, TrUserData).


d_field_RowInBatchGetRowResponse_row(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_RowInBatchGetRowResponse_row(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5,
					 TrUserData);
d_field_RowInBatchGetRowResponse_row(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, _, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RowInBatchGetRowResponse(Rest2, 0, 0,
						F1, F2, F3, NewFValue, F5,
						TrUserData).


d_field_RowInBatchGetRowResponse_next_token(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5,
					    TrUserData)
    when N < 57 ->
    d_field_RowInBatchGetRowResponse_next_token(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, TrUserData);
d_field_RowInBatchGetRowResponse_next_token(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, _,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RowInBatchGetRowResponse(Rest2, 0, 0,
						F1, F2, F3, F4, NewFValue,
						TrUserData).


skip_varint_RowInBatchGetRowResponse(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_RowInBatchGetRowResponse(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, TrUserData);
skip_varint_RowInBatchGetRowResponse(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_RowInBatchGetRowResponse(Rest, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData).


skip_length_delimited_RowInBatchGetRowResponse(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5,
					       TrUserData)
    when N < 57 ->
    skip_length_delimited_RowInBatchGetRowResponse(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, TrUserData);
skip_length_delimited_RowInBatchGetRowResponse(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RowInBatchGetRowResponse(Rest2, 0, 0,
						F1, F2, F3, F4, F5, TrUserData).


skip_32_RowInBatchGetRowResponse(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_RowInBatchGetRowResponse(Rest, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData).


skip_64_RowInBatchGetRowResponse(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_RowInBatchGetRowResponse(Rest, Z1,
						Z2, F1, F2, F3, F4, F5,
						TrUserData).


d_msg_UpdateTableResponse(Bin, TrUserData) ->
    dfp_read_field_def_UpdateTableResponse(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_UpdateTableResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    d_field_UpdateTableResponse_reserved_throughput_details(Rest,
							    Z1, Z2, F1, F2,
							    TrUserData);
dfp_read_field_def_UpdateTableResponse(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    d_field_UpdateTableResponse_table_options(Rest, Z1, Z2,
					      F1, F2, TrUserData);
dfp_read_field_def_UpdateTableResponse(<<>>, 0, 0, F1,
				       F2, _) ->
    #'UpdateTableResponse'{reserved_throughput_details = F1,
			   table_options = F2};
dfp_read_field_def_UpdateTableResponse(Other, Z1, Z2,
				       F1, F2, TrUserData) ->
    dg_read_field_def_UpdateTableResponse(Other, Z1, Z2, F1,
					  F2, TrUserData).

dg_read_field_def_UpdateTableResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UpdateTableResponse(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_UpdateTableResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UpdateTableResponse_reserved_throughput_details(Rest,
								  0, 0, F1, F2,
								  TrUserData);
      18 ->
	  d_field_UpdateTableResponse_table_options(Rest, 0, 0,
						    F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UpdateTableResponse(Rest, 0, 0, F1, F2,
						TrUserData);
	    1 ->
		skip_64_UpdateTableResponse(Rest, 0, 0, F1, F2,
					    TrUserData);
	    2 ->
		skip_length_delimited_UpdateTableResponse(Rest, 0, 0,
							  F1, F2, TrUserData);
	    5 ->
		skip_32_UpdateTableResponse(Rest, 0, 0, F1, F2,
					    TrUserData)
	  end
    end;
dg_read_field_def_UpdateTableResponse(<<>>, 0, 0, F1,
				      F2, _) ->
    #'UpdateTableResponse'{reserved_throughput_details = F1,
			   table_options = F2}.

d_field_UpdateTableResponse_reserved_throughput_details(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2,
							TrUserData)
    when N < 57 ->
    d_field_UpdateTableResponse_reserved_throughput_details(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, TrUserData);
d_field_UpdateTableResponse_reserved_throughput_details(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2,
							TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReservedThroughputDetails(Bs,
						   TrUserData),
		   TrUserData),
    dfp_read_field_def_UpdateTableResponse(Rest2, 0, 0,
					   if F1 == undefined -> NewFValue;
					      true ->
						  merge_msg_ReservedThroughputDetails(F1,
										      NewFValue,
										      TrUserData)
					   end,
					   F2, TrUserData).


d_field_UpdateTableResponse_table_options(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_UpdateTableResponse_table_options(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
d_field_UpdateTableResponse_table_options(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_UpdateTableResponse(Rest2, 0, 0, F1,
					   if F2 == undefined -> NewFValue;
					      true ->
						  merge_msg_TableOptions(F2,
									 NewFValue,
									 TrUserData)
					   end,
					   TrUserData).


skip_varint_UpdateTableResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_UpdateTableResponse(Rest, Z1, Z2, F1, F2,
				    TrUserData);
skip_varint_UpdateTableResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_UpdateTableResponse(Rest, Z1, Z2, F1,
					   F2, TrUserData).


skip_length_delimited_UpdateTableResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_UpdateTableResponse(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
skip_length_delimited_UpdateTableResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateTableResponse(Rest2, 0, 0, F1,
					   F2, TrUserData).


skip_32_UpdateTableResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_UpdateTableResponse(Rest, Z1, Z2, F1,
					   F2, TrUserData).


skip_64_UpdateTableResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_UpdateTableResponse(Rest, Z1, Z2, F1,
					   F2, TrUserData).


d_msg_PutRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_PutRowResponse(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PutRowResponse(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_PutRowResponse_consumed(Rest, Z1, Z2, F1, F2,
				    TrUserData);
dfp_read_field_def_PutRowResponse(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    d_field_PutRowResponse_row(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_PutRowResponse(<<>>, 0, 0, F1, F2,
				  _) ->
    #'PutRowResponse'{consumed = F1, row = F2};
dfp_read_field_def_PutRowResponse(Other, Z1, Z2, F1, F2,
				  TrUserData) ->
    dg_read_field_def_PutRowResponse(Other, Z1, Z2, F1, F2,
				     TrUserData).

dg_read_field_def_PutRowResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PutRowResponse(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_PutRowResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_PutRowResponse_consumed(Rest, 0, 0, F1, F2,
					  TrUserData);
      18 ->
	  d_field_PutRowResponse_row(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PutRowResponse(Rest, 0, 0, F1, F2,
					   TrUserData);
	    1 ->
		skip_64_PutRowResponse(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_PutRowResponse(Rest, 0, 0, F1, F2,
						     TrUserData);
	    5 ->
		skip_32_PutRowResponse(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_PutRowResponse(<<>>, 0, 0, F1, F2,
				 _) ->
    #'PutRowResponse'{consumed = F1, row = F2}.

d_field_PutRowResponse_consumed(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_PutRowResponse_consumed(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
d_field_PutRowResponse_consumed(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_PutRowResponse(Rest2, 0, 0,
				      if F1 == undefined -> NewFValue;
					 true ->
					     merge_msg_ConsumedCapacity(F1,
									NewFValue,
									TrUserData)
				      end,
				      F2, TrUserData).


d_field_PutRowResponse_row(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_PutRowResponse_row(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_PutRowResponse_row(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_PutRowResponse(Rest2, 0, 0, F1,
				      NewFValue, TrUserData).


skip_varint_PutRowResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_PutRowResponse(Rest, Z1, Z2, F1, F2,
			       TrUserData);
skip_varint_PutRowResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_PutRowResponse(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_length_delimited_PutRowResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PutRowResponse(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_PutRowResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PutRowResponse(Rest2, 0, 0, F1, F2,
				      TrUserData).


skip_32_PutRowResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_PutRowResponse(Rest, Z1, Z2, F1, F2,
				      TrUserData).


skip_64_PutRowResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, TrUserData) ->
    dfp_read_field_def_PutRowResponse(Rest, Z1, Z2, F1, F2,
				      TrUserData).


d_msg_ReservedThroughput(Bin, TrUserData) ->
    dfp_read_field_def_ReservedThroughput(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_ReservedThroughput(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_ReservedThroughput_capacity_unit(Rest, Z1, Z2,
					     F1, TrUserData);
dfp_read_field_def_ReservedThroughput(<<>>, 0, 0, F1,
				      _) ->
    #'ReservedThroughput'{capacity_unit = F1};
dfp_read_field_def_ReservedThroughput(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_ReservedThroughput(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_ReservedThroughput(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReservedThroughput(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ReservedThroughput(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReservedThroughput_capacity_unit(Rest, 0, 0, F1,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReservedThroughput(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_ReservedThroughput(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ReservedThroughput(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_ReservedThroughput(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ReservedThroughput(<<>>, 0, 0, F1,
				     _) ->
    #'ReservedThroughput'{capacity_unit = F1}.

d_field_ReservedThroughput_capacity_unit(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ReservedThroughput_capacity_unit(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
d_field_ReservedThroughput_capacity_unit(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_CapacityUnit(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ReservedThroughput(Rest2, 0, 0,
					  if F1 == undefined -> NewFValue;
					     true ->
						 merge_msg_CapacityUnit(F1,
									NewFValue,
									TrUserData)
					  end,
					  TrUserData).


skip_varint_ReservedThroughput(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_ReservedThroughput(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_ReservedThroughput(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ReservedThroughput(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_ReservedThroughput(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReservedThroughput(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ReservedThroughput(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReservedThroughput(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_ReservedThroughput(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_ReservedThroughput(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_ReservedThroughput(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_ReservedThroughput(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_TimeRange(Bin, TrUserData) ->
    dfp_read_field_def_TimeRange(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TimeRange(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, F3, TrUserData) ->
    d_field_TimeRange_start_time(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_TimeRange(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_TimeRange_end_time(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_TimeRange(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, TrUserData) ->
    d_field_TimeRange_specific_time(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_TimeRange(<<>>, 0, 0, F1, F2, F3,
			     _) ->
    #'TimeRange'{start_time = F1, end_time = F2,
		 specific_time = F3};
dfp_read_field_def_TimeRange(Other, Z1, Z2, F1, F2, F3,
			     TrUserData) ->
    dg_read_field_def_TimeRange(Other, Z1, Z2, F1, F2, F3,
				TrUserData).

dg_read_field_def_TimeRange(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TimeRange(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
dg_read_field_def_TimeRange(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TimeRange_start_time(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      16 ->
	  d_field_TimeRange_end_time(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      24 ->
	  d_field_TimeRange_specific_time(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TimeRange(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
	    1 ->
		skip_64_TimeRange(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_TimeRange(Rest, 0, 0, F1, F2, F3,
						TrUserData);
	    5 ->
		skip_32_TimeRange(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_TimeRange(<<>>, 0, 0, F1, F2, F3,
			    _) ->
    #'TimeRange'{start_time = F1, end_time = F2,
		 specific_time = F3}.

d_field_TimeRange_start_time(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_TimeRange_start_time(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_TimeRange_start_time(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TimeRange(Rest, 0, 0, NewFValue, F2,
				 F3, TrUserData).


d_field_TimeRange_end_time(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_TimeRange_end_time(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_TimeRange_end_time(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TimeRange(Rest, 0, 0, F1, NewFValue,
				 F3, TrUserData).


d_field_TimeRange_specific_time(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_TimeRange_specific_time(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_TimeRange_specific_time(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TimeRange(Rest, 0, 0, F1, F2,
				 NewFValue, TrUserData).


skip_varint_TimeRange(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    skip_varint_TimeRange(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
skip_varint_TimeRange(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, TrUserData) ->
    dfp_read_field_def_TimeRange(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_length_delimited_TimeRange(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_TimeRange(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_TimeRange(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeRange(Rest2, 0, 0, F1, F2, F3,
				 TrUserData).


skip_32_TimeRange(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_TimeRange(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


skip_64_TimeRange(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, TrUserData) ->
    dfp_read_field_def_TimeRange(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData).


d_msg_TableInBatchGetRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowRequest(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id([], TrUserData),
						 id([], TrUserData),
						 id([], TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_TableInBatchGetRowRequest(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_table_name(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<18,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_primary_key(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<26,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_token(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<34,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_columns_to_get(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10,
						     TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<42,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_time_range(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<48,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_max_versions(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<56,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_cache_blocks(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<66,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_filter(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<74,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_start_column(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<82,
					       Rest/binary>>,
					     Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    d_field_TableInBatchGetRowRequest_end_column(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, TrUserData);
dfp_read_field_def_TableInBatchGetRowRequest(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, TrUserData) ->
    #'TableInBatchGetRowRequest'{table_name = F1,
				 primary_key = lists_reverse(F2, TrUserData),
				 token = lists_reverse(F3, TrUserData),
				 columns_to_get = lists_reverse(F4, TrUserData),
				 time_range = F5, max_versions = F6,
				 cache_blocks = F7, filter = F8,
				 start_column = F9, end_column = F10};
dfp_read_field_def_TableInBatchGetRowRequest(Other, Z1,
					     Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					     F9, F10, TrUserData) ->
    dg_read_field_def_TableInBatchGetRowRequest(Other, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, TrUserData).

dg_read_field_def_TableInBatchGetRowRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableInBatchGetRowRequest(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10,
						TrUserData);
dg_read_field_def_TableInBatchGetRowRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TableInBatchGetRowRequest_table_name(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10,
						       TrUserData);
      18 ->
	  d_field_TableInBatchGetRowRequest_primary_key(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							TrUserData);
      26 ->
	  d_field_TableInBatchGetRowRequest_token(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, TrUserData);
      34 ->
	  d_field_TableInBatchGetRowRequest_columns_to_get(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, TrUserData);
      42 ->
	  d_field_TableInBatchGetRowRequest_time_range(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10,
						       TrUserData);
      48 ->
	  d_field_TableInBatchGetRowRequest_max_versions(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 TrUserData);
      56 ->
	  d_field_TableInBatchGetRowRequest_cache_blocks(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 TrUserData);
      66 ->
	  d_field_TableInBatchGetRowRequest_filter(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, TrUserData);
      74 ->
	  d_field_TableInBatchGetRowRequest_start_column(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 TrUserData);
      82 ->
	  d_field_TableInBatchGetRowRequest_end_column(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10,
						       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableInBatchGetRowRequest(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, TrUserData);
	    1 ->
		skip_64_TableInBatchGetRowRequest(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, TrUserData);
	    2 ->
		skip_length_delimited_TableInBatchGetRowRequest(Rest, 0,
								0, F1, F2, F3,
								F4, F5, F6, F7,
								F8, F9, F10,
								TrUserData);
	    5 ->
		skip_32_TableInBatchGetRowRequest(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, TrUserData)
	  end
    end;
dg_read_field_def_TableInBatchGetRowRequest(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, TrUserData) ->
    #'TableInBatchGetRowRequest'{table_name = F1,
				 primary_key = lists_reverse(F2, TrUserData),
				 token = lists_reverse(F3, TrUserData),
				 columns_to_get = lists_reverse(F4, TrUserData),
				 time_range = F5, max_versions = F6,
				 cache_blocks = F7, filter = F8,
				 start_column = F9, end_column = F10}.

d_field_TableInBatchGetRowRequest_table_name(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_table_name(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, TrUserData);
d_field_TableInBatchGetRowRequest_table_name(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, NewFValue, F2, F3, F4, F5,
						 F6, F7, F8, F9, F10,
						 TrUserData).


d_field_TableInBatchGetRowRequest_primary_key(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_primary_key(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, TrUserData);
d_field_TableInBatchGetRowRequest_primary_key(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1,
						 cons(NewFValue, F2,
						      TrUserData),
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, TrUserData).


d_field_TableInBatchGetRowRequest_token(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_token(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, TrUserData);
d_field_TableInBatchGetRowRequest_token(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1, F2,
						 cons(NewFValue, F3,
						      TrUserData),
						 F4, F5, F6, F7, F8, F9, F10,
						 TrUserData).


d_field_TableInBatchGetRowRequest_columns_to_get(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_columns_to_get(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, TrUserData);
d_field_TableInBatchGetRowRequest_columns_to_get(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1, F2, F3,
						 cons(NewFValue, F4,
						      TrUserData),
						 F5, F6, F7, F8, F9, F10,
						 TrUserData).


d_field_TableInBatchGetRowRequest_time_range(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_time_range(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, TrUserData);
d_field_TableInBatchGetRowRequest_time_range(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TimeRange(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1, F2, F3, F4,
						 if F5 == undefined ->
							NewFValue;
						    true ->
							merge_msg_TimeRange(F5,
									    NewFValue,
									    TrUserData)
						 end,
						 F6, F7, F8, F9, F10,
						 TrUserData).


d_field_TableInBatchGetRowRequest_max_versions(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_max_versions(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, TrUserData);
d_field_TableInBatchGetRowRequest_max_versions(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, _,
					       F7, F8, F9, F10, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_TableInBatchGetRowRequest(Rest, 0, 0,
						 F1, F2, F3, F4, F5, NewFValue,
						 F7, F8, F9, F10, TrUserData).


d_field_TableInBatchGetRowRequest_cache_blocks(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_cache_blocks(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, TrUserData);
d_field_TableInBatchGetRowRequest_cache_blocks(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       _, F8, F9, F10, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_TableInBatchGetRowRequest(Rest, 0, 0,
						 F1, F2, F3, F4, F5, F6,
						 NewFValue, F8, F9, F10,
						 TrUserData).


d_field_TableInBatchGetRowRequest_filter(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_filter(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, TrUserData);
d_field_TableInBatchGetRowRequest_filter(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
					 F9, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 NewFValue, F9, F10,
						 TrUserData).


d_field_TableInBatchGetRowRequest_start_column(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_start_column(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, TrUserData);
d_field_TableInBatchGetRowRequest_start_column(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, _, F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8, NewFValue, F10,
						 TrUserData).


d_field_TableInBatchGetRowRequest_end_column(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowRequest_end_column(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, TrUserData);
d_field_TableInBatchGetRowRequest_end_column(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, NewFValue, TrUserData).


skip_varint_TableInBatchGetRowRequest(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, TrUserData) ->
    skip_varint_TableInBatchGetRowRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  TrUserData);
skip_varint_TableInBatchGetRowRequest(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowRequest(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, TrUserData).


skip_length_delimited_TableInBatchGetRowRequest(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableInBatchGetRowRequest(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, TrUserData);
skip_length_delimited_TableInBatchGetRowRequest(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableInBatchGetRowRequest(Rest2, 0,
						 0, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, TrUserData).


skip_32_TableInBatchGetRowRequest(<<_:32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowRequest(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, TrUserData).


skip_64_TableInBatchGetRowRequest(<<_:64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowRequest(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, TrUserData).


d_msg_BatchGetRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_BatchGetRowRequest(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_BatchGetRowRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_BatchGetRowRequest_tables(Rest, Z1, Z2, F1,
				      TrUserData);
dfp_read_field_def_BatchGetRowRequest(<<>>, 0, 0, F1,
				      TrUserData) ->
    #'BatchGetRowRequest'{tables =
			      lists_reverse(F1, TrUserData)};
dfp_read_field_def_BatchGetRowRequest(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_BatchGetRowRequest(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_BatchGetRowRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BatchGetRowRequest(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_BatchGetRowRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BatchGetRowRequest_tables(Rest, 0, 0, F1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BatchGetRowRequest(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_BatchGetRowRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_BatchGetRowRequest(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_BatchGetRowRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_BatchGetRowRequest(<<>>, 0, 0, F1,
				     TrUserData) ->
    #'BatchGetRowRequest'{tables =
			      lists_reverse(F1, TrUserData)}.

d_field_BatchGetRowRequest_tables(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_BatchGetRowRequest_tables(Rest, N + 7,
				      X bsl N + Acc, F1, TrUserData);
d_field_BatchGetRowRequest_tables(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableInBatchGetRowRequest(Bs,
						   TrUserData),
		   TrUserData),
    dfp_read_field_def_BatchGetRowRequest(Rest2, 0, 0,
					  cons(NewFValue, F1, TrUserData),
					  TrUserData).


skip_varint_BatchGetRowRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_BatchGetRowRequest(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_BatchGetRowRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchGetRowRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_BatchGetRowRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BatchGetRowRequest(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_BatchGetRowRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BatchGetRowRequest(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_BatchGetRowRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchGetRowRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_BatchGetRowRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchGetRowRequest(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_DeleteTableRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteTableRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_DeleteTableRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, TrUserData) ->
    d_field_DeleteTableRequest_table_name(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_DeleteTableRequest(<<>>, 0, 0, F1,
				      _) ->
    #'DeleteTableRequest'{table_name = F1};
dfp_read_field_def_DeleteTableRequest(Other, Z1, Z2, F1,
				      TrUserData) ->
    dg_read_field_def_DeleteTableRequest(Other, Z1, Z2, F1,
					 TrUserData).

dg_read_field_def_DeleteTableRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteTableRequest(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
dg_read_field_def_DeleteTableRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteTableRequest_table_name(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteTableRequest(Rest, 0, 0, F1,
					       TrUserData);
	    1 ->
		skip_64_DeleteTableRequest(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_DeleteTableRequest(Rest, 0, 0, F1,
							 TrUserData);
	    5 ->
		skip_32_DeleteTableRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_DeleteTableRequest(<<>>, 0, 0, F1,
				     _) ->
    #'DeleteTableRequest'{table_name = F1}.

d_field_DeleteTableRequest_table_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_DeleteTableRequest_table_name(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_DeleteTableRequest_table_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DeleteTableRequest(Rest2, 0, 0,
					  NewFValue, TrUserData).


skip_varint_DeleteTableRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    skip_varint_DeleteTableRequest(Rest, Z1, Z2, F1,
				   TrUserData);
skip_varint_DeleteTableRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_DeleteTableRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_length_delimited_DeleteTableRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteTableRequest(Rest, N + 7,
					     X bsl N + Acc, F1, TrUserData);
skip_length_delimited_DeleteTableRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteTableRequest(Rest2, 0, 0, F1,
					  TrUserData).


skip_32_DeleteTableRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_DeleteTableRequest(Rest, Z1, Z2, F1,
					  TrUserData).


skip_64_DeleteTableRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, TrUserData) ->
    dfp_read_field_def_DeleteTableRequest(Rest, Z1, Z2, F1,
					  TrUserData).


d_msg_ListTableRequest(Bin, TrUserData) ->
    dfp_read_field_def_ListTableRequest(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_ListTableRequest(<<>>, 0, 0, _) ->
    #'ListTableRequest'{};
dfp_read_field_def_ListTableRequest(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_ListTableRequest(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_ListTableRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ListTableRequest(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_ListTableRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ListTableRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_ListTableRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_ListTableRequest(Rest, 0, 0,
						 TrUserData);
      5 -> skip_32_ListTableRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ListTableRequest(<<>>, 0, 0, _) ->
    #'ListTableRequest'{}.

skip_varint_ListTableRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_ListTableRequest(Rest, Z1, Z2, TrUserData);
skip_varint_ListTableRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_ListTableRequest(Rest, Z1, Z2,
					TrUserData).


skip_length_delimited_ListTableRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ListTableRequest(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_ListTableRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ListTableRequest(Rest2, 0, 0,
					TrUserData).


skip_32_ListTableRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_ListTableRequest(Rest, Z1, Z2,
					TrUserData).


skip_64_ListTableRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_ListTableRequest(Rest, Z1, Z2,
					TrUserData).


d_msg_UpdateTableRequest(Bin, TrUserData) ->
    dfp_read_field_def_UpdateTableRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_UpdateTableRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_UpdateTableRequest_table_name(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData);
dfp_read_field_def_UpdateTableRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_UpdateTableRequest_reserved_throughput(Rest, Z1,
						   Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_UpdateTableRequest(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_UpdateTableRequest_table_options(Rest, Z1, Z2,
					     F1, F2, F3, TrUserData);
dfp_read_field_def_UpdateTableRequest(<<>>, 0, 0, F1,
				      F2, F3, _) ->
    #'UpdateTableRequest'{table_name = F1,
			  reserved_throughput = F2, table_options = F3};
dfp_read_field_def_UpdateTableRequest(Other, Z1, Z2, F1,
				      F2, F3, TrUserData) ->
    dg_read_field_def_UpdateTableRequest(Other, Z1, Z2, F1,
					 F2, F3, TrUserData).

dg_read_field_def_UpdateTableRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UpdateTableRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_UpdateTableRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UpdateTableRequest_table_name(Rest, 0, 0, F1,
						F2, F3, TrUserData);
      18 ->
	  d_field_UpdateTableRequest_reserved_throughput(Rest, 0,
							 0, F1, F2, F3,
							 TrUserData);
      26 ->
	  d_field_UpdateTableRequest_table_options(Rest, 0, 0, F1,
						   F2, F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UpdateTableRequest(Rest, 0, 0, F1, F2, F3,
					       TrUserData);
	    1 ->
		skip_64_UpdateTableRequest(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    2 ->
		skip_length_delimited_UpdateTableRequest(Rest, 0, 0, F1,
							 F2, F3, TrUserData);
	    5 ->
		skip_32_UpdateTableRequest(Rest, 0, 0, F1, F2, F3,
					   TrUserData)
	  end
    end;
dg_read_field_def_UpdateTableRequest(<<>>, 0, 0, F1, F2,
				     F3, _) ->
    #'UpdateTableRequest'{table_name = F1,
			  reserved_throughput = F2, table_options = F3}.

d_field_UpdateTableRequest_table_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_UpdateTableRequest_table_name(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
d_field_UpdateTableRequest_table_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_UpdateTableRequest(Rest2, 0, 0,
					  NewFValue, F2, F3, TrUserData).


d_field_UpdateTableRequest_reserved_throughput(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_UpdateTableRequest_reserved_throughput(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, TrUserData);
d_field_UpdateTableRequest_reserved_throughput(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3,
					       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReservedThroughput(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_UpdateTableRequest(Rest2, 0, 0, F1,
					  if F2 == undefined -> NewFValue;
					     true ->
						 merge_msg_ReservedThroughput(F2,
									      NewFValue,
									      TrUserData)
					  end,
					  F3, TrUserData).


d_field_UpdateTableRequest_table_options(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_UpdateTableRequest_table_options(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
d_field_UpdateTableRequest_table_options(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_UpdateTableRequest(Rest2, 0, 0, F1,
					  F2,
					  if F3 == undefined -> NewFValue;
					     true ->
						 merge_msg_TableOptions(F3,
									NewFValue,
									TrUserData)
					  end,
					  TrUserData).


skip_varint_UpdateTableRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_UpdateTableRequest(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
skip_varint_UpdateTableRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_UpdateTableRequest(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


skip_length_delimited_UpdateTableRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_UpdateTableRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3,
					     TrUserData);
skip_length_delimited_UpdateTableRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateTableRequest(Rest2, 0, 0, F1,
					  F2, F3, TrUserData).


skip_32_UpdateTableRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_UpdateTableRequest(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


skip_64_UpdateTableRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_UpdateTableRequest(Rest, Z1, Z2, F1,
					  F2, F3, TrUserData).


d_msg_CreateTableRequest(Bin, TrUserData) ->
    dfp_read_field_def_CreateTableRequest(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_CreateTableRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CreateTableRequest_table_meta(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData);
dfp_read_field_def_CreateTableRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CreateTableRequest_reserved_throughput(Rest, Z1,
						   Z2, F1, F2, F3, F4,
						   TrUserData);
dfp_read_field_def_CreateTableRequest(<<26,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CreateTableRequest_table_options(Rest, Z1, Z2,
					     F1, F2, F3, F4, TrUserData);
dfp_read_field_def_CreateTableRequest(<<34,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_CreateTableRequest_partitions(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData);
dfp_read_field_def_CreateTableRequest(<<>>, 0, 0, F1,
				      F2, F3, F4, TrUserData) ->
    #'CreateTableRequest'{table_meta = F1,
			  reserved_throughput = F2, table_options = F3,
			  partitions = lists_reverse(F4, TrUserData)};
dfp_read_field_def_CreateTableRequest(Other, Z1, Z2, F1,
				      F2, F3, F4, TrUserData) ->
    dg_read_field_def_CreateTableRequest(Other, Z1, Z2, F1,
					 F2, F3, F4, TrUserData).

dg_read_field_def_CreateTableRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CreateTableRequest(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4,
					 TrUserData);
dg_read_field_def_CreateTableRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CreateTableRequest_table_meta(Rest, 0, 0, F1,
						F2, F3, F4, TrUserData);
      18 ->
	  d_field_CreateTableRequest_reserved_throughput(Rest, 0,
							 0, F1, F2, F3, F4,
							 TrUserData);
      26 ->
	  d_field_CreateTableRequest_table_options(Rest, 0, 0, F1,
						   F2, F3, F4, TrUserData);
      34 ->
	  d_field_CreateTableRequest_partitions(Rest, 0, 0, F1,
						F2, F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CreateTableRequest(Rest, 0, 0, F1, F2, F3,
					       F4, TrUserData);
	    1 ->
		skip_64_CreateTableRequest(Rest, 0, 0, F1, F2, F3, F4,
					   TrUserData);
	    2 ->
		skip_length_delimited_CreateTableRequest(Rest, 0, 0, F1,
							 F2, F3, F4,
							 TrUserData);
	    5 ->
		skip_32_CreateTableRequest(Rest, 0, 0, F1, F2, F3, F4,
					   TrUserData)
	  end
    end;
dg_read_field_def_CreateTableRequest(<<>>, 0, 0, F1, F2,
				     F3, F4, TrUserData) ->
    #'CreateTableRequest'{table_meta = F1,
			  reserved_throughput = F2, table_options = F3,
			  partitions = lists_reverse(F4, TrUserData)}.

d_field_CreateTableRequest_table_meta(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_CreateTableRequest_table_meta(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4,
					  TrUserData);
d_field_CreateTableRequest_table_meta(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableMeta(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_CreateTableRequest(Rest2, 0, 0,
					  if F1 == undefined -> NewFValue;
					     true ->
						 merge_msg_TableMeta(F1,
								     NewFValue,
								     TrUserData)
					  end,
					  F2, F3, F4, TrUserData).


d_field_CreateTableRequest_reserved_throughput(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4,
					       TrUserData)
    when N < 57 ->
    d_field_CreateTableRequest_reserved_throughput(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, TrUserData);
d_field_CreateTableRequest_reserved_throughput(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4,
					       TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReservedThroughput(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_CreateTableRequest(Rest2, 0, 0, F1,
					  if F2 == undefined -> NewFValue;
					     true ->
						 merge_msg_ReservedThroughput(F2,
									      NewFValue,
									      TrUserData)
					  end,
					  F3, F4, TrUserData).


d_field_CreateTableRequest_table_options(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_CreateTableRequest_table_options(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4,
					     TrUserData);
d_field_CreateTableRequest_table_options(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableOptions(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_CreateTableRequest(Rest2, 0, 0, F1,
					  F2,
					  if F3 == undefined -> NewFValue;
					     true ->
						 merge_msg_TableOptions(F3,
									NewFValue,
									TrUserData)
					  end,
					  F4, TrUserData).


d_field_CreateTableRequest_partitions(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_CreateTableRequest_partitions(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4,
					  TrUserData);
d_field_CreateTableRequest_partitions(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_PartitionRange(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_CreateTableRequest(Rest2, 0, 0, F1,
					  F2, F3,
					  cons(NewFValue, F4, TrUserData),
					  TrUserData).


skip_varint_CreateTableRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_CreateTableRequest(Rest, Z1, Z2, F1, F2, F3,
				   F4, TrUserData);
skip_varint_CreateTableRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_CreateTableRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData).


skip_length_delimited_CreateTableRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_CreateTableRequest(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4,
					     TrUserData);
skip_length_delimited_CreateTableRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CreateTableRequest(Rest2, 0, 0, F1,
					  F2, F3, F4, TrUserData).


skip_32_CreateTableRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_CreateTableRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData).


skip_64_CreateTableRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_CreateTableRequest(Rest, Z1, Z2, F1,
					  F2, F3, F4, TrUserData).


d_msg_GetRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetRowRequest(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id([], TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetRowRequest(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_table_name(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData);
dfp_read_field_def_GetRowRequest(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_primary_key(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      TrUserData);
dfp_read_field_def_GetRowRequest(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_columns_to_get(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 TrUserData);
dfp_read_field_def_GetRowRequest(<<34, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_time_range(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData);
dfp_read_field_def_GetRowRequest(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_max_versions(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData);
dfp_read_field_def_GetRowRequest(<<48, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_cache_blocks(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData);
dfp_read_field_def_GetRowRequest(<<58, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_filter(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_GetRowRequest(<<66, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_start_column(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       TrUserData);
dfp_read_field_def_GetRowRequest(<<74, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_end_column(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData);
dfp_read_field_def_GetRowRequest(<<82, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    d_field_GetRowRequest_token(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, TrUserData);
dfp_read_field_def_GetRowRequest(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    #'GetRowRequest'{table_name = F1, primary_key = F2,
		     columns_to_get = lists_reverse(F3, TrUserData),
		     time_range = F4, max_versions = F5, cache_blocks = F6,
		     filter = F7, start_column = F8, end_column = F9,
		     token = F10};
dfp_read_field_def_GetRowRequest(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dg_read_field_def_GetRowRequest(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10,
				    TrUserData).

dg_read_field_def_GetRowRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRowRequest(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, TrUserData);
dg_read_field_def_GetRowRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRowRequest_table_name(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10,
					   TrUserData);
      18 ->
	  d_field_GetRowRequest_primary_key(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    TrUserData);
      26 ->
	  d_field_GetRowRequest_columns_to_get(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       TrUserData);
      34 ->
	  d_field_GetRowRequest_time_range(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10,
					   TrUserData);
      40 ->
	  d_field_GetRowRequest_max_versions(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     TrUserData);
      48 ->
	  d_field_GetRowRequest_cache_blocks(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     TrUserData);
      58 ->
	  d_field_GetRowRequest_filter(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, TrUserData);
      66 ->
	  d_field_GetRowRequest_start_column(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     TrUserData);
      74 ->
	  d_field_GetRowRequest_end_column(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10,
					   TrUserData);
      82 ->
	  d_field_GetRowRequest_token(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8, F9, F10, TrUserData);
	    1 ->
		skip_64_GetRowRequest(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, TrUserData);
	    2 ->
		skip_length_delimited_GetRowRequest(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7, F8, F9,
						    F10, TrUserData);
	    5 ->
		skip_32_GetRowRequest(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, TrUserData)
	  end
    end;
dg_read_field_def_GetRowRequest(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    #'GetRowRequest'{table_name = F1, primary_key = F2,
		     columns_to_get = lists_reverse(F3, TrUserData),
		     time_range = F4, max_versions = F5, cache_blocks = F6,
		     filter = F7, start_column = F8, end_column = F9,
		     token = F10}.

d_field_GetRowRequest_table_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_table_name(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, TrUserData);
d_field_GetRowRequest_table_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData).


d_field_GetRowRequest_primary_key(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_primary_key(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, TrUserData);
d_field_GetRowRequest_primary_key(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				  F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData).


d_field_GetRowRequest_columns_to_get(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_columns_to_get(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, TrUserData);
d_field_GetRowRequest_columns_to_get(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1, F2,
				     cons(NewFValue, F3, TrUserData), F4, F5,
				     F6, F7, F8, F9, F10, TrUserData).


d_field_GetRowRequest_time_range(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_time_range(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, TrUserData);
d_field_GetRowRequest_time_range(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TimeRange(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1, F2,
				     F3,
				     if F4 == undefined -> NewFValue;
					true ->
					    merge_msg_TimeRange(F4, NewFValue,
								TrUserData)
				     end,
				     F5, F6, F7, F8, F9, F10, TrUserData).


d_field_GetRowRequest_max_versions(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_max_versions(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, TrUserData);
d_field_GetRowRequest_max_versions(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				   F10, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GetRowRequest(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6, F7, F8, F9, F10,
				     TrUserData).


d_field_GetRowRequest_cache_blocks(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_cache_blocks(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, TrUserData);
d_field_GetRowRequest_cache_blocks(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				   F10, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_GetRowRequest(Rest, 0, 0, F1, F2, F3,
				     F4, F5, NewFValue, F7, F8, F9, F10,
				     TrUserData).


d_field_GetRowRequest_filter(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_filter(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 TrUserData);
d_field_GetRowRequest_filter(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			     TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, NewFValue, F8, F9, F10,
				     TrUserData).


d_field_GetRowRequest_start_column(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_start_column(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, TrUserData);
d_field_GetRowRequest_start_column(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				   F10, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, NewFValue, F9, F10,
				     TrUserData).


d_field_GetRowRequest_end_column(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_end_column(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, TrUserData);
d_field_GetRowRequest_end_column(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				 TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, NewFValue, F10,
				     TrUserData).


d_field_GetRowRequest_token(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    TrUserData)
    when N < 57 ->
    d_field_GetRowRequest_token(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				TrUserData);
d_field_GetRowRequest_token(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
			    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, NewFValue,
				     TrUserData).


skip_varint_GetRowRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			  TrUserData) ->
    skip_varint_GetRowRequest(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, TrUserData);
skip_varint_GetRowRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			  TrUserData) ->
    dfp_read_field_def_GetRowRequest(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData).


skip_length_delimited_GetRowRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRowRequest(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, TrUserData);
skip_length_delimited_GetRowRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRowRequest(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData).


skip_32_GetRowRequest(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_GetRowRequest(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData).


skip_64_GetRowRequest(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, TrUserData) ->
    dfp_read_field_def_GetRowRequest(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     TrUserData).


d_msg_DescribeTableRequest(Bin, TrUserData) ->
    dfp_read_field_def_DescribeTableRequest(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_DescribeTableRequest(<<10,
					  Rest/binary>>,
					Z1, Z2, F1, TrUserData) ->
    d_field_DescribeTableRequest_table_name(Rest, Z1, Z2,
					    F1, TrUserData);
dfp_read_field_def_DescribeTableRequest(<<>>, 0, 0, F1,
					_) ->
    #'DescribeTableRequest'{table_name = F1};
dfp_read_field_def_DescribeTableRequest(Other, Z1, Z2,
					F1, TrUserData) ->
    dg_read_field_def_DescribeTableRequest(Other, Z1, Z2,
					   F1, TrUserData).

dg_read_field_def_DescribeTableRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DescribeTableRequest(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
dg_read_field_def_DescribeTableRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DescribeTableRequest_table_name(Rest, 0, 0, F1,
						  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DescribeTableRequest(Rest, 0, 0, F1,
						 TrUserData);
	    1 ->
		skip_64_DescribeTableRequest(Rest, 0, 0, F1,
					     TrUserData);
	    2 ->
		skip_length_delimited_DescribeTableRequest(Rest, 0, 0,
							   F1, TrUserData);
	    5 ->
		skip_32_DescribeTableRequest(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_DescribeTableRequest(<<>>, 0, 0, F1,
				       _) ->
    #'DescribeTableRequest'{table_name = F1}.

d_field_DescribeTableRequest_table_name(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_DescribeTableRequest_table_name(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
d_field_DescribeTableRequest_table_name(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DescribeTableRequest(Rest2, 0, 0,
					    NewFValue, TrUserData).


skip_varint_DescribeTableRequest(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    skip_varint_DescribeTableRequest(Rest, Z1, Z2, F1,
				     TrUserData);
skip_varint_DescribeTableRequest(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_DescribeTableRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_length_delimited_DescribeTableRequest(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DescribeTableRequest(Rest, N + 7,
					       X bsl N + Acc, F1, TrUserData);
skip_length_delimited_DescribeTableRequest(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DescribeTableRequest(Rest2, 0, 0, F1,
					    TrUserData).


skip_32_DescribeTableRequest(<<_:32, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_DescribeTableRequest(Rest, Z1, Z2,
					    F1, TrUserData).


skip_64_DescribeTableRequest(<<_:64, Rest/binary>>, Z1,
			     Z2, F1, TrUserData) ->
    dfp_read_field_def_DescribeTableRequest(Rest, Z1, Z2,
					    F1, TrUserData).


d_msg_DeleteRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRowResponse(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DeleteRowResponse(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteRowResponse_consumed(Rest, Z1, Z2, F1, F2,
				       TrUserData);
dfp_read_field_def_DeleteRowResponse(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_DeleteRowResponse_row(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_DeleteRowResponse(<<>>, 0, 0, F1, F2,
				     _) ->
    #'DeleteRowResponse'{consumed = F1, row = F2};
dfp_read_field_def_DeleteRowResponse(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_DeleteRowResponse(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_DeleteRowResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRowResponse(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_DeleteRowResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteRowResponse_consumed(Rest, 0, 0, F1, F2,
					     TrUserData);
      18 ->
	  d_field_DeleteRowResponse_row(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteRowResponse(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_DeleteRowResponse(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_DeleteRowResponse(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_DeleteRowResponse(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_DeleteRowResponse(<<>>, 0, 0, F1, F2,
				    _) ->
    #'DeleteRowResponse'{consumed = F1, row = F2}.

d_field_DeleteRowResponse_consumed(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteRowResponse_consumed(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteRowResponse_consumed(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DeleteRowResponse(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_ConsumedCapacity(F1,
									   NewFValue,
									   TrUserData)
					 end,
					 F2, TrUserData).


d_field_DeleteRowResponse_row(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_DeleteRowResponse_row(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_DeleteRowResponse_row(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_DeleteRowResponse(Rest2, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_DeleteRowResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_DeleteRowResponse(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_DeleteRowResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteRowResponse(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_DeleteRowResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRowResponse(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_DeleteRowResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRowResponse(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_DeleteRowResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteRowResponse(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_DeleteRowResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_DeleteRowResponse(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_UnloadTableResponse(Bin, TrUserData) ->
    dfp_read_field_def_UnloadTableResponse(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_UnloadTableResponse(<<>>, 0, 0, _) ->
    #'UnloadTableResponse'{};
dfp_read_field_def_UnloadTableResponse(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_UnloadTableResponse(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_UnloadTableResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UnloadTableResponse(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_UnloadTableResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_UnloadTableResponse(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_UnloadTableResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_UnloadTableResponse(Rest, 0, 0,
						    TrUserData);
      5 -> skip_32_UnloadTableResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_UnloadTableResponse(<<>>, 0, 0, _) ->
    #'UnloadTableResponse'{}.

skip_varint_UnloadTableResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_UnloadTableResponse(Rest, Z1, Z2,
				    TrUserData);
skip_varint_UnloadTableResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_UnloadTableResponse(Rest, Z1, Z2,
					   TrUserData).


skip_length_delimited_UnloadTableResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_UnloadTableResponse(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_UnloadTableResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UnloadTableResponse(Rest2, 0, 0,
					   TrUserData).


skip_32_UnloadTableResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_UnloadTableResponse(Rest, Z1, Z2,
					   TrUserData).


skip_64_UnloadTableResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_UnloadTableResponse(Rest, Z1, Z2,
					   TrUserData).


d_msg_RowInBatchWriteRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowResponse(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_RowInBatchWriteRowResponse(<<8,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4,
					      TrUserData) ->
    d_field_RowInBatchWriteRowResponse_is_ok(Rest, Z1, Z2,
					     F1, F2, F3, F4, TrUserData);
dfp_read_field_def_RowInBatchWriteRowResponse(<<18,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4,
					      TrUserData) ->
    d_field_RowInBatchWriteRowResponse_error(Rest, Z1, Z2,
					     F1, F2, F3, F4, TrUserData);
dfp_read_field_def_RowInBatchWriteRowResponse(<<26,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4,
					      TrUserData) ->
    d_field_RowInBatchWriteRowResponse_consumed(Rest, Z1,
						Z2, F1, F2, F3, F4, TrUserData);
dfp_read_field_def_RowInBatchWriteRowResponse(<<34,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4,
					      TrUserData) ->
    d_field_RowInBatchWriteRowResponse_row(Rest, Z1, Z2, F1,
					   F2, F3, F4, TrUserData);
dfp_read_field_def_RowInBatchWriteRowResponse(<<>>, 0,
					      0, F1, F2, F3, F4, _) ->
    #'RowInBatchWriteRowResponse'{is_ok = F1, error = F2,
				  consumed = F3, row = F4};
dfp_read_field_def_RowInBatchWriteRowResponse(Other, Z1,
					      Z2, F1, F2, F3, F4, TrUserData) ->
    dg_read_field_def_RowInBatchWriteRowResponse(Other, Z1,
						 Z2, F1, F2, F3, F4,
						 TrUserData).

dg_read_field_def_RowInBatchWriteRowResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RowInBatchWriteRowResponse(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, TrUserData);
dg_read_field_def_RowInBatchWriteRowResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RowInBatchWriteRowResponse_is_ok(Rest, 0, 0, F1,
						   F2, F3, F4, TrUserData);
      18 ->
	  d_field_RowInBatchWriteRowResponse_error(Rest, 0, 0, F1,
						   F2, F3, F4, TrUserData);
      26 ->
	  d_field_RowInBatchWriteRowResponse_consumed(Rest, 0, 0,
						      F1, F2, F3, F4,
						      TrUserData);
      34 ->
	  d_field_RowInBatchWriteRowResponse_row(Rest, 0, 0, F1,
						 F2, F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RowInBatchWriteRowResponse(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    1 ->
		skip_64_RowInBatchWriteRowResponse(Rest, 0, 0, F1, F2,
						   F3, F4, TrUserData);
	    2 ->
		skip_length_delimited_RowInBatchWriteRowResponse(Rest,
								 0, 0, F1, F2,
								 F3, F4,
								 TrUserData);
	    5 ->
		skip_32_RowInBatchWriteRowResponse(Rest, 0, 0, F1, F2,
						   F3, F4, TrUserData)
	  end
    end;
dg_read_field_def_RowInBatchWriteRowResponse(<<>>, 0, 0,
					     F1, F2, F3, F4, _) ->
    #'RowInBatchWriteRowResponse'{is_ok = F1, error = F2,
				  consumed = F3, row = F4}.

d_field_RowInBatchWriteRowResponse_is_ok(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowResponse_is_ok(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4,
					     TrUserData);
d_field_RowInBatchWriteRowResponse_is_ok(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F2, F3, F4, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest, 0,
						  0, NewFValue, F2, F3, F4,
						  TrUserData).


d_field_RowInBatchWriteRowResponse_error(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowResponse_error(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4,
					     TrUserData);
d_field_RowInBatchWriteRowResponse_error(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Error(Bs, TrUserData), TrUserData),
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest2, 0,
						  0, F1,
						  if F2 == undefined ->
							 NewFValue;
						     true ->
							 merge_msg_Error(F2,
									 NewFValue,
									 TrUserData)
						  end,
						  F3, F4, TrUserData).


d_field_RowInBatchWriteRowResponse_consumed(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowResponse_consumed(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						TrUserData);
d_field_RowInBatchWriteRowResponse_consumed(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4,
					    TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest2, 0,
						  0, F1, F2,
						  if F3 == undefined ->
							 NewFValue;
						     true ->
							 merge_msg_ConsumedCapacity(F3,
										    NewFValue,
										    TrUserData)
						  end,
						  F4, TrUserData).


d_field_RowInBatchWriteRowResponse_row(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_RowInBatchWriteRowResponse_row(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
d_field_RowInBatchWriteRowResponse_row(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest2, 0,
						  0, F1, F2, F3, NewFValue,
						  TrUserData).


skip_varint_RowInBatchWriteRowResponse(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_RowInBatchWriteRowResponse(Rest, Z1, Z2, F1,
					   F2, F3, F4, TrUserData);
skip_varint_RowInBatchWriteRowResponse(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest, Z1,
						  Z2, F1, F2, F3, F4,
						  TrUserData).


skip_length_delimited_RowInBatchWriteRowResponse(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4,
						 TrUserData)
    when N < 57 ->
    skip_length_delimited_RowInBatchWriteRowResponse(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, TrUserData);
skip_length_delimited_RowInBatchWriteRowResponse(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest2, 0,
						  0, F1, F2, F3, F4,
						  TrUserData).


skip_32_RowInBatchWriteRowResponse(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest, Z1,
						  Z2, F1, F2, F3, F4,
						  TrUserData).


skip_64_RowInBatchWriteRowResponse(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_RowInBatchWriteRowResponse(Rest, Z1,
						  Z2, F1, F2, F3, F4,
						  TrUserData).


d_msg_TableInBatchWriteRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowResponse(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id([], TrUserData),
						    TrUserData).

dfp_read_field_def_TableInBatchWriteRowResponse(<<10,
						  Rest/binary>>,
						Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableInBatchWriteRowResponse_table_name(Rest,
						    Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_TableInBatchWriteRowResponse(<<18,
						  Rest/binary>>,
						Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableInBatchWriteRowResponse_rows(Rest, Z1, Z2,
					      F1, F2, TrUserData);
dfp_read_field_def_TableInBatchWriteRowResponse(<<>>, 0,
						0, F1, F2, TrUserData) ->
    #'TableInBatchWriteRowResponse'{table_name = F1,
				    rows = lists_reverse(F2, TrUserData)};
dfp_read_field_def_TableInBatchWriteRowResponse(Other,
						Z1, Z2, F1, F2, TrUserData) ->
    dg_read_field_def_TableInBatchWriteRowResponse(Other,
						   Z1, Z2, F1, F2, TrUserData).

dg_read_field_def_TableInBatchWriteRowResponse(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableInBatchWriteRowResponse(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
dg_read_field_def_TableInBatchWriteRowResponse(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TableInBatchWriteRowResponse_table_name(Rest, 0,
							  0, F1, F2,
							  TrUserData);
      18 ->
	  d_field_TableInBatchWriteRowResponse_rows(Rest, 0, 0,
						    F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableInBatchWriteRowResponse(Rest, 0, 0, F1,
							 F2, TrUserData);
	    1 ->
		skip_64_TableInBatchWriteRowResponse(Rest, 0, 0, F1, F2,
						     TrUserData);
	    2 ->
		skip_length_delimited_TableInBatchWriteRowResponse(Rest,
								   0, 0, F1, F2,
								   TrUserData);
	    5 ->
		skip_32_TableInBatchWriteRowResponse(Rest, 0, 0, F1, F2,
						     TrUserData)
	  end
    end;
dg_read_field_def_TableInBatchWriteRowResponse(<<>>, 0,
					       0, F1, F2, TrUserData) ->
    #'TableInBatchWriteRowResponse'{table_name = F1,
				    rows = lists_reverse(F2, TrUserData)}.

d_field_TableInBatchWriteRowResponse_table_name(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableInBatchWriteRowResponse_table_name(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, TrUserData);
d_field_TableInBatchWriteRowResponse_table_name(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInBatchWriteRowResponse(Rest2,
						    0, 0, NewFValue, F2,
						    TrUserData).


d_field_TableInBatchWriteRowResponse_rows(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableInBatchWriteRowResponse_rows(Rest, N + 7,
					      X bsl N + Acc, F1, F2,
					      TrUserData);
d_field_TableInBatchWriteRowResponse_rows(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RowInBatchWriteRowResponse(Bs,
						    TrUserData),
		   TrUserData),
    dfp_read_field_def_TableInBatchWriteRowResponse(Rest2,
						    0, 0, F1,
						    cons(NewFValue, F2,
							 TrUserData),
						    TrUserData).


skip_varint_TableInBatchWriteRowResponse(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_TableInBatchWriteRowResponse(Rest, Z1, Z2,
					     F1, F2, TrUserData);
skip_varint_TableInBatchWriteRowResponse(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowResponse(Rest,
						    Z1, Z2, F1, F2, TrUserData).


skip_length_delimited_TableInBatchWriteRowResponse(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableInBatchWriteRowResponse(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, TrUserData);
skip_length_delimited_TableInBatchWriteRowResponse(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableInBatchWriteRowResponse(Rest2,
						    0, 0, F1, F2, TrUserData).


skip_32_TableInBatchWriteRowResponse(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowResponse(Rest,
						    Z1, Z2, F1, F2, TrUserData).


skip_64_TableInBatchWriteRowResponse(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchWriteRowResponse(Rest,
						    Z1, Z2, F1, F2, TrUserData).


d_msg_BatchWriteRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_BatchWriteRowResponse(Bin, 0, 0,
					     id([], TrUserData), TrUserData).

dfp_read_field_def_BatchWriteRowResponse(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, TrUserData) ->
    d_field_BatchWriteRowResponse_tables(Rest, Z1, Z2, F1,
					 TrUserData);
dfp_read_field_def_BatchWriteRowResponse(<<>>, 0, 0, F1,
					 TrUserData) ->
    #'BatchWriteRowResponse'{tables =
				 lists_reverse(F1, TrUserData)};
dfp_read_field_def_BatchWriteRowResponse(Other, Z1, Z2,
					 F1, TrUserData) ->
    dg_read_field_def_BatchWriteRowResponse(Other, Z1, Z2,
					    F1, TrUserData).

dg_read_field_def_BatchWriteRowResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BatchWriteRowResponse(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_BatchWriteRowResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BatchWriteRowResponse_tables(Rest, 0, 0, F1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BatchWriteRowResponse(Rest, 0, 0, F1,
						  TrUserData);
	    1 ->
		skip_64_BatchWriteRowResponse(Rest, 0, 0, F1,
					      TrUserData);
	    2 ->
		skip_length_delimited_BatchWriteRowResponse(Rest, 0, 0,
							    F1, TrUserData);
	    5 ->
		skip_32_BatchWriteRowResponse(Rest, 0, 0, F1,
					      TrUserData)
	  end
    end;
dg_read_field_def_BatchWriteRowResponse(<<>>, 0, 0, F1,
					TrUserData) ->
    #'BatchWriteRowResponse'{tables =
				 lists_reverse(F1, TrUserData)}.

d_field_BatchWriteRowResponse_tables(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_BatchWriteRowResponse_tables(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
d_field_BatchWriteRowResponse_tables(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableInBatchWriteRowResponse(Bs,
						      TrUserData),
		   TrUserData),
    dfp_read_field_def_BatchWriteRowResponse(Rest2, 0, 0,
					     cons(NewFValue, F1, TrUserData),
					     TrUserData).


skip_varint_BatchWriteRowResponse(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    skip_varint_BatchWriteRowResponse(Rest, Z1, Z2, F1,
				      TrUserData);
skip_varint_BatchWriteRowResponse(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchWriteRowResponse(Rest, Z1, Z2,
					     F1, TrUserData).


skip_length_delimited_BatchWriteRowResponse(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BatchWriteRowResponse(Rest, N + 7,
						X bsl N + Acc, F1, TrUserData);
skip_length_delimited_BatchWriteRowResponse(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BatchWriteRowResponse(Rest2, 0, 0,
					     F1, TrUserData).


skip_32_BatchWriteRowResponse(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchWriteRowResponse(Rest, Z1, Z2,
					     F1, TrUserData).


skip_64_BatchWriteRowResponse(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchWriteRowResponse(Rest, Z1, Z2,
					     F1, TrUserData).


d_msg_UpdateRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_UpdateRowResponse(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_UpdateRowResponse(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_UpdateRowResponse_consumed(Rest, Z1, Z2, F1, F2,
				       TrUserData);
dfp_read_field_def_UpdateRowResponse(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    d_field_UpdateRowResponse_row(Rest, Z1, Z2, F1, F2,
				  TrUserData);
dfp_read_field_def_UpdateRowResponse(<<>>, 0, 0, F1, F2,
				     _) ->
    #'UpdateRowResponse'{consumed = F1, row = F2};
dfp_read_field_def_UpdateRowResponse(Other, Z1, Z2, F1,
				     F2, TrUserData) ->
    dg_read_field_def_UpdateRowResponse(Other, Z1, Z2, F1,
					F2, TrUserData).

dg_read_field_def_UpdateRowResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UpdateRowResponse(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_UpdateRowResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UpdateRowResponse_consumed(Rest, 0, 0, F1, F2,
					     TrUserData);
      18 ->
	  d_field_UpdateRowResponse_row(Rest, 0, 0, F1, F2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UpdateRowResponse(Rest, 0, 0, F1, F2,
					      TrUserData);
	    1 ->
		skip_64_UpdateRowResponse(Rest, 0, 0, F1, F2,
					  TrUserData);
	    2 ->
		skip_length_delimited_UpdateRowResponse(Rest, 0, 0, F1,
							F2, TrUserData);
	    5 ->
		skip_32_UpdateRowResponse(Rest, 0, 0, F1, F2,
					  TrUserData)
	  end
    end;
dg_read_field_def_UpdateRowResponse(<<>>, 0, 0, F1, F2,
				    _) ->
    #'UpdateRowResponse'{consumed = F1, row = F2}.

d_field_UpdateRowResponse_consumed(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_UpdateRowResponse_consumed(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
d_field_UpdateRowResponse_consumed(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_UpdateRowResponse(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_ConsumedCapacity(F1,
									   NewFValue,
									   TrUserData)
					 end,
					 F2, TrUserData).


d_field_UpdateRowResponse_row(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_UpdateRowResponse_row(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
d_field_UpdateRowResponse_row(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_UpdateRowResponse(Rest2, 0, 0, F1,
					 NewFValue, TrUserData).


skip_varint_UpdateRowResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_UpdateRowResponse(Rest, Z1, Z2, F1, F2,
				  TrUserData);
skip_varint_UpdateRowResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_UpdateRowResponse(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_length_delimited_UpdateRowResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_UpdateRowResponse(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_UpdateRowResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateRowResponse(Rest2, 0, 0, F1,
					 F2, TrUserData).


skip_32_UpdateRowResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_UpdateRowResponse(Rest, Z1, Z2, F1,
					 F2, TrUserData).


skip_64_UpdateRowResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    dfp_read_field_def_UpdateRowResponse(Rest, Z1, Z2, F1,
					 F2, TrUserData).


d_msg_GetRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetRowResponse(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetRowResponse(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_GetRowResponse_consumed(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_GetRowResponse(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_GetRowResponse_row(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_GetRowResponse(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_GetRowResponse_next_token(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_GetRowResponse(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #'GetRowResponse'{consumed = F1, row = F2,
		      next_token = F3};
dfp_read_field_def_GetRowResponse(Other, Z1, Z2, F1, F2,
				  F3, TrUserData) ->
    dg_read_field_def_GetRowResponse(Other, Z1, Z2, F1, F2,
				     F3, TrUserData).

dg_read_field_def_GetRowResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRowResponse(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_GetRowResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRowResponse_consumed(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      18 ->
	  d_field_GetRowResponse_row(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      26 ->
	  d_field_GetRowResponse_next_token(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRowResponse(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    1 ->
		skip_64_GetRowResponse(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    2 ->
		skip_length_delimited_GetRowResponse(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    5 ->
		skip_32_GetRowResponse(Rest, 0, 0, F1, F2, F3,
				       TrUserData)
	  end
    end;
dg_read_field_def_GetRowResponse(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #'GetRowResponse'{consumed = F1, row = F2,
		      next_token = F3}.

d_field_GetRowResponse_consumed(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_GetRowResponse_consumed(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_GetRowResponse_consumed(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetRowResponse(Rest2, 0, 0,
				      if F1 == undefined -> NewFValue;
					 true ->
					     merge_msg_ConsumedCapacity(F1,
									NewFValue,
									TrUserData)
				      end,
				      F2, F3, TrUserData).


d_field_GetRowResponse_row(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_GetRowResponse_row(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_GetRowResponse_row(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRowResponse(Rest2, 0, 0, F1,
				      NewFValue, F3, TrUserData).


d_field_GetRowResponse_next_token(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_GetRowResponse_next_token(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_GetRowResponse_next_token(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRowResponse(Rest2, 0, 0, F1, F2,
				      NewFValue, TrUserData).


skip_varint_GetRowResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_GetRowResponse(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
skip_varint_GetRowResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_GetRowResponse(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_length_delimited_GetRowResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRowResponse(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_GetRowResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRowResponse(Rest2, 0, 0, F1, F2,
				      F3, TrUserData).


skip_32_GetRowResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_GetRowResponse(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_64_GetRowResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_GetRowResponse(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


d_msg_GetRangeResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetRangeResponse(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetRangeResponse(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetRangeResponse_consumed(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
dfp_read_field_def_GetRangeResponse(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetRangeResponse_rows(Rest, Z1, Z2, F1, F2, F3,
				  F4, TrUserData);
dfp_read_field_def_GetRangeResponse(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetRangeResponse_next_start_primary_key(Rest,
						    Z1, Z2, F1, F2, F3, F4,
						    TrUserData);
dfp_read_field_def_GetRangeResponse(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_GetRangeResponse_next_token(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData);
dfp_read_field_def_GetRangeResponse(<<>>, 0, 0, F1, F2,
				    F3, F4, _) ->
    #'GetRangeResponse'{consumed = F1, rows = F2,
			next_start_primary_key = F3, next_token = F4};
dfp_read_field_def_GetRangeResponse(Other, Z1, Z2, F1,
				    F2, F3, F4, TrUserData) ->
    dg_read_field_def_GetRangeResponse(Other, Z1, Z2, F1,
				       F2, F3, F4, TrUserData).

dg_read_field_def_GetRangeResponse(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRangeResponse(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
dg_read_field_def_GetRangeResponse(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRangeResponse_consumed(Rest, 0, 0, F1, F2,
					    F3, F4, TrUserData);
      18 ->
	  d_field_GetRangeResponse_rows(Rest, 0, 0, F1, F2, F3,
					F4, TrUserData);
      26 ->
	  d_field_GetRangeResponse_next_start_primary_key(Rest, 0,
							  0, F1, F2, F3, F4,
							  TrUserData);
      34 ->
	  d_field_GetRangeResponse_next_token(Rest, 0, 0, F1, F2,
					      F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRangeResponse(Rest, 0, 0, F1, F2, F3, F4,
					     TrUserData);
	    1 ->
		skip_64_GetRangeResponse(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    2 ->
		skip_length_delimited_GetRangeResponse(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    5 ->
		skip_32_GetRangeResponse(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData)
	  end
    end;
dg_read_field_def_GetRangeResponse(<<>>, 0, 0, F1, F2,
				   F3, F4, _) ->
    #'GetRangeResponse'{consumed = F1, rows = F2,
			next_start_primary_key = F3, next_token = F4}.

d_field_GetRangeResponse_consumed(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_GetRangeResponse_consumed(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
d_field_GetRangeResponse_consumed(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ConsumedCapacity(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetRangeResponse(Rest2, 0, 0,
					if F1 == undefined -> NewFValue;
					   true ->
					       merge_msg_ConsumedCapacity(F1,
									  NewFValue,
									  TrUserData)
					end,
					F2, F3, F4, TrUserData).


d_field_GetRangeResponse_rows(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_GetRangeResponse_rows(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_GetRangeResponse_rows(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRangeResponse(Rest2, 0, 0, F1,
					NewFValue, F3, F4, TrUserData).


d_field_GetRangeResponse_next_start_primary_key(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4,
						TrUserData)
    when N < 57 ->
    d_field_GetRangeResponse_next_start_primary_key(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, TrUserData);
d_field_GetRangeResponse_next_start_primary_key(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, _, F4,
						TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRangeResponse(Rest2, 0, 0, F1, F2,
					NewFValue, F4, TrUserData).


d_field_GetRangeResponse_next_token(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_GetRangeResponse_next_token(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
d_field_GetRangeResponse_next_token(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRangeResponse(Rest2, 0, 0, F1, F2,
					F3, NewFValue, TrUserData).


skip_varint_GetRangeResponse(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_GetRangeResponse(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
skip_varint_GetRangeResponse(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_GetRangeResponse(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_length_delimited_GetRangeResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRangeResponse(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
skip_length_delimited_GetRangeResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRangeResponse(Rest2, 0, 0, F1, F2,
					F3, F4, TrUserData).


skip_32_GetRangeResponse(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_GetRangeResponse(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_64_GetRangeResponse(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_GetRangeResponse(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


d_msg_TableInBatchGetRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowResponse(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id([], TrUserData),
						  TrUserData).

dfp_read_field_def_TableInBatchGetRowResponse(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableInBatchGetRowResponse_table_name(Rest, Z1,
						  Z2, F1, F2, TrUserData);
dfp_read_field_def_TableInBatchGetRowResponse(<<18,
						Rest/binary>>,
					      Z1, Z2, F1, F2, TrUserData) ->
    d_field_TableInBatchGetRowResponse_rows(Rest, Z1, Z2,
					    F1, F2, TrUserData);
dfp_read_field_def_TableInBatchGetRowResponse(<<>>, 0,
					      0, F1, F2, TrUserData) ->
    #'TableInBatchGetRowResponse'{table_name = F1,
				  rows = lists_reverse(F2, TrUserData)};
dfp_read_field_def_TableInBatchGetRowResponse(Other, Z1,
					      Z2, F1, F2, TrUserData) ->
    dg_read_field_def_TableInBatchGetRowResponse(Other, Z1,
						 Z2, F1, F2, TrUserData).

dg_read_field_def_TableInBatchGetRowResponse(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TableInBatchGetRowResponse(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 TrUserData);
dg_read_field_def_TableInBatchGetRowResponse(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TableInBatchGetRowResponse_table_name(Rest, 0,
							0, F1, F2, TrUserData);
      18 ->
	  d_field_TableInBatchGetRowResponse_rows(Rest, 0, 0, F1,
						  F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TableInBatchGetRowResponse(Rest, 0, 0, F1,
						       F2, TrUserData);
	    1 ->
		skip_64_TableInBatchGetRowResponse(Rest, 0, 0, F1, F2,
						   TrUserData);
	    2 ->
		skip_length_delimited_TableInBatchGetRowResponse(Rest,
								 0, 0, F1, F2,
								 TrUserData);
	    5 ->
		skip_32_TableInBatchGetRowResponse(Rest, 0, 0, F1, F2,
						   TrUserData)
	  end
    end;
dg_read_field_def_TableInBatchGetRowResponse(<<>>, 0, 0,
					     F1, F2, TrUserData) ->
    #'TableInBatchGetRowResponse'{table_name = F1,
				  rows = lists_reverse(F2, TrUserData)}.

d_field_TableInBatchGetRowResponse_table_name(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowResponse_table_name(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  TrUserData);
d_field_TableInBatchGetRowResponse_table_name(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TableInBatchGetRowResponse(Rest2, 0,
						  0, NewFValue, F2, TrUserData).


d_field_TableInBatchGetRowResponse_rows(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_TableInBatchGetRowResponse_rows(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
d_field_TableInBatchGetRowResponse_rows(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_RowInBatchGetRowResponse(Bs,
						  TrUserData),
		   TrUserData),
    dfp_read_field_def_TableInBatchGetRowResponse(Rest2, 0,
						  0, F1,
						  cons(NewFValue, F2,
						       TrUserData),
						  TrUserData).


skip_varint_TableInBatchGetRowResponse(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_TableInBatchGetRowResponse(Rest, Z1, Z2, F1,
					   F2, TrUserData);
skip_varint_TableInBatchGetRowResponse(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowResponse(Rest, Z1,
						  Z2, F1, F2, TrUserData).


skip_length_delimited_TableInBatchGetRowResponse(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TableInBatchGetRowResponse(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, TrUserData);
skip_length_delimited_TableInBatchGetRowResponse(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TableInBatchGetRowResponse(Rest2, 0,
						  0, F1, F2, TrUserData).


skip_32_TableInBatchGetRowResponse(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowResponse(Rest, Z1,
						  Z2, F1, F2, TrUserData).


skip_64_TableInBatchGetRowResponse(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_TableInBatchGetRowResponse(Rest, Z1,
						  Z2, F1, F2, TrUserData).


d_msg_BatchGetRowResponse(Bin, TrUserData) ->
    dfp_read_field_def_BatchGetRowResponse(Bin, 0, 0,
					   id([], TrUserData), TrUserData).

dfp_read_field_def_BatchGetRowResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    d_field_BatchGetRowResponse_tables(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_BatchGetRowResponse(<<>>, 0, 0, F1,
				       TrUserData) ->
    #'BatchGetRowResponse'{tables =
			       lists_reverse(F1, TrUserData)};
dfp_read_field_def_BatchGetRowResponse(Other, Z1, Z2,
				       F1, TrUserData) ->
    dg_read_field_def_BatchGetRowResponse(Other, Z1, Z2, F1,
					  TrUserData).

dg_read_field_def_BatchGetRowResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BatchGetRowResponse(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_BatchGetRowResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BatchGetRowResponse_tables(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BatchGetRowResponse(Rest, 0, 0, F1,
						TrUserData);
	    1 ->
		skip_64_BatchGetRowResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_BatchGetRowResponse(Rest, 0, 0,
							  F1, TrUserData);
	    5 ->
		skip_32_BatchGetRowResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_BatchGetRowResponse(<<>>, 0, 0, F1,
				      TrUserData) ->
    #'BatchGetRowResponse'{tables =
			       lists_reverse(F1, TrUserData)}.

d_field_BatchGetRowResponse_tables(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_BatchGetRowResponse_tables(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_BatchGetRowResponse_tables(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TableInBatchGetRowResponse(Bs,
						    TrUserData),
		   TrUserData),
    dfp_read_field_def_BatchGetRowResponse(Rest2, 0, 0,
					   cons(NewFValue, F1, TrUserData),
					   TrUserData).


skip_varint_BatchGetRowResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    skip_varint_BatchGetRowResponse(Rest, Z1, Z2, F1,
				    TrUserData);
skip_varint_BatchGetRowResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchGetRowResponse(Rest, Z1, Z2, F1,
					   TrUserData).


skip_length_delimited_BatchGetRowResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BatchGetRowResponse(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_BatchGetRowResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BatchGetRowResponse(Rest2, 0, 0, F1,
					   TrUserData).


skip_32_BatchGetRowResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchGetRowResponse(Rest, Z1, Z2, F1,
					   TrUserData).


skip_64_BatchGetRowResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_BatchGetRowResponse(Rest, Z1, Z2, F1,
					   TrUserData).


d_msg_LoadTableResponse(Bin, TrUserData) ->
    dfp_read_field_def_LoadTableResponse(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_LoadTableResponse(<<>>, 0, 0, _) ->
    #'LoadTableResponse'{};
dfp_read_field_def_LoadTableResponse(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_LoadTableResponse(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_LoadTableResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoadTableResponse(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_LoadTableResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_LoadTableResponse(Rest, 0, 0, TrUserData);
      1 -> skip_64_LoadTableResponse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_LoadTableResponse(Rest, 0, 0,
						  TrUserData);
      5 -> skip_32_LoadTableResponse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_LoadTableResponse(<<>>, 0, 0, _) ->
    #'LoadTableResponse'{}.

skip_varint_LoadTableResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_LoadTableResponse(Rest, Z1, Z2, TrUserData);
skip_varint_LoadTableResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_LoadTableResponse(Rest, Z1, Z2,
					 TrUserData).


skip_length_delimited_LoadTableResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoadTableResponse(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_LoadTableResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoadTableResponse(Rest2, 0, 0,
					 TrUserData).


skip_32_LoadTableResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_LoadTableResponse(Rest, Z1, Z2,
					 TrUserData).


skip_64_LoadTableResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_LoadTableResponse(Rest, Z1, Z2,
					 TrUserData).


d_msg_ListTableResponse(Bin, TrUserData) ->
    dfp_read_field_def_ListTableResponse(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_ListTableResponse(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, TrUserData) ->
    d_field_ListTableResponse_table_names(Rest, Z1, Z2, F1,
					  TrUserData);
dfp_read_field_def_ListTableResponse(<<>>, 0, 0, F1,
				     TrUserData) ->
    #'ListTableResponse'{table_names =
			     lists_reverse(F1, TrUserData)};
dfp_read_field_def_ListTableResponse(Other, Z1, Z2, F1,
				     TrUserData) ->
    dg_read_field_def_ListTableResponse(Other, Z1, Z2, F1,
					TrUserData).

dg_read_field_def_ListTableResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ListTableResponse(Rest, N + 7,
					X bsl N + Acc, F1, TrUserData);
dg_read_field_def_ListTableResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ListTableResponse_table_names(Rest, 0, 0, F1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ListTableResponse(Rest, 0, 0, F1,
					      TrUserData);
	    1 ->
		skip_64_ListTableResponse(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_ListTableResponse(Rest, 0, 0, F1,
							TrUserData);
	    5 ->
		skip_32_ListTableResponse(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_ListTableResponse(<<>>, 0, 0, F1,
				    TrUserData) ->
    #'ListTableResponse'{table_names =
			     lists_reverse(F1, TrUserData)}.

d_field_ListTableResponse_table_names(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_ListTableResponse_table_names(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
d_field_ListTableResponse_table_names(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ListTableResponse(Rest2, 0, 0,
					 cons(NewFValue, F1, TrUserData),
					 TrUserData).


skip_varint_ListTableResponse(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    skip_varint_ListTableResponse(Rest, Z1, Z2, F1,
				  TrUserData);
skip_varint_ListTableResponse(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_ListTableResponse(Rest, Z1, Z2, F1,
					 TrUserData).


skip_length_delimited_ListTableResponse(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ListTableResponse(Rest, N + 7,
					    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_ListTableResponse(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ListTableResponse(Rest2, 0, 0, F1,
					 TrUserData).


skip_32_ListTableResponse(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ListTableResponse(Rest, Z1, Z2, F1,
					 TrUserData).


skip_64_ListTableResponse(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, TrUserData) ->
    dfp_read_field_def_ListTableResponse(Rest, Z1, Z2, F1,
					 TrUserData).


d_msg_GetRangeRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetRangeRequest(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id([], TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GetRangeRequest(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_table_name(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_direction(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_columns_to_get(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<34, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_time_range(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<40, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_max_versions(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<48, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_limit(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData);
dfp_read_field_def_GetRangeRequest(<<58, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_inclusive_start_primary_key(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13,
							TrUserData);
dfp_read_field_def_GetRangeRequest(<<66, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_exclusive_end_primary_key(Rest,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13,
						      TrUserData);
dfp_read_field_def_GetRangeRequest(<<72, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_cache_blocks(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<82, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_filter(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   TrUserData);
dfp_read_field_def_GetRangeRequest(<<90, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_start_column(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<98, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_end_column(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, TrUserData);
dfp_read_field_def_GetRangeRequest(<<106, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    d_field_GetRangeRequest_token(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  TrUserData);
dfp_read_field_def_GetRangeRequest(<<>>, 0, 0, F1, F2,
				   F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, TrUserData) ->
    #'GetRangeRequest'{table_name = F1, direction = F2,
		       columns_to_get = lists_reverse(F3, TrUserData),
		       time_range = F4, max_versions = F5, limit = F6,
		       inclusive_start_primary_key = F7,
		       exclusive_end_primary_key = F8, cache_blocks = F9,
		       filter = F10, start_column = F11, end_column = F12,
		       token = F13};
dfp_read_field_def_GetRangeRequest(Other, Z1, Z2, F1,
				   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				   F12, F13, TrUserData) ->
    dg_read_field_def_GetRangeRequest(Other, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, TrUserData).

dg_read_field_def_GetRangeRequest(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRangeRequest(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, TrUserData);
dg_read_field_def_GetRangeRequest(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRangeRequest_table_name(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, TrUserData);
      16 ->
	  d_field_GetRangeRequest_direction(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, TrUserData);
      26 ->
	  d_field_GetRangeRequest_columns_to_get(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13,
						 TrUserData);
      34 ->
	  d_field_GetRangeRequest_time_range(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, TrUserData);
      40 ->
	  d_field_GetRangeRequest_max_versions(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, TrUserData);
      48 ->
	  d_field_GetRangeRequest_limit(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, TrUserData);
      58 ->
	  d_field_GetRangeRequest_inclusive_start_primary_key(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13,
							      TrUserData);
      66 ->
	  d_field_GetRangeRequest_exclusive_end_primary_key(Rest,
							    0, 0, F1, F2, F3,
							    F4, F5, F6, F7, F8,
							    F9, F10, F11, F12,
							    F13, TrUserData);
      72 ->
	  d_field_GetRangeRequest_cache_blocks(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, TrUserData);
      82 ->
	  d_field_GetRangeRequest_filter(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, TrUserData);
      90 ->
	  d_field_GetRangeRequest_start_column(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, TrUserData);
      98 ->
	  d_field_GetRangeRequest_end_column(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, TrUserData);
      106 ->
	  d_field_GetRangeRequest_token(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRangeRequest(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9, F10, F11, F12,
					    F13, TrUserData);
	    1 ->
		skip_64_GetRangeRequest(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12, F13,
					TrUserData);
	    2 ->
		skip_length_delimited_GetRangeRequest(Rest, 0, 0, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, TrUserData);
	    5 ->
		skip_32_GetRangeRequest(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7, F8, F9, F10, F11, F12, F13,
					TrUserData)
	  end
    end;
dg_read_field_def_GetRangeRequest(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, TrUserData) ->
    #'GetRangeRequest'{table_name = F1, direction = F2,
		       columns_to_get = lists_reverse(F3, TrUserData),
		       time_range = F4, max_versions = F5, limit = F6,
		       inclusive_start_primary_key = F7,
		       exclusive_end_primary_key = F8, cache_blocks = F9,
		       filter = F10, start_column = F11, end_column = F12,
		       token = F13}.

d_field_GetRangeRequest_table_name(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_table_name(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13,
				       TrUserData);
d_field_GetRangeRequest_table_name(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0,
				       NewFValue, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, TrUserData).


d_field_GetRangeRequest_direction(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_direction(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, TrUserData);
d_field_GetRangeRequest_direction(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_Direction(Tmp),
    dfp_read_field_def_GetRangeRequest(Rest, 0, 0, F1,
				       NewFValue, F3, F4, F5, F6, F7, F8, F9,
				       F10, F11, F12, F13, TrUserData).


d_field_GetRangeRequest_columns_to_get(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_columns_to_get(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   TrUserData);
d_field_GetRangeRequest_columns_to_get(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       cons(NewFValue, F3, TrUserData), F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13,
				       TrUserData).


d_field_GetRangeRequest_time_range(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_time_range(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13,
				       TrUserData);
d_field_GetRangeRequest_time_range(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_TimeRange(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3,
				       if F4 == undefined -> NewFValue;
					  true ->
					      merge_msg_TimeRange(F4, NewFValue,
								  TrUserData)
				       end,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       TrUserData).


d_field_GetRangeRequest_max_versions(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_max_versions(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13,
					 TrUserData);
d_field_GetRangeRequest_max_versions(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				     F10, F11, F12, F13, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GetRangeRequest(Rest, 0, 0, F1, F2,
				       F3, F4, NewFValue, F6, F7, F8, F9, F10,
				       F11, F12, F13, TrUserData).


d_field_GetRangeRequest_limit(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_limit(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, TrUserData);
d_field_GetRangeRequest_limit(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_GetRangeRequest(Rest, 0, 0, F1, F2,
				       F3, F4, F5, NewFValue, F7, F8, F9, F10,
				       F11, F12, F13, TrUserData).


d_field_GetRangeRequest_inclusive_start_primary_key(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_inclusive_start_primary_key(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, TrUserData);
d_field_GetRangeRequest_inclusive_start_primary_key(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, _, F8, F9, F10, F11,
						    F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, NewFValue, F8, F9, F10,
				       F11, F12, F13, TrUserData).


d_field_GetRangeRequest_exclusive_end_primary_key(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, F8, F9, F10, F11, F12,
						  F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_exclusive_end_primary_key(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, F3, F4, F5, F6, F7,
						      F8, F9, F10, F11, F12,
						      F13, TrUserData);
d_field_GetRangeRequest_exclusive_end_primary_key(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, F3, F4, F5,
						  F6, F7, _, F9, F10, F11, F12,
						  F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, NewFValue, F9, F10,
				       F11, F12, F13, TrUserData).


d_field_GetRangeRequest_cache_blocks(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_cache_blocks(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13,
					 TrUserData);
d_field_GetRangeRequest_cache_blocks(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _,
				     F10, F11, F12, F13, TrUserData) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_GetRangeRequest(Rest, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, NewFValue, F10,
				       F11, F12, F13, TrUserData).


d_field_GetRangeRequest_filter(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_filter(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, TrUserData);
d_field_GetRangeRequest_filter(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
			       F11, F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, NewFValue,
				       F11, F12, F13, TrUserData).


d_field_GetRangeRequest_start_column(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_start_column(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13,
					 TrUserData);
d_field_GetRangeRequest_start_column(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, _, F12, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10,
				       NewFValue, F12, F13, TrUserData).


d_field_GetRangeRequest_end_column(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_end_column(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13,
				       TrUserData);
d_field_GetRangeRequest_end_column(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, _, F13, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       NewFValue, F13, TrUserData).


d_field_GetRangeRequest_token(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, TrUserData)
    when N < 57 ->
    d_field_GetRangeRequest_token(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, TrUserData);
d_field_GetRangeRequest_token(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, NewFValue, TrUserData).


skip_varint_GetRangeRequest(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData) ->
    skip_varint_GetRangeRequest(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				TrUserData);
skip_varint_GetRangeRequest(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13, TrUserData) ->
    dfp_read_field_def_GetRangeRequest(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, TrUserData).


skip_length_delimited_GetRangeRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRangeRequest(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13,
					  TrUserData);
skip_length_delimited_GetRangeRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRangeRequest(Rest2, 0, 0, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, TrUserData).


skip_32_GetRangeRequest(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			TrUserData) ->
    dfp_read_field_def_GetRangeRequest(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, TrUserData).


skip_64_GetRangeRequest(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			TrUserData) ->
    dfp_read_field_def_GetRangeRequest(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, TrUserData).


d_msg_UpdateRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_UpdateRowRequest(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_UpdateRowRequest(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UpdateRowRequest_table_name(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData);
dfp_read_field_def_UpdateRowRequest(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UpdateRowRequest_row_change(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData);
dfp_read_field_def_UpdateRowRequest(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UpdateRowRequest_condition(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData);
dfp_read_field_def_UpdateRowRequest(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_UpdateRowRequest_return_content(Rest, Z1, Z2,
					    F1, F2, F3, F4, TrUserData);
dfp_read_field_def_UpdateRowRequest(<<>>, 0, 0, F1, F2,
				    F3, F4, _) ->
    #'UpdateRowRequest'{table_name = F1, row_change = F2,
			condition = F3, return_content = F4};
dfp_read_field_def_UpdateRowRequest(Other, Z1, Z2, F1,
				    F2, F3, F4, TrUserData) ->
    dg_read_field_def_UpdateRowRequest(Other, Z1, Z2, F1,
				       F2, F3, F4, TrUserData).

dg_read_field_def_UpdateRowRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UpdateRowRequest(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
dg_read_field_def_UpdateRowRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UpdateRowRequest_table_name(Rest, 0, 0, F1, F2,
					      F3, F4, TrUserData);
      18 ->
	  d_field_UpdateRowRequest_row_change(Rest, 0, 0, F1, F2,
					      F3, F4, TrUserData);
      26 ->
	  d_field_UpdateRowRequest_condition(Rest, 0, 0, F1, F2,
					     F3, F4, TrUserData);
      34 ->
	  d_field_UpdateRowRequest_return_content(Rest, 0, 0, F1,
						  F2, F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UpdateRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					     TrUserData);
	    1 ->
		skip_64_UpdateRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    2 ->
		skip_length_delimited_UpdateRowRequest(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    5 ->
		skip_32_UpdateRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData)
	  end
    end;
dg_read_field_def_UpdateRowRequest(<<>>, 0, 0, F1, F2,
				   F3, F4, _) ->
    #'UpdateRowRequest'{table_name = F1, row_change = F2,
			condition = F3, return_content = F4}.

d_field_UpdateRowRequest_table_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UpdateRowRequest_table_name(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
d_field_UpdateRowRequest_table_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_UpdateRowRequest(Rest2, 0, 0,
					NewFValue, F2, F3, F4, TrUserData).


d_field_UpdateRowRequest_row_change(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UpdateRowRequest_row_change(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
d_field_UpdateRowRequest_row_change(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_UpdateRowRequest(Rest2, 0, 0, F1,
					NewFValue, F3, F4, TrUserData).


d_field_UpdateRowRequest_condition(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UpdateRowRequest_condition(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
d_field_UpdateRowRequest_condition(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Condition(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_UpdateRowRequest(Rest2, 0, 0, F1, F2,
					if F3 == undefined -> NewFValue;
					   true ->
					       merge_msg_Condition(F3,
								   NewFValue,
								   TrUserData)
					end,
					F4, TrUserData).


d_field_UpdateRowRequest_return_content(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_UpdateRowRequest_return_content(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4,
					    TrUserData);
d_field_UpdateRowRequest_return_content(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReturnContent(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_UpdateRowRequest(Rest2, 0, 0, F1, F2,
					F3,
					if F4 == undefined -> NewFValue;
					   true ->
					       merge_msg_ReturnContent(F4,
								       NewFValue,
								       TrUserData)
					end,
					TrUserData).


skip_varint_UpdateRowRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_UpdateRowRequest(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
skip_varint_UpdateRowRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_UpdateRowRequest(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_length_delimited_UpdateRowRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_UpdateRowRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
skip_length_delimited_UpdateRowRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UpdateRowRequest(Rest2, 0, 0, F1, F2,
					F3, F4, TrUserData).


skip_32_UpdateRowRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_UpdateRowRequest(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_64_UpdateRowRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_UpdateRowRequest(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


d_msg_DeleteRowRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRowRequest(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DeleteRowRequest(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DeleteRowRequest_table_name(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData);
dfp_read_field_def_DeleteRowRequest(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DeleteRowRequest_primary_key(Rest, Z1, Z2, F1,
					 F2, F3, F4, TrUserData);
dfp_read_field_def_DeleteRowRequest(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DeleteRowRequest_condition(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData);
dfp_read_field_def_DeleteRowRequest(<<34, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_DeleteRowRequest_return_content(Rest, Z1, Z2,
					    F1, F2, F3, F4, TrUserData);
dfp_read_field_def_DeleteRowRequest(<<>>, 0, 0, F1, F2,
				    F3, F4, _) ->
    #'DeleteRowRequest'{table_name = F1, primary_key = F2,
			condition = F3, return_content = F4};
dfp_read_field_def_DeleteRowRequest(Other, Z1, Z2, F1,
				    F2, F3, F4, TrUserData) ->
    dg_read_field_def_DeleteRowRequest(Other, Z1, Z2, F1,
				       F2, F3, F4, TrUserData).

dg_read_field_def_DeleteRowRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRowRequest(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
dg_read_field_def_DeleteRowRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteRowRequest_table_name(Rest, 0, 0, F1, F2,
					      F3, F4, TrUserData);
      18 ->
	  d_field_DeleteRowRequest_primary_key(Rest, 0, 0, F1, F2,
					       F3, F4, TrUserData);
      26 ->
	  d_field_DeleteRowRequest_condition(Rest, 0, 0, F1, F2,
					     F3, F4, TrUserData);
      34 ->
	  d_field_DeleteRowRequest_return_content(Rest, 0, 0, F1,
						  F2, F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					     TrUserData);
	    1 ->
		skip_64_DeleteRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    2 ->
		skip_length_delimited_DeleteRowRequest(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    5 ->
		skip_32_DeleteRowRequest(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData)
	  end
    end;
dg_read_field_def_DeleteRowRequest(<<>>, 0, 0, F1, F2,
				   F3, F4, _) ->
    #'DeleteRowRequest'{table_name = F1, primary_key = F2,
			condition = F3, return_content = F4}.

d_field_DeleteRowRequest_table_name(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DeleteRowRequest_table_name(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
d_field_DeleteRowRequest_table_name(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DeleteRowRequest(Rest2, 0, 0,
					NewFValue, F2, F3, F4, TrUserData).


d_field_DeleteRowRequest_primary_key(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DeleteRowRequest_primary_key(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4,
					 TrUserData);
d_field_DeleteRowRequest_primary_key(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_DeleteRowRequest(Rest2, 0, 0, F1,
					NewFValue, F3, F4, TrUserData).


d_field_DeleteRowRequest_condition(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DeleteRowRequest_condition(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
d_field_DeleteRowRequest_condition(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_Condition(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DeleteRowRequest(Rest2, 0, 0, F1, F2,
					if F3 == undefined -> NewFValue;
					   true ->
					       merge_msg_Condition(F3,
								   NewFValue,
								   TrUserData)
					end,
					F4, TrUserData).


d_field_DeleteRowRequest_return_content(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_DeleteRowRequest_return_content(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4,
					    TrUserData);
d_field_DeleteRowRequest_return_content(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ReturnContent(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_DeleteRowRequest(Rest2, 0, 0, F1, F2,
					F3,
					if F4 == undefined -> NewFValue;
					   true ->
					       merge_msg_ReturnContent(F4,
								       NewFValue,
								       TrUserData)
					end,
					TrUserData).


skip_varint_DeleteRowRequest(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_DeleteRowRequest(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
skip_varint_DeleteRowRequest(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DeleteRowRequest(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_length_delimited_DeleteRowRequest(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRowRequest(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
skip_length_delimited_DeleteRowRequest(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRowRequest(Rest2, 0, 0, F1, F2,
					F3, F4, TrUserData).


skip_32_DeleteRowRequest(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DeleteRowRequest(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_64_DeleteRowRequest(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_DeleteRowRequest(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


d_msg_ComputeSplitPointsBySizeRequest(Bin,
				      TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeRequest(Bin,
						       0, 0,
						       id(undefined,
							  TrUserData),
						       id(undefined,
							  TrUserData),
						       TrUserData).

dfp_read_field_def_ComputeSplitPointsBySizeRequest(<<10,
						     Rest/binary>>,
						   Z1, Z2, F1, F2,
						   TrUserData) ->
    d_field_ComputeSplitPointsBySizeRequest_table_name(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData);
dfp_read_field_def_ComputeSplitPointsBySizeRequest(<<16,
						     Rest/binary>>,
						   Z1, Z2, F1, F2,
						   TrUserData) ->
    d_field_ComputeSplitPointsBySizeRequest_split_size(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData);
dfp_read_field_def_ComputeSplitPointsBySizeRequest(<<>>,
						   0, 0, F1, F2, _) ->
    #'ComputeSplitPointsBySizeRequest'{table_name = F1,
				       split_size = F2};
dfp_read_field_def_ComputeSplitPointsBySizeRequest(Other,
						   Z1, Z2, F1, F2,
						   TrUserData) ->
    dg_read_field_def_ComputeSplitPointsBySizeRequest(Other,
						      Z1, Z2, F1, F2,
						      TrUserData).

dg_read_field_def_ComputeSplitPointsBySizeRequest(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ComputeSplitPointsBySizeRequest(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2, TrUserData);
dg_read_field_def_ComputeSplitPointsBySizeRequest(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ComputeSplitPointsBySizeRequest_table_name(Rest,
							     0, 0, F1, F2,
							     TrUserData);
      16 ->
	  d_field_ComputeSplitPointsBySizeRequest_split_size(Rest,
							     0, 0, F1, F2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ComputeSplitPointsBySizeRequest(Rest, 0, 0,
							    F1, F2, TrUserData);
	    1 ->
		skip_64_ComputeSplitPointsBySizeRequest(Rest, 0, 0, F1,
							F2, TrUserData);
	    2 ->
		skip_length_delimited_ComputeSplitPointsBySizeRequest(Rest,
								      0, 0, F1,
								      F2,
								      TrUserData);
	    5 ->
		skip_32_ComputeSplitPointsBySizeRequest(Rest, 0, 0, F1,
							F2, TrUserData)
	  end
    end;
dg_read_field_def_ComputeSplitPointsBySizeRequest(<<>>,
						  0, 0, F1, F2, _) ->
    #'ComputeSplitPointsBySizeRequest'{table_name = F1,
				       split_size = F2}.

d_field_ComputeSplitPointsBySizeRequest_table_name(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ComputeSplitPointsBySizeRequest_table_name(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, TrUserData);
d_field_ComputeSplitPointsBySizeRequest_table_name(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ComputeSplitPointsBySizeRequest(Rest2,
						       0, 0, NewFValue, F2,
						       TrUserData).


d_field_ComputeSplitPointsBySizeRequest_split_size(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ComputeSplitPointsBySizeRequest_split_size(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, TrUserData);
d_field_ComputeSplitPointsBySizeRequest_split_size(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, _, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_ComputeSplitPointsBySizeRequest(Rest,
						       0, 0, F1, NewFValue,
						       TrUserData).


skip_varint_ComputeSplitPointsBySizeRequest(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_ComputeSplitPointsBySizeRequest(Rest, Z1,
						Z2, F1, F2, TrUserData);
skip_varint_ComputeSplitPointsBySizeRequest(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeRequest(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData).


skip_length_delimited_ComputeSplitPointsBySizeRequest(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2,
						      TrUserData)
    when N < 57 ->
    skip_length_delimited_ComputeSplitPointsBySizeRequest(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2, TrUserData);
skip_length_delimited_ComputeSplitPointsBySizeRequest(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ComputeSplitPointsBySizeRequest(Rest2,
						       0, 0, F1, F2,
						       TrUserData).


skip_32_ComputeSplitPointsBySizeRequest(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeRequest(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData).


skip_64_ComputeSplitPointsBySizeRequest(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ComputeSplitPointsBySizeRequest(Rest,
						       Z1, Z2, F1, F2,
						       TrUserData).




d_enum_PrimaryKeyType(1) -> 'INTEGER';
d_enum_PrimaryKeyType(2) -> 'STRING';
d_enum_PrimaryKeyType(3) -> 'BINARY';
d_enum_PrimaryKeyType(V) -> V.

d_enum_PrimaryKeyOption(1) -> 'AUTO_INCREMENT';
d_enum_PrimaryKeyOption(V) -> V.

d_enum_BloomFilterType(1) -> 'NONE';
d_enum_BloomFilterType(2) -> 'CELL';
d_enum_BloomFilterType(3) -> 'ROW';
d_enum_BloomFilterType(V) -> V.

d_enum_TableStatus(1) -> 'ACTIVE';
d_enum_TableStatus(2) -> 'INACTIVE';
d_enum_TableStatus(3) -> 'LOADING';
d_enum_TableStatus(4) -> 'UNLOADING';
d_enum_TableStatus(5) -> 'UPDATING';
d_enum_TableStatus(V) -> V.

d_enum_RowExistenceExpectation(0) -> 'IGNORE';
d_enum_RowExistenceExpectation(1) -> 'EXPECT_EXIST';
d_enum_RowExistenceExpectation(2) -> 'EXPECT_NOT_EXIST';
d_enum_RowExistenceExpectation(V) -> V.

d_enum_ReturnType(0) -> 'RT_NONE';
d_enum_ReturnType(1) -> 'RT_PK';
d_enum_ReturnType(V) -> V.

d_enum_OperationType(1) -> 'PUT';
d_enum_OperationType(2) -> 'UPDATE';
d_enum_OperationType(3) -> 'DELETE';
d_enum_OperationType(V) -> V.

d_enum_Direction(0) -> 'FORWARD';
d_enum_Direction(1) -> 'BACKWARD';
d_enum_Direction(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Condition'{} ->
	  merge_msg_Condition(Prev, New, TrUserData);
      #'CapacityUnit'{} ->
	  merge_msg_CapacityUnit(Prev, New, TrUserData);
      #'ConsumedCapacity'{} ->
	  merge_msg_ConsumedCapacity(Prev, New, TrUserData);
      #'ComputeSplitPointsBySizeResponse.SplitLocation'{} ->
	  'merge_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Prev,
								     New,
								     TrUserData);
      #'PrimaryKeySchema'{} ->
	  merge_msg_PrimaryKeySchema(Prev, New, TrUserData);
      #'ComputeSplitPointsBySizeResponse'{} ->
	  merge_msg_ComputeSplitPointsBySizeResponse(Prev, New,
						     TrUserData);
      #'DeleteTableResponse'{} ->
	  merge_msg_DeleteTableResponse(Prev, New, TrUserData);
      #'CreateTableResponse'{} ->
	  merge_msg_CreateTableResponse(Prev, New, TrUserData);
      #'TableOptions'{} ->
	  merge_msg_TableOptions(Prev, New, TrUserData);
      #'ReservedThroughputDetails'{} ->
	  merge_msg_ReservedThroughputDetails(Prev, New,
					      TrUserData);
      #'TableMeta'{} ->
	  merge_msg_TableMeta(Prev, New, TrUserData);
      #'DescribeTableResponse'{} ->
	  merge_msg_DescribeTableResponse(Prev, New, TrUserData);
      #'PartitionRange'{} ->
	  merge_msg_PartitionRange(Prev, New, TrUserData);
      #'ReturnContent'{} ->
	  merge_msg_ReturnContent(Prev, New, TrUserData);
      #'RowInBatchWriteRowRequest'{} ->
	  merge_msg_RowInBatchWriteRowRequest(Prev, New,
					      TrUserData);
      #'TableInBatchWriteRowRequest'{} ->
	  merge_msg_TableInBatchWriteRowRequest(Prev, New,
						TrUserData);
      #'BatchWriteRowRequest'{} ->
	  merge_msg_BatchWriteRowRequest(Prev, New, TrUserData);
      #'UnloadTableRequest'{} ->
	  merge_msg_UnloadTableRequest(Prev, New, TrUserData);
      #'LoadTableRequest'{} ->
	  merge_msg_LoadTableRequest(Prev, New, TrUserData);
      #'PutRowRequest'{} ->
	  merge_msg_PutRowRequest(Prev, New, TrUserData);
      #'Error'{} -> merge_msg_Error(Prev, New, TrUserData);
      #'RowInBatchGetRowResponse'{} ->
	  merge_msg_RowInBatchGetRowResponse(Prev, New,
					     TrUserData);
      #'UpdateTableResponse'{} ->
	  merge_msg_UpdateTableResponse(Prev, New, TrUserData);
      #'PutRowResponse'{} ->
	  merge_msg_PutRowResponse(Prev, New, TrUserData);
      #'ReservedThroughput'{} ->
	  merge_msg_ReservedThroughput(Prev, New, TrUserData);
      #'TimeRange'{} ->
	  merge_msg_TimeRange(Prev, New, TrUserData);
      #'TableInBatchGetRowRequest'{} ->
	  merge_msg_TableInBatchGetRowRequest(Prev, New,
					      TrUserData);
      #'BatchGetRowRequest'{} ->
	  merge_msg_BatchGetRowRequest(Prev, New, TrUserData);
      #'DeleteTableRequest'{} ->
	  merge_msg_DeleteTableRequest(Prev, New, TrUserData);
      #'ListTableRequest'{} ->
	  merge_msg_ListTableRequest(Prev, New, TrUserData);
      #'UpdateTableRequest'{} ->
	  merge_msg_UpdateTableRequest(Prev, New, TrUserData);
      #'CreateTableRequest'{} ->
	  merge_msg_CreateTableRequest(Prev, New, TrUserData);
      #'GetRowRequest'{} ->
	  merge_msg_GetRowRequest(Prev, New, TrUserData);
      #'DescribeTableRequest'{} ->
	  merge_msg_DescribeTableRequest(Prev, New, TrUserData);
      #'DeleteRowResponse'{} ->
	  merge_msg_DeleteRowResponse(Prev, New, TrUserData);
      #'UnloadTableResponse'{} ->
	  merge_msg_UnloadTableResponse(Prev, New, TrUserData);
      #'RowInBatchWriteRowResponse'{} ->
	  merge_msg_RowInBatchWriteRowResponse(Prev, New,
					       TrUserData);
      #'TableInBatchWriteRowResponse'{} ->
	  merge_msg_TableInBatchWriteRowResponse(Prev, New,
						 TrUserData);
      #'BatchWriteRowResponse'{} ->
	  merge_msg_BatchWriteRowResponse(Prev, New, TrUserData);
      #'UpdateRowResponse'{} ->
	  merge_msg_UpdateRowResponse(Prev, New, TrUserData);
      #'GetRowResponse'{} ->
	  merge_msg_GetRowResponse(Prev, New, TrUserData);
      #'GetRangeResponse'{} ->
	  merge_msg_GetRangeResponse(Prev, New, TrUserData);
      #'TableInBatchGetRowResponse'{} ->
	  merge_msg_TableInBatchGetRowResponse(Prev, New,
					       TrUserData);
      #'BatchGetRowResponse'{} ->
	  merge_msg_BatchGetRowResponse(Prev, New, TrUserData);
      #'LoadTableResponse'{} ->
	  merge_msg_LoadTableResponse(Prev, New, TrUserData);
      #'ListTableResponse'{} ->
	  merge_msg_ListTableResponse(Prev, New, TrUserData);
      #'GetRangeRequest'{} ->
	  merge_msg_GetRangeRequest(Prev, New, TrUserData);
      #'UpdateRowRequest'{} ->
	  merge_msg_UpdateRowRequest(Prev, New, TrUserData);
      #'DeleteRowRequest'{} ->
	  merge_msg_DeleteRowRequest(Prev, New, TrUserData);
      #'ComputeSplitPointsBySizeRequest'{} ->
	  merge_msg_ComputeSplitPointsBySizeRequest(Prev, New,
						    TrUserData)
    end.

merge_msg_Condition(#'Condition'{column_condition =
				     PFcolumn_condition},
		    #'Condition'{row_existence = NFrow_existence,
				 column_condition = NFcolumn_condition},
		    _) ->
    #'Condition'{row_existence = NFrow_existence,
		 column_condition =
		     if NFcolumn_condition =:= undefined ->
			    PFcolumn_condition;
			true -> NFcolumn_condition
		     end}.

merge_msg_CapacityUnit(#'CapacityUnit'{read = PFread,
				       write = PFwrite},
		       #'CapacityUnit'{read = NFread, write = NFwrite}, _) ->
    #'CapacityUnit'{read =
			if NFread =:= undefined -> PFread;
			   true -> NFread
			end,
		    write =
			if NFwrite =:= undefined -> PFwrite;
			   true -> NFwrite
			end}.

merge_msg_ConsumedCapacity(#'ConsumedCapacity'{capacity_unit
						   = PFcapacity_unit},
			   #'ConsumedCapacity'{capacity_unit = NFcapacity_unit},
			   TrUserData) ->
    #'ConsumedCapacity'{capacity_unit =
			    if PFcapacity_unit /= undefined,
			       NFcapacity_unit /= undefined ->
				   merge_msg_CapacityUnit(PFcapacity_unit,
							  NFcapacity_unit,
							  TrUserData);
			       PFcapacity_unit == undefined -> NFcapacity_unit;
			       NFcapacity_unit == undefined -> PFcapacity_unit
			    end}.

'merge_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(#'ComputeSplitPointsBySizeResponse.SplitLocation'{},
							   #'ComputeSplitPointsBySizeResponse.SplitLocation'{location
														 =
														 NFlocation,
													     repeat
														 =
														 NFrepeat},
							   _) ->
    #'ComputeSplitPointsBySizeResponse.SplitLocation'{location
							  = NFlocation,
						      repeat = NFrepeat}.

merge_msg_PrimaryKeySchema(#'PrimaryKeySchema'{option =
						   PFoption},
			   #'PrimaryKeySchema'{name = NFname, type = NFtype,
					       option = NFoption},
			   _) ->
    #'PrimaryKeySchema'{name = NFname, type = NFtype,
			option =
			    if NFoption =:= undefined -> PFoption;
			       true -> NFoption
			    end}.

merge_msg_ComputeSplitPointsBySizeResponse(#'ComputeSplitPointsBySizeResponse'{consumed
										   =
										   PFconsumed,
									       schema
										   =
										   PFschema,
									       split_points
										   =
										   PFsplit_points,
									       locations
										   =
										   PFlocations},
					   #'ComputeSplitPointsBySizeResponse'{consumed
										   =
										   NFconsumed,
									       schema
										   =
										   NFschema,
									       split_points
										   =
										   NFsplit_points,
									       locations
										   =
										   NFlocations},
					   TrUserData) ->
    #'ComputeSplitPointsBySizeResponse'{consumed =
					    if PFconsumed /= undefined,
					       NFconsumed /= undefined ->
						   merge_msg_ConsumedCapacity(PFconsumed,
									      NFconsumed,
									      TrUserData);
					       PFconsumed == undefined ->
						   NFconsumed;
					       NFconsumed == undefined ->
						   PFconsumed
					    end,
					schema =
					    'erlang_++'(PFschema, NFschema,
							TrUserData),
					split_points =
					    'erlang_++'(PFsplit_points,
							NFsplit_points,
							TrUserData),
					locations =
					    'erlang_++'(PFlocations,
							NFlocations,
							TrUserData)}.

merge_msg_DeleteTableResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_CreateTableResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_TableOptions(#'TableOptions'{time_to_live =
					   PFtime_to_live,
				       max_versions = PFmax_versions,
				       bloom_filter_type = PFbloom_filter_type,
				       block_size = PFblock_size,
				       deviation_cell_version_in_sec =
					   PFdeviation_cell_version_in_sec},
		       #'TableOptions'{time_to_live = NFtime_to_live,
				       max_versions = NFmax_versions,
				       bloom_filter_type = NFbloom_filter_type,
				       block_size = NFblock_size,
				       deviation_cell_version_in_sec =
					   NFdeviation_cell_version_in_sec},
		       _) ->
    #'TableOptions'{time_to_live =
			if NFtime_to_live =:= undefined -> PFtime_to_live;
			   true -> NFtime_to_live
			end,
		    max_versions =
			if NFmax_versions =:= undefined -> PFmax_versions;
			   true -> NFmax_versions
			end,
		    bloom_filter_type =
			if NFbloom_filter_type =:= undefined ->
			       PFbloom_filter_type;
			   true -> NFbloom_filter_type
			end,
		    block_size =
			if NFblock_size =:= undefined -> PFblock_size;
			   true -> NFblock_size
			end,
		    deviation_cell_version_in_sec =
			if NFdeviation_cell_version_in_sec =:= undefined ->
			       PFdeviation_cell_version_in_sec;
			   true -> NFdeviation_cell_version_in_sec
			end}.

merge_msg_ReservedThroughputDetails(#'ReservedThroughputDetails'{capacity_unit
								     =
								     PFcapacity_unit,
								 last_decrease_time
								     =
								     PFlast_decrease_time},
				    #'ReservedThroughputDetails'{capacity_unit =
								     NFcapacity_unit,
								 last_increase_time
								     =
								     NFlast_increase_time,
								 last_decrease_time
								     =
								     NFlast_decrease_time},
				    TrUserData) ->
    #'ReservedThroughputDetails'{capacity_unit =
				     if PFcapacity_unit /= undefined,
					NFcapacity_unit /= undefined ->
					    merge_msg_CapacityUnit(PFcapacity_unit,
								   NFcapacity_unit,
								   TrUserData);
					PFcapacity_unit == undefined ->
					    NFcapacity_unit;
					NFcapacity_unit == undefined ->
					    PFcapacity_unit
				     end,
				 last_increase_time = NFlast_increase_time,
				 last_decrease_time =
				     if NFlast_decrease_time =:= undefined ->
					    PFlast_decrease_time;
					true -> NFlast_decrease_time
				     end}.

merge_msg_TableMeta(#'TableMeta'{primary_key =
				     PFprimary_key},
		    #'TableMeta'{table_name = NFtable_name,
				 primary_key = NFprimary_key},
		    TrUserData) ->
    #'TableMeta'{table_name = NFtable_name,
		 primary_key =
		     'erlang_++'(PFprimary_key, NFprimary_key, TrUserData)}.

merge_msg_DescribeTableResponse(#'DescribeTableResponse'{table_meta
							     = PFtable_meta,
							 reserved_throughput_details
							     =
							     PFreserved_throughput_details,
							 table_options =
							     PFtable_options,
							 shard_splits =
							     PFshard_splits},
				#'DescribeTableResponse'{table_meta =
							     NFtable_meta,
							 reserved_throughput_details
							     =
							     NFreserved_throughput_details,
							 table_options =
							     NFtable_options,
							 table_status =
							     NFtable_status,
							 shard_splits =
							     NFshard_splits},
				TrUserData) ->
    #'DescribeTableResponse'{table_meta =
				 if PFtable_meta /= undefined,
				    NFtable_meta /= undefined ->
					merge_msg_TableMeta(PFtable_meta,
							    NFtable_meta,
							    TrUserData);
				    PFtable_meta == undefined -> NFtable_meta;
				    NFtable_meta == undefined -> PFtable_meta
				 end,
			     reserved_throughput_details =
				 if PFreserved_throughput_details /= undefined,
				    NFreserved_throughput_details /=
				      undefined ->
					merge_msg_ReservedThroughputDetails(PFreserved_throughput_details,
									    NFreserved_throughput_details,
									    TrUserData);
				    PFreserved_throughput_details ==
				      undefined ->
					NFreserved_throughput_details;
				    NFreserved_throughput_details ==
				      undefined ->
					PFreserved_throughput_details
				 end,
			     table_options =
				 if PFtable_options /= undefined,
				    NFtable_options /= undefined ->
					merge_msg_TableOptions(PFtable_options,
							       NFtable_options,
							       TrUserData);
				    PFtable_options == undefined ->
					NFtable_options;
				    NFtable_options == undefined ->
					PFtable_options
				 end,
			     table_status = NFtable_status,
			     shard_splits =
				 'erlang_++'(PFshard_splits, NFshard_splits,
					     TrUserData)}.

merge_msg_PartitionRange(#'PartitionRange'{},
			 #'PartitionRange'{'begin' = NFbegin, 'end' = NFend},
			 _) ->
    #'PartitionRange'{'begin' = NFbegin, 'end' = NFend}.

merge_msg_ReturnContent(#'ReturnContent'{return_type =
					     PFreturn_type},
			#'ReturnContent'{return_type = NFreturn_type}, _) ->
    #'ReturnContent'{return_type =
			 if NFreturn_type =:= undefined -> PFreturn_type;
			    true -> NFreturn_type
			 end}.

merge_msg_RowInBatchWriteRowRequest(#'RowInBatchWriteRowRequest'{condition
								     =
								     PFcondition,
								 return_content
								     =
								     PFreturn_content},
				    #'RowInBatchWriteRowRequest'{type = NFtype,
								 row_change =
								     NFrow_change,
								 condition =
								     NFcondition,
								 return_content
								     =
								     NFreturn_content},
				    TrUserData) ->
    #'RowInBatchWriteRowRequest'{type = NFtype,
				 row_change = NFrow_change,
				 condition =
				     if PFcondition /= undefined,
					NFcondition /= undefined ->
					    merge_msg_Condition(PFcondition,
								NFcondition,
								TrUserData);
					PFcondition == undefined -> NFcondition;
					NFcondition == undefined -> PFcondition
				     end,
				 return_content =
				     if PFreturn_content /= undefined,
					NFreturn_content /= undefined ->
					    merge_msg_ReturnContent(PFreturn_content,
								    NFreturn_content,
								    TrUserData);
					PFreturn_content == undefined ->
					    NFreturn_content;
					NFreturn_content == undefined ->
					    PFreturn_content
				     end}.

merge_msg_TableInBatchWriteRowRequest(#'TableInBatchWriteRowRequest'{rows
									 =
									 PFrows},
				      #'TableInBatchWriteRowRequest'{table_name
									 =
									 NFtable_name,
								     rows =
									 NFrows},
				      TrUserData) ->
    #'TableInBatchWriteRowRequest'{table_name =
				       NFtable_name,
				   rows =
				       'erlang_++'(PFrows, NFrows, TrUserData)}.

merge_msg_BatchWriteRowRequest(#'BatchWriteRowRequest'{tables
							   = PFtables},
			       #'BatchWriteRowRequest'{tables = NFtables},
			       TrUserData) ->
    #'BatchWriteRowRequest'{tables =
				'erlang_++'(PFtables, NFtables, TrUserData)}.

merge_msg_UnloadTableRequest(#'UnloadTableRequest'{},
			     #'UnloadTableRequest'{table_name = NFtable_name},
			     _) ->
    #'UnloadTableRequest'{table_name = NFtable_name}.

merge_msg_LoadTableRequest(#'LoadTableRequest'{},
			   #'LoadTableRequest'{table_name = NFtable_name}, _) ->
    #'LoadTableRequest'{table_name = NFtable_name}.

merge_msg_PutRowRequest(#'PutRowRequest'{condition =
					     PFcondition,
					 return_content = PFreturn_content},
			#'PutRowRequest'{table_name = NFtable_name, row = NFrow,
					 condition = NFcondition,
					 return_content = NFreturn_content},
			TrUserData) ->
    #'PutRowRequest'{table_name = NFtable_name, row = NFrow,
		     condition =
			 if PFcondition /= undefined,
			    NFcondition /= undefined ->
				merge_msg_Condition(PFcondition, NFcondition,
						    TrUserData);
			    PFcondition == undefined -> NFcondition;
			    NFcondition == undefined -> PFcondition
			 end,
		     return_content =
			 if PFreturn_content /= undefined,
			    NFreturn_content /= undefined ->
				merge_msg_ReturnContent(PFreturn_content,
							NFreturn_content,
							TrUserData);
			    PFreturn_content == undefined -> NFreturn_content;
			    NFreturn_content == undefined -> PFreturn_content
			 end}.

merge_msg_Error(#'Error'{message = PFmessage},
		#'Error'{code = NFcode, message = NFmessage}, _) ->
    #'Error'{code = NFcode,
	     message =
		 if NFmessage =:= undefined -> PFmessage;
		    true -> NFmessage
		 end}.

merge_msg_RowInBatchGetRowResponse(#'RowInBatchGetRowResponse'{error
								   = PFerror,
							       consumed =
								   PFconsumed,
							       row = PFrow,
							       next_token =
								   PFnext_token},
				   #'RowInBatchGetRowResponse'{is_ok = NFis_ok,
							       error = NFerror,
							       consumed =
								   NFconsumed,
							       row = NFrow,
							       next_token =
								   NFnext_token},
				   TrUserData) ->
    #'RowInBatchGetRowResponse'{is_ok = NFis_ok,
				error =
				    if PFerror /= undefined,
				       NFerror /= undefined ->
					   merge_msg_Error(PFerror, NFerror,
							   TrUserData);
				       PFerror == undefined -> NFerror;
				       NFerror == undefined -> PFerror
				    end,
				consumed =
				    if PFconsumed /= undefined,
				       NFconsumed /= undefined ->
					   merge_msg_ConsumedCapacity(PFconsumed,
								      NFconsumed,
								      TrUserData);
				       PFconsumed == undefined -> NFconsumed;
				       NFconsumed == undefined -> PFconsumed
				    end,
				row =
				    if NFrow =:= undefined -> PFrow;
				       true -> NFrow
				    end,
				next_token =
				    if NFnext_token =:= undefined ->
					   PFnext_token;
				       true -> NFnext_token
				    end}.

merge_msg_UpdateTableResponse(#'UpdateTableResponse'{reserved_throughput_details
							 =
							 PFreserved_throughput_details,
						     table_options =
							 PFtable_options},
			      #'UpdateTableResponse'{reserved_throughput_details
							 =
							 NFreserved_throughput_details,
						     table_options =
							 NFtable_options},
			      TrUserData) ->
    #'UpdateTableResponse'{reserved_throughput_details =
			       if PFreserved_throughput_details /= undefined,
				  NFreserved_throughput_details /= undefined ->
				      merge_msg_ReservedThroughputDetails(PFreserved_throughput_details,
									  NFreserved_throughput_details,
									  TrUserData);
				  PFreserved_throughput_details == undefined ->
				      NFreserved_throughput_details;
				  NFreserved_throughput_details == undefined ->
				      PFreserved_throughput_details
			       end,
			   table_options =
			       if PFtable_options /= undefined,
				  NFtable_options /= undefined ->
				      merge_msg_TableOptions(PFtable_options,
							     NFtable_options,
							     TrUserData);
				  PFtable_options == undefined ->
				      NFtable_options;
				  NFtable_options == undefined ->
				      PFtable_options
			       end}.

merge_msg_PutRowResponse(#'PutRowResponse'{consumed =
					       PFconsumed,
					   row = PFrow},
			 #'PutRowResponse'{consumed = NFconsumed, row = NFrow},
			 TrUserData) ->
    #'PutRowResponse'{consumed =
			  if PFconsumed /= undefined, NFconsumed /= undefined ->
				 merge_msg_ConsumedCapacity(PFconsumed,
							    NFconsumed,
							    TrUserData);
			     PFconsumed == undefined -> NFconsumed;
			     NFconsumed == undefined -> PFconsumed
			  end,
		      row =
			  if NFrow =:= undefined -> PFrow;
			     true -> NFrow
			  end}.

merge_msg_ReservedThroughput(#'ReservedThroughput'{capacity_unit
						       = PFcapacity_unit},
			     #'ReservedThroughput'{capacity_unit =
						       NFcapacity_unit},
			     TrUserData) ->
    #'ReservedThroughput'{capacity_unit =
			      if PFcapacity_unit /= undefined,
				 NFcapacity_unit /= undefined ->
				     merge_msg_CapacityUnit(PFcapacity_unit,
							    NFcapacity_unit,
							    TrUserData);
				 PFcapacity_unit == undefined ->
				     NFcapacity_unit;
				 NFcapacity_unit == undefined -> PFcapacity_unit
			      end}.

merge_msg_TimeRange(#'TimeRange'{start_time =
				     PFstart_time,
				 end_time = PFend_time,
				 specific_time = PFspecific_time},
		    #'TimeRange'{start_time = NFstart_time,
				 end_time = NFend_time,
				 specific_time = NFspecific_time},
		    _) ->
    #'TimeRange'{start_time =
		     if NFstart_time =:= undefined -> PFstart_time;
			true -> NFstart_time
		     end,
		 end_time =
		     if NFend_time =:= undefined -> PFend_time;
			true -> NFend_time
		     end,
		 specific_time =
		     if NFspecific_time =:= undefined -> PFspecific_time;
			true -> NFspecific_time
		     end}.

merge_msg_TableInBatchGetRowRequest(#'TableInBatchGetRowRequest'{primary_key
								     =
								     PFprimary_key,
								 token =
								     PFtoken,
								 columns_to_get
								     =
								     PFcolumns_to_get,
								 time_range =
								     PFtime_range,
								 max_versions =
								     PFmax_versions,
								 cache_blocks =
								     PFcache_blocks,
								 filter =
								     PFfilter,
								 start_column =
								     PFstart_column,
								 end_column =
								     PFend_column},
				    #'TableInBatchGetRowRequest'{table_name =
								     NFtable_name,
								 primary_key =
								     NFprimary_key,
								 token =
								     NFtoken,
								 columns_to_get
								     =
								     NFcolumns_to_get,
								 time_range =
								     NFtime_range,
								 max_versions =
								     NFmax_versions,
								 cache_blocks =
								     NFcache_blocks,
								 filter =
								     NFfilter,
								 start_column =
								     NFstart_column,
								 end_column =
								     NFend_column},
				    TrUserData) ->
    #'TableInBatchGetRowRequest'{table_name = NFtable_name,
				 primary_key =
				     'erlang_++'(PFprimary_key, NFprimary_key,
						 TrUserData),
				 token =
				     'erlang_++'(PFtoken, NFtoken, TrUserData),
				 columns_to_get =
				     'erlang_++'(PFcolumns_to_get,
						 NFcolumns_to_get, TrUserData),
				 time_range =
				     if PFtime_range /= undefined,
					NFtime_range /= undefined ->
					    merge_msg_TimeRange(PFtime_range,
								NFtime_range,
								TrUserData);
					PFtime_range == undefined ->
					    NFtime_range;
					NFtime_range == undefined ->
					    PFtime_range
				     end,
				 max_versions =
				     if NFmax_versions =:= undefined ->
					    PFmax_versions;
					true -> NFmax_versions
				     end,
				 cache_blocks =
				     if NFcache_blocks =:= undefined ->
					    PFcache_blocks;
					true -> NFcache_blocks
				     end,
				 filter =
				     if NFfilter =:= undefined -> PFfilter;
					true -> NFfilter
				     end,
				 start_column =
				     if NFstart_column =:= undefined ->
					    PFstart_column;
					true -> NFstart_column
				     end,
				 end_column =
				     if NFend_column =:= undefined ->
					    PFend_column;
					true -> NFend_column
				     end}.

merge_msg_BatchGetRowRequest(#'BatchGetRowRequest'{tables
						       = PFtables},
			     #'BatchGetRowRequest'{tables = NFtables},
			     TrUserData) ->
    #'BatchGetRowRequest'{tables =
			      'erlang_++'(PFtables, NFtables, TrUserData)}.

merge_msg_DeleteTableRequest(#'DeleteTableRequest'{},
			     #'DeleteTableRequest'{table_name = NFtable_name},
			     _) ->
    #'DeleteTableRequest'{table_name = NFtable_name}.

merge_msg_ListTableRequest(_Prev, New, _TrUserData) ->
    New.

merge_msg_UpdateTableRequest(#'UpdateTableRequest'{reserved_throughput
						       = PFreserved_throughput,
						   table_options =
						       PFtable_options},
			     #'UpdateTableRequest'{table_name = NFtable_name,
						   reserved_throughput =
						       NFreserved_throughput,
						   table_options =
						       NFtable_options},
			     TrUserData) ->
    #'UpdateTableRequest'{table_name = NFtable_name,
			  reserved_throughput =
			      if PFreserved_throughput /= undefined,
				 NFreserved_throughput /= undefined ->
				     merge_msg_ReservedThroughput(PFreserved_throughput,
								  NFreserved_throughput,
								  TrUserData);
				 PFreserved_throughput == undefined ->
				     NFreserved_throughput;
				 NFreserved_throughput == undefined ->
				     PFreserved_throughput
			      end,
			  table_options =
			      if PFtable_options /= undefined,
				 NFtable_options /= undefined ->
				     merge_msg_TableOptions(PFtable_options,
							    NFtable_options,
							    TrUserData);
				 PFtable_options == undefined ->
				     NFtable_options;
				 NFtable_options == undefined -> PFtable_options
			      end}.

merge_msg_CreateTableRequest(#'CreateTableRequest'{table_meta
						       = PFtable_meta,
						   reserved_throughput =
						       PFreserved_throughput,
						   table_options =
						       PFtable_options,
						   partitions = PFpartitions},
			     #'CreateTableRequest'{table_meta = NFtable_meta,
						   reserved_throughput =
						       NFreserved_throughput,
						   table_options =
						       NFtable_options,
						   partitions = NFpartitions},
			     TrUserData) ->
    #'CreateTableRequest'{table_meta =
			      if PFtable_meta /= undefined,
				 NFtable_meta /= undefined ->
				     merge_msg_TableMeta(PFtable_meta,
							 NFtable_meta,
							 TrUserData);
				 PFtable_meta == undefined -> NFtable_meta;
				 NFtable_meta == undefined -> PFtable_meta
			      end,
			  reserved_throughput =
			      if PFreserved_throughput /= undefined,
				 NFreserved_throughput /= undefined ->
				     merge_msg_ReservedThroughput(PFreserved_throughput,
								  NFreserved_throughput,
								  TrUserData);
				 PFreserved_throughput == undefined ->
				     NFreserved_throughput;
				 NFreserved_throughput == undefined ->
				     PFreserved_throughput
			      end,
			  table_options =
			      if PFtable_options /= undefined,
				 NFtable_options /= undefined ->
				     merge_msg_TableOptions(PFtable_options,
							    NFtable_options,
							    TrUserData);
				 PFtable_options == undefined ->
				     NFtable_options;
				 NFtable_options == undefined -> PFtable_options
			      end,
			  partitions =
			      'erlang_++'(PFpartitions, NFpartitions,
					  TrUserData)}.

merge_msg_GetRowRequest(#'GetRowRequest'{columns_to_get
					     = PFcolumns_to_get,
					 time_range = PFtime_range,
					 max_versions = PFmax_versions,
					 cache_blocks = PFcache_blocks,
					 filter = PFfilter,
					 start_column = PFstart_column,
					 end_column = PFend_column,
					 token = PFtoken},
			#'GetRowRequest'{table_name = NFtable_name,
					 primary_key = NFprimary_key,
					 columns_to_get = NFcolumns_to_get,
					 time_range = NFtime_range,
					 max_versions = NFmax_versions,
					 cache_blocks = NFcache_blocks,
					 filter = NFfilter,
					 start_column = NFstart_column,
					 end_column = NFend_column,
					 token = NFtoken},
			TrUserData) ->
    #'GetRowRequest'{table_name = NFtable_name,
		     primary_key = NFprimary_key,
		     columns_to_get =
			 'erlang_++'(PFcolumns_to_get, NFcolumns_to_get,
				     TrUserData),
		     time_range =
			 if PFtime_range /= undefined,
			    NFtime_range /= undefined ->
				merge_msg_TimeRange(PFtime_range, NFtime_range,
						    TrUserData);
			    PFtime_range == undefined -> NFtime_range;
			    NFtime_range == undefined -> PFtime_range
			 end,
		     max_versions =
			 if NFmax_versions =:= undefined -> PFmax_versions;
			    true -> NFmax_versions
			 end,
		     cache_blocks =
			 if NFcache_blocks =:= undefined -> PFcache_blocks;
			    true -> NFcache_blocks
			 end,
		     filter =
			 if NFfilter =:= undefined -> PFfilter;
			    true -> NFfilter
			 end,
		     start_column =
			 if NFstart_column =:= undefined -> PFstart_column;
			    true -> NFstart_column
			 end,
		     end_column =
			 if NFend_column =:= undefined -> PFend_column;
			    true -> NFend_column
			 end,
		     token =
			 if NFtoken =:= undefined -> PFtoken;
			    true -> NFtoken
			 end}.

merge_msg_DescribeTableRequest(#'DescribeTableRequest'{},
			       #'DescribeTableRequest'{table_name =
							   NFtable_name},
			       _) ->
    #'DescribeTableRequest'{table_name = NFtable_name}.

merge_msg_DeleteRowResponse(#'DeleteRowResponse'{consumed
						     = PFconsumed,
						 row = PFrow},
			    #'DeleteRowResponse'{consumed = NFconsumed,
						 row = NFrow},
			    TrUserData) ->
    #'DeleteRowResponse'{consumed =
			     if PFconsumed /= undefined,
				NFconsumed /= undefined ->
				    merge_msg_ConsumedCapacity(PFconsumed,
							       NFconsumed,
							       TrUserData);
				PFconsumed == undefined -> NFconsumed;
				NFconsumed == undefined -> PFconsumed
			     end,
			 row =
			     if NFrow =:= undefined -> PFrow;
				true -> NFrow
			     end}.

merge_msg_UnloadTableResponse(_Prev, New,
			      _TrUserData) ->
    New.

merge_msg_RowInBatchWriteRowResponse(#'RowInBatchWriteRowResponse'{error
								       =
								       PFerror,
								   consumed =
								       PFconsumed,
								   row = PFrow},
				     #'RowInBatchWriteRowResponse'{is_ok =
								       NFis_ok,
								   error =
								       NFerror,
								   consumed =
								       NFconsumed,
								   row = NFrow},
				     TrUserData) ->
    #'RowInBatchWriteRowResponse'{is_ok = NFis_ok,
				  error =
				      if PFerror /= undefined,
					 NFerror /= undefined ->
					     merge_msg_Error(PFerror, NFerror,
							     TrUserData);
					 PFerror == undefined -> NFerror;
					 NFerror == undefined -> PFerror
				      end,
				  consumed =
				      if PFconsumed /= undefined,
					 NFconsumed /= undefined ->
					     merge_msg_ConsumedCapacity(PFconsumed,
									NFconsumed,
									TrUserData);
					 PFconsumed == undefined -> NFconsumed;
					 NFconsumed == undefined -> PFconsumed
				      end,
				  row =
				      if NFrow =:= undefined -> PFrow;
					 true -> NFrow
				      end}.

merge_msg_TableInBatchWriteRowResponse(#'TableInBatchWriteRowResponse'{rows
									   =
									   PFrows},
				       #'TableInBatchWriteRowResponse'{table_name
									   =
									   NFtable_name,
								       rows =
									   NFrows},
				       TrUserData) ->
    #'TableInBatchWriteRowResponse'{table_name =
					NFtable_name,
				    rows =
					'erlang_++'(PFrows, NFrows,
						    TrUserData)}.

merge_msg_BatchWriteRowResponse(#'BatchWriteRowResponse'{tables
							     = PFtables},
				#'BatchWriteRowResponse'{tables = NFtables},
				TrUserData) ->
    #'BatchWriteRowResponse'{tables =
				 'erlang_++'(PFtables, NFtables, TrUserData)}.

merge_msg_UpdateRowResponse(#'UpdateRowResponse'{consumed
						     = PFconsumed,
						 row = PFrow},
			    #'UpdateRowResponse'{consumed = NFconsumed,
						 row = NFrow},
			    TrUserData) ->
    #'UpdateRowResponse'{consumed =
			     if PFconsumed /= undefined,
				NFconsumed /= undefined ->
				    merge_msg_ConsumedCapacity(PFconsumed,
							       NFconsumed,
							       TrUserData);
				PFconsumed == undefined -> NFconsumed;
				NFconsumed == undefined -> PFconsumed
			     end,
			 row =
			     if NFrow =:= undefined -> PFrow;
				true -> NFrow
			     end}.

merge_msg_GetRowResponse(#'GetRowResponse'{consumed =
					       PFconsumed,
					   next_token = PFnext_token},
			 #'GetRowResponse'{consumed = NFconsumed, row = NFrow,
					   next_token = NFnext_token},
			 TrUserData) ->
    #'GetRowResponse'{consumed =
			  if PFconsumed /= undefined, NFconsumed /= undefined ->
				 merge_msg_ConsumedCapacity(PFconsumed,
							    NFconsumed,
							    TrUserData);
			     PFconsumed == undefined -> NFconsumed;
			     NFconsumed == undefined -> PFconsumed
			  end,
		      row = NFrow,
		      next_token =
			  if NFnext_token =:= undefined -> PFnext_token;
			     true -> NFnext_token
			  end}.

merge_msg_GetRangeResponse(#'GetRangeResponse'{consumed
						   = PFconsumed,
					       next_start_primary_key =
						   PFnext_start_primary_key,
					       next_token = PFnext_token},
			   #'GetRangeResponse'{consumed = NFconsumed,
					       rows = NFrows,
					       next_start_primary_key =
						   NFnext_start_primary_key,
					       next_token = NFnext_token},
			   TrUserData) ->
    #'GetRangeResponse'{consumed =
			    if PFconsumed /= undefined,
			       NFconsumed /= undefined ->
				   merge_msg_ConsumedCapacity(PFconsumed,
							      NFconsumed,
							      TrUserData);
			       PFconsumed == undefined -> NFconsumed;
			       NFconsumed == undefined -> PFconsumed
			    end,
			rows = NFrows,
			next_start_primary_key =
			    if NFnext_start_primary_key =:= undefined ->
				   PFnext_start_primary_key;
			       true -> NFnext_start_primary_key
			    end,
			next_token =
			    if NFnext_token =:= undefined -> PFnext_token;
			       true -> NFnext_token
			    end}.

merge_msg_TableInBatchGetRowResponse(#'TableInBatchGetRowResponse'{rows
								       =
								       PFrows},
				     #'TableInBatchGetRowResponse'{table_name =
								       NFtable_name,
								   rows =
								       NFrows},
				     TrUserData) ->
    #'TableInBatchGetRowResponse'{table_name = NFtable_name,
				  rows =
				      'erlang_++'(PFrows, NFrows, TrUserData)}.

merge_msg_BatchGetRowResponse(#'BatchGetRowResponse'{tables
							 = PFtables},
			      #'BatchGetRowResponse'{tables = NFtables},
			      TrUserData) ->
    #'BatchGetRowResponse'{tables =
			       'erlang_++'(PFtables, NFtables, TrUserData)}.

merge_msg_LoadTableResponse(_Prev, New, _TrUserData) ->
    New.

merge_msg_ListTableResponse(#'ListTableResponse'{table_names
						     = PFtable_names},
			    #'ListTableResponse'{table_names = NFtable_names},
			    TrUserData) ->
    #'ListTableResponse'{table_names =
			     'erlang_++'(PFtable_names, NFtable_names,
					 TrUserData)}.

merge_msg_GetRangeRequest(#'GetRangeRequest'{columns_to_get
						 = PFcolumns_to_get,
					     time_range = PFtime_range,
					     max_versions = PFmax_versions,
					     limit = PFlimit,
					     cache_blocks = PFcache_blocks,
					     filter = PFfilter,
					     start_column = PFstart_column,
					     end_column = PFend_column,
					     token = PFtoken},
			  #'GetRangeRequest'{table_name = NFtable_name,
					     direction = NFdirection,
					     columns_to_get = NFcolumns_to_get,
					     time_range = NFtime_range,
					     max_versions = NFmax_versions,
					     limit = NFlimit,
					     inclusive_start_primary_key =
						 NFinclusive_start_primary_key,
					     exclusive_end_primary_key =
						 NFexclusive_end_primary_key,
					     cache_blocks = NFcache_blocks,
					     filter = NFfilter,
					     start_column = NFstart_column,
					     end_column = NFend_column,
					     token = NFtoken},
			  TrUserData) ->
    #'GetRangeRequest'{table_name = NFtable_name,
		       direction = NFdirection,
		       columns_to_get =
			   'erlang_++'(PFcolumns_to_get, NFcolumns_to_get,
				       TrUserData),
		       time_range =
			   if PFtime_range /= undefined,
			      NFtime_range /= undefined ->
				  merge_msg_TimeRange(PFtime_range,
						      NFtime_range, TrUserData);
			      PFtime_range == undefined -> NFtime_range;
			      NFtime_range == undefined -> PFtime_range
			   end,
		       max_versions =
			   if NFmax_versions =:= undefined -> PFmax_versions;
			      true -> NFmax_versions
			   end,
		       limit =
			   if NFlimit =:= undefined -> PFlimit;
			      true -> NFlimit
			   end,
		       inclusive_start_primary_key =
			   NFinclusive_start_primary_key,
		       exclusive_end_primary_key = NFexclusive_end_primary_key,
		       cache_blocks =
			   if NFcache_blocks =:= undefined -> PFcache_blocks;
			      true -> NFcache_blocks
			   end,
		       filter =
			   if NFfilter =:= undefined -> PFfilter;
			      true -> NFfilter
			   end,
		       start_column =
			   if NFstart_column =:= undefined -> PFstart_column;
			      true -> NFstart_column
			   end,
		       end_column =
			   if NFend_column =:= undefined -> PFend_column;
			      true -> NFend_column
			   end,
		       token =
			   if NFtoken =:= undefined -> PFtoken;
			      true -> NFtoken
			   end}.

merge_msg_UpdateRowRequest(#'UpdateRowRequest'{condition
						   = PFcondition,
					       return_content =
						   PFreturn_content},
			   #'UpdateRowRequest'{table_name = NFtable_name,
					       row_change = NFrow_change,
					       condition = NFcondition,
					       return_content =
						   NFreturn_content},
			   TrUserData) ->
    #'UpdateRowRequest'{table_name = NFtable_name,
			row_change = NFrow_change,
			condition =
			    if PFcondition /= undefined,
			       NFcondition /= undefined ->
				   merge_msg_Condition(PFcondition, NFcondition,
						       TrUserData);
			       PFcondition == undefined -> NFcondition;
			       NFcondition == undefined -> PFcondition
			    end,
			return_content =
			    if PFreturn_content /= undefined,
			       NFreturn_content /= undefined ->
				   merge_msg_ReturnContent(PFreturn_content,
							   NFreturn_content,
							   TrUserData);
			       PFreturn_content == undefined ->
				   NFreturn_content;
			       NFreturn_content == undefined -> PFreturn_content
			    end}.

merge_msg_DeleteRowRequest(#'DeleteRowRequest'{condition
						   = PFcondition,
					       return_content =
						   PFreturn_content},
			   #'DeleteRowRequest'{table_name = NFtable_name,
					       primary_key = NFprimary_key,
					       condition = NFcondition,
					       return_content =
						   NFreturn_content},
			   TrUserData) ->
    #'DeleteRowRequest'{table_name = NFtable_name,
			primary_key = NFprimary_key,
			condition =
			    if PFcondition /= undefined,
			       NFcondition /= undefined ->
				   merge_msg_Condition(PFcondition, NFcondition,
						       TrUserData);
			       PFcondition == undefined -> NFcondition;
			       NFcondition == undefined -> PFcondition
			    end,
			return_content =
			    if PFreturn_content /= undefined,
			       NFreturn_content /= undefined ->
				   merge_msg_ReturnContent(PFreturn_content,
							   NFreturn_content,
							   TrUserData);
			       PFreturn_content == undefined ->
				   NFreturn_content;
			       NFreturn_content == undefined -> PFreturn_content
			    end}.

merge_msg_ComputeSplitPointsBySizeRequest(#'ComputeSplitPointsBySizeRequest'{},
					  #'ComputeSplitPointsBySizeRequest'{table_name
										 =
										 NFtable_name,
									     split_size
										 =
										 NFsplit_size},
					  _) ->
    #'ComputeSplitPointsBySizeRequest'{table_name =
					   NFtable_name,
				       split_size = NFsplit_size}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Condition'{} ->
	  v_msg_Condition(Msg, ['Condition'], TrUserData);
      #'CapacityUnit'{} ->
	  v_msg_CapacityUnit(Msg, ['CapacityUnit'], TrUserData);
      #'ConsumedCapacity'{} ->
	  v_msg_ConsumedCapacity(Msg, ['ConsumedCapacity'],
				 TrUserData);
      #'ComputeSplitPointsBySizeResponse.SplitLocation'{} ->
	  'v_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Msg,
								 ['ComputeSplitPointsBySizeResponse.SplitLocation'],
								 TrUserData);
      #'PrimaryKeySchema'{} ->
	  v_msg_PrimaryKeySchema(Msg, ['PrimaryKeySchema'],
				 TrUserData);
      #'ComputeSplitPointsBySizeResponse'{} ->
	  v_msg_ComputeSplitPointsBySizeResponse(Msg,
						 ['ComputeSplitPointsBySizeResponse'],
						 TrUserData);
      #'DeleteTableResponse'{} ->
	  v_msg_DeleteTableResponse(Msg, ['DeleteTableResponse'],
				    TrUserData);
      #'CreateTableResponse'{} ->
	  v_msg_CreateTableResponse(Msg, ['CreateTableResponse'],
				    TrUserData);
      #'TableOptions'{} ->
	  v_msg_TableOptions(Msg, ['TableOptions'], TrUserData);
      #'ReservedThroughputDetails'{} ->
	  v_msg_ReservedThroughputDetails(Msg,
					  ['ReservedThroughputDetails'],
					  TrUserData);
      #'TableMeta'{} ->
	  v_msg_TableMeta(Msg, ['TableMeta'], TrUserData);
      #'DescribeTableResponse'{} ->
	  v_msg_DescribeTableResponse(Msg,
				      ['DescribeTableResponse'], TrUserData);
      #'PartitionRange'{} ->
	  v_msg_PartitionRange(Msg, ['PartitionRange'],
			       TrUserData);
      #'ReturnContent'{} ->
	  v_msg_ReturnContent(Msg, ['ReturnContent'], TrUserData);
      #'RowInBatchWriteRowRequest'{} ->
	  v_msg_RowInBatchWriteRowRequest(Msg,
					  ['RowInBatchWriteRowRequest'],
					  TrUserData);
      #'TableInBatchWriteRowRequest'{} ->
	  v_msg_TableInBatchWriteRowRequest(Msg,
					    ['TableInBatchWriteRowRequest'],
					    TrUserData);
      #'BatchWriteRowRequest'{} ->
	  v_msg_BatchWriteRowRequest(Msg,
				     ['BatchWriteRowRequest'], TrUserData);
      #'UnloadTableRequest'{} ->
	  v_msg_UnloadTableRequest(Msg, ['UnloadTableRequest'],
				   TrUserData);
      #'LoadTableRequest'{} ->
	  v_msg_LoadTableRequest(Msg, ['LoadTableRequest'],
				 TrUserData);
      #'PutRowRequest'{} ->
	  v_msg_PutRowRequest(Msg, ['PutRowRequest'], TrUserData);
      #'Error'{} -> v_msg_Error(Msg, ['Error'], TrUserData);
      #'RowInBatchGetRowResponse'{} ->
	  v_msg_RowInBatchGetRowResponse(Msg,
					 ['RowInBatchGetRowResponse'],
					 TrUserData);
      #'UpdateTableResponse'{} ->
	  v_msg_UpdateTableResponse(Msg, ['UpdateTableResponse'],
				    TrUserData);
      #'PutRowResponse'{} ->
	  v_msg_PutRowResponse(Msg, ['PutRowResponse'],
			       TrUserData);
      #'ReservedThroughput'{} ->
	  v_msg_ReservedThroughput(Msg, ['ReservedThroughput'],
				   TrUserData);
      #'TimeRange'{} ->
	  v_msg_TimeRange(Msg, ['TimeRange'], TrUserData);
      #'TableInBatchGetRowRequest'{} ->
	  v_msg_TableInBatchGetRowRequest(Msg,
					  ['TableInBatchGetRowRequest'],
					  TrUserData);
      #'BatchGetRowRequest'{} ->
	  v_msg_BatchGetRowRequest(Msg, ['BatchGetRowRequest'],
				   TrUserData);
      #'DeleteTableRequest'{} ->
	  v_msg_DeleteTableRequest(Msg, ['DeleteTableRequest'],
				   TrUserData);
      #'ListTableRequest'{} ->
	  v_msg_ListTableRequest(Msg, ['ListTableRequest'],
				 TrUserData);
      #'UpdateTableRequest'{} ->
	  v_msg_UpdateTableRequest(Msg, ['UpdateTableRequest'],
				   TrUserData);
      #'CreateTableRequest'{} ->
	  v_msg_CreateTableRequest(Msg, ['CreateTableRequest'],
				   TrUserData);
      #'GetRowRequest'{} ->
	  v_msg_GetRowRequest(Msg, ['GetRowRequest'], TrUserData);
      #'DescribeTableRequest'{} ->
	  v_msg_DescribeTableRequest(Msg,
				     ['DescribeTableRequest'], TrUserData);
      #'DeleteRowResponse'{} ->
	  v_msg_DeleteRowResponse(Msg, ['DeleteRowResponse'],
				  TrUserData);
      #'UnloadTableResponse'{} ->
	  v_msg_UnloadTableResponse(Msg, ['UnloadTableResponse'],
				    TrUserData);
      #'RowInBatchWriteRowResponse'{} ->
	  v_msg_RowInBatchWriteRowResponse(Msg,
					   ['RowInBatchWriteRowResponse'],
					   TrUserData);
      #'TableInBatchWriteRowResponse'{} ->
	  v_msg_TableInBatchWriteRowResponse(Msg,
					     ['TableInBatchWriteRowResponse'],
					     TrUserData);
      #'BatchWriteRowResponse'{} ->
	  v_msg_BatchWriteRowResponse(Msg,
				      ['BatchWriteRowResponse'], TrUserData);
      #'UpdateRowResponse'{} ->
	  v_msg_UpdateRowResponse(Msg, ['UpdateRowResponse'],
				  TrUserData);
      #'GetRowResponse'{} ->
	  v_msg_GetRowResponse(Msg, ['GetRowResponse'],
			       TrUserData);
      #'GetRangeResponse'{} ->
	  v_msg_GetRangeResponse(Msg, ['GetRangeResponse'],
				 TrUserData);
      #'TableInBatchGetRowResponse'{} ->
	  v_msg_TableInBatchGetRowResponse(Msg,
					   ['TableInBatchGetRowResponse'],
					   TrUserData);
      #'BatchGetRowResponse'{} ->
	  v_msg_BatchGetRowResponse(Msg, ['BatchGetRowResponse'],
				    TrUserData);
      #'LoadTableResponse'{} ->
	  v_msg_LoadTableResponse(Msg, ['LoadTableResponse'],
				  TrUserData);
      #'ListTableResponse'{} ->
	  v_msg_ListTableResponse(Msg, ['ListTableResponse'],
				  TrUserData);
      #'GetRangeRequest'{} ->
	  v_msg_GetRangeRequest(Msg, ['GetRangeRequest'],
				TrUserData);
      #'UpdateRowRequest'{} ->
	  v_msg_UpdateRowRequest(Msg, ['UpdateRowRequest'],
				 TrUserData);
      #'DeleteRowRequest'{} ->
	  v_msg_DeleteRowRequest(Msg, ['DeleteRowRequest'],
				 TrUserData);
      #'ComputeSplitPointsBySizeRequest'{} ->
	  v_msg_ComputeSplitPointsBySizeRequest(Msg,
						['ComputeSplitPointsBySizeRequest'],
						TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Condition/3}).
v_msg_Condition(#'Condition'{row_existence = F1,
			     column_condition = F2},
		Path, _) ->
    v_enum_RowExistenceExpectation(F1,
				   [row_existence | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [column_condition | Path])
    end,
    ok;
v_msg_Condition(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Condition'}, X, Path).

-dialyzer({nowarn_function,v_msg_CapacityUnit/3}).
v_msg_CapacityUnit(#'CapacityUnit'{read = F1,
				   write = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [read | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [write | Path])
    end,
    ok;
v_msg_CapacityUnit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CapacityUnit'}, X, Path).

-dialyzer({nowarn_function,v_msg_ConsumedCapacity/3}).
v_msg_ConsumedCapacity(#'ConsumedCapacity'{capacity_unit
					       = F1},
		       Path, TrUserData) ->
    v_msg_CapacityUnit(F1, [capacity_unit | Path],
		       TrUserData),
    ok;
v_msg_ConsumedCapacity(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ConsumedCapacity'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_ComputeSplitPointsBySizeResponse.SplitLocation'/3}).
'v_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(#'ComputeSplitPointsBySizeResponse.SplitLocation'{location
													     =
													     F1,
													 repeat
													     =
													     F2},
						       Path, _) ->
    v_type_string(F1, [location | Path]),
    v_type_sint64(F2, [repeat | Path]),
    ok;
'v_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(X,
						       Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ComputeSplitPointsBySizeResponse.SplitLocation'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_PrimaryKeySchema/3}).
v_msg_PrimaryKeySchema(#'PrimaryKeySchema'{name = F1,
					   type = F2, option = F3},
		       Path, _) ->
    v_type_string(F1, [name | Path]),
    v_enum_PrimaryKeyType(F2, [type | Path]),
    if F3 == undefined -> ok;
       true -> v_enum_PrimaryKeyOption(F3, [option | Path])
    end,
    ok;
v_msg_PrimaryKeySchema(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PrimaryKeySchema'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ComputeSplitPointsBySizeResponse/3}).
v_msg_ComputeSplitPointsBySizeResponse(#'ComputeSplitPointsBySizeResponse'{consumed
									       =
									       F1,
									   schema
									       =
									       F2,
									   split_points
									       =
									       F3,
									   locations
									       =
									       F4},
				       Path, TrUserData) ->
    v_msg_ConsumedCapacity(F1, [consumed | Path],
			   TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_PrimaryKeySchema(Elem, [schema | Path],
				       TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'PrimaryKeySchema'}},
			 F2, Path)
    end,
    if is_list(F3) ->
	   _ = [v_type_bytes(Elem, [split_points | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F3, Path)
    end,
    if is_list(F4) ->
	   _ =
	       ['v_msg_ComputeSplitPointsBySizeResponse.SplitLocation'(Elem,
								       [locations
									| Path],
								       TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg,
			   'ComputeSplitPointsBySizeResponse.SplitLocation'}},
			 F4, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_DeleteTableResponse/3}).
v_msg_DeleteTableResponse(#'DeleteTableResponse'{},
			  _Path, _) ->
    ok.

-dialyzer({nowarn_function,v_msg_CreateTableResponse/3}).
v_msg_CreateTableResponse(#'CreateTableResponse'{},
			  _Path, _) ->
    ok.

-dialyzer({nowarn_function,v_msg_TableOptions/3}).
v_msg_TableOptions(#'TableOptions'{time_to_live = F1,
				   max_versions = F2, bloom_filter_type = F3,
				   block_size = F4,
				   deviation_cell_version_in_sec = F5},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [time_to_live | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [max_versions | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_enum_BloomFilterType(F3, [bloom_filter_type | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [block_size | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_int64(F5, [deviation_cell_version_in_sec | Path])
    end,
    ok;
v_msg_TableOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TableOptions'}, X, Path).

-dialyzer({nowarn_function,v_msg_ReservedThroughputDetails/3}).
v_msg_ReservedThroughputDetails(#'ReservedThroughputDetails'{capacity_unit
								 = F1,
							     last_increase_time
								 = F2,
							     last_decrease_time
								 = F3},
				Path, TrUserData) ->
    v_msg_CapacityUnit(F1, [capacity_unit | Path],
		       TrUserData),
    v_type_int64(F2, [last_increase_time | Path]),
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [last_decrease_time | Path])
    end,
    ok;
v_msg_ReservedThroughputDetails(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ReservedThroughputDetails'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_TableMeta/3}).
v_msg_TableMeta(#'TableMeta'{table_name = F1,
			     primary_key = F2},
		Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    if is_list(F2) ->
	   _ = [v_msg_PrimaryKeySchema(Elem, [primary_key | Path],
				       TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'PrimaryKeySchema'}},
			 F2, Path)
    end,
    ok;
v_msg_TableMeta(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TableMeta'}, X, Path).

-dialyzer({nowarn_function,v_msg_DescribeTableResponse/3}).
v_msg_DescribeTableResponse(#'DescribeTableResponse'{table_meta
							 = F1,
						     reserved_throughput_details
							 = F2,
						     table_options = F3,
						     table_status = F4,
						     shard_splits = F5},
			    Path, TrUserData) ->
    v_msg_TableMeta(F1, [table_meta | Path], TrUserData),
    v_msg_ReservedThroughputDetails(F2,
				    [reserved_throughput_details | Path],
				    TrUserData),
    v_msg_TableOptions(F3, [table_options | Path],
		       TrUserData),
    v_enum_TableStatus(F4, [table_status | Path]),
    if is_list(F5) ->
	   _ = [v_type_bytes(Elem, [shard_splits | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F5, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_PartitionRange/3}).
v_msg_PartitionRange(#'PartitionRange'{'begin' = F1,
				       'end' = F2},
		     Path, _) ->
    v_type_bytes(F1, ['begin' | Path]),
    v_type_bytes(F2, ['end' | Path]),
    ok;
v_msg_PartitionRange(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PartitionRange'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ReturnContent/3}).
v_msg_ReturnContent(#'ReturnContent'{return_type = F1},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_ReturnType(F1, [return_type | Path])
    end,
    ok;
v_msg_ReturnContent(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReturnContent'}, X, Path).

-dialyzer({nowarn_function,v_msg_RowInBatchWriteRowRequest/3}).
v_msg_RowInBatchWriteRowRequest(#'RowInBatchWriteRowRequest'{type
								 = F1,
							     row_change = F2,
							     condition = F3,
							     return_content =
								 F4},
				Path, TrUserData) ->
    v_enum_OperationType(F1, [type | Path]),
    v_type_bytes(F2, [row_change | Path]),
    v_msg_Condition(F3, [condition | Path], TrUserData),
    if F4 == undefined -> ok;
       true ->
	   v_msg_ReturnContent(F4, [return_content | Path],
			       TrUserData)
    end,
    ok;
v_msg_RowInBatchWriteRowRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'RowInBatchWriteRowRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_TableInBatchWriteRowRequest/3}).
v_msg_TableInBatchWriteRowRequest(#'TableInBatchWriteRowRequest'{table_name
								     = F1,
								 rows = F2},
				  Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    if is_list(F2) ->
	   _ = [v_msg_RowInBatchWriteRowRequest(Elem,
						[rows | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'RowInBatchWriteRowRequest'}},
			 F2, Path)
    end,
    ok;
v_msg_TableInBatchWriteRowRequest(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'TableInBatchWriteRowRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_BatchWriteRowRequest/3}).
v_msg_BatchWriteRowRequest(#'BatchWriteRowRequest'{tables
						       = F1},
			   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_TableInBatchWriteRowRequest(Elem,
						  [tables | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'TableInBatchWriteRowRequest'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_UnloadTableRequest/3}).
v_msg_UnloadTableRequest(#'UnloadTableRequest'{table_name
						   = F1},
			 Path, _) ->
    v_type_string(F1, [table_name | Path]), ok.

-dialyzer({nowarn_function,v_msg_LoadTableRequest/3}).
v_msg_LoadTableRequest(#'LoadTableRequest'{table_name =
					       F1},
		       Path, _) ->
    v_type_string(F1, [table_name | Path]), ok.

-dialyzer({nowarn_function,v_msg_PutRowRequest/3}).
v_msg_PutRowRequest(#'PutRowRequest'{table_name = F1,
				     row = F2, condition = F3,
				     return_content = F4},
		    Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    v_type_bytes(F2, [row | Path]),
    v_msg_Condition(F3, [condition | Path], TrUserData),
    if F4 == undefined -> ok;
       true ->
	   v_msg_ReturnContent(F4, [return_content | Path],
			       TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Error/3}).
v_msg_Error(#'Error'{code = F1, message = F2}, Path,
	    _) ->
    v_type_string(F1, [code | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [message | Path])
    end,
    ok;
v_msg_Error(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Error'}, X, Path).

-dialyzer({nowarn_function,v_msg_RowInBatchGetRowResponse/3}).
v_msg_RowInBatchGetRowResponse(#'RowInBatchGetRowResponse'{is_ok
							       = F1,
							   error = F2,
							   consumed = F3,
							   row = F4,
							   next_token = F5},
			       Path, TrUserData) ->
    v_type_bool(F1, [is_ok | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_Error(F2, [error | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_ConsumedCapacity(F3, [consumed | Path],
				  TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [row | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [next_token | Path])
    end,
    ok;
v_msg_RowInBatchGetRowResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'RowInBatchGetRowResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_UpdateTableResponse/3}).
v_msg_UpdateTableResponse(#'UpdateTableResponse'{reserved_throughput_details
						     = F1,
						 table_options = F2},
			  Path, TrUserData) ->
    v_msg_ReservedThroughputDetails(F1,
				    [reserved_throughput_details | Path],
				    TrUserData),
    v_msg_TableOptions(F2, [table_options | Path],
		       TrUserData),
    ok.

-dialyzer({nowarn_function,v_msg_PutRowResponse/3}).
v_msg_PutRowResponse(#'PutRowResponse'{consumed = F1,
				       row = F2},
		     Path, TrUserData) ->
    v_msg_ConsumedCapacity(F1, [consumed | Path],
			   TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [row | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ReservedThroughput/3}).
v_msg_ReservedThroughput(#'ReservedThroughput'{capacity_unit
						   = F1},
			 Path, TrUserData) ->
    v_msg_CapacityUnit(F1, [capacity_unit | Path],
		       TrUserData),
    ok;
v_msg_ReservedThroughput(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReservedThroughput'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_TimeRange/3}).
v_msg_TimeRange(#'TimeRange'{start_time = F1,
			     end_time = F2, specific_time = F3},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [start_time | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [end_time | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [specific_time | Path])
    end,
    ok;
v_msg_TimeRange(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TimeRange'}, X, Path).

-dialyzer({nowarn_function,v_msg_TableInBatchGetRowRequest/3}).
v_msg_TableInBatchGetRowRequest(#'TableInBatchGetRowRequest'{table_name
								 = F1,
							     primary_key = F2,
							     token = F3,
							     columns_to_get =
								 F4,
							     time_range = F5,
							     max_versions = F6,
							     cache_blocks = F7,
							     filter = F8,
							     start_column = F9,
							     end_column = F10},
				Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    if is_list(F2) ->
	   _ = [v_type_bytes(Elem, [primary_key | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F2, Path)
    end,
    if is_list(F3) ->
	   _ = [v_type_bytes(Elem, [token | Path]) || Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F3, Path)
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [columns_to_get | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4, Path)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_TimeRange(F5, [time_range | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [max_versions | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [cache_blocks | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [filter | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [start_column | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_string(F10, [end_column | Path])
    end,
    ok;
v_msg_TableInBatchGetRowRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'TableInBatchGetRowRequest'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_BatchGetRowRequest/3}).
v_msg_BatchGetRowRequest(#'BatchGetRowRequest'{tables =
						   F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_TableInBatchGetRowRequest(Elem,
						[tables | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'TableInBatchGetRowRequest'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_DeleteTableRequest/3}).
v_msg_DeleteTableRequest(#'DeleteTableRequest'{table_name
						   = F1},
			 Path, _) ->
    v_type_string(F1, [table_name | Path]), ok.

-dialyzer({nowarn_function,v_msg_ListTableRequest/3}).
v_msg_ListTableRequest(#'ListTableRequest'{}, _Path,
		       _) ->
    ok.

-dialyzer({nowarn_function,v_msg_UpdateTableRequest/3}).
v_msg_UpdateTableRequest(#'UpdateTableRequest'{table_name
						   = F1,
					       reserved_throughput = F2,
					       table_options = F3},
			 Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    if F2 == undefined -> ok;
       true ->
	   v_msg_ReservedThroughput(F2,
				    [reserved_throughput | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_TableOptions(F3, [table_options | Path],
			      TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CreateTableRequest/3}).
v_msg_CreateTableRequest(#'CreateTableRequest'{table_meta
						   = F1,
					       reserved_throughput = F2,
					       table_options = F3,
					       partitions = F4},
			 Path, TrUserData) ->
    v_msg_TableMeta(F1, [table_meta | Path], TrUserData),
    v_msg_ReservedThroughput(F2,
			     [reserved_throughput | Path], TrUserData),
    if F3 == undefined -> ok;
       true ->
	   v_msg_TableOptions(F3, [table_options | Path],
			      TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_msg_PartitionRange(Elem, [partitions | Path],
				     TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'PartitionRange'}},
			 F4, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetRowRequest/3}).
v_msg_GetRowRequest(#'GetRowRequest'{table_name = F1,
				     primary_key = F2, columns_to_get = F3,
				     time_range = F4, max_versions = F5,
				     cache_blocks = F6, filter = F7,
				     start_column = F8, end_column = F9,
				     token = F10},
		    Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    v_type_bytes(F2, [primary_key | Path]),
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [columns_to_get | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_TimeRange(F4, [time_range | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [max_versions | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [cache_blocks | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [filter | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [start_column | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [end_column | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [token | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_DescribeTableRequest/3}).
v_msg_DescribeTableRequest(#'DescribeTableRequest'{table_name
						       = F1},
			   Path, _) ->
    v_type_string(F1, [table_name | Path]), ok.

-dialyzer({nowarn_function,v_msg_DeleteRowResponse/3}).
v_msg_DeleteRowResponse(#'DeleteRowResponse'{consumed =
						 F1,
					     row = F2},
			Path, TrUserData) ->
    v_msg_ConsumedCapacity(F1, [consumed | Path],
			   TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [row | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_UnloadTableResponse/3}).
v_msg_UnloadTableResponse(#'UnloadTableResponse'{},
			  _Path, _) ->
    ok.

-dialyzer({nowarn_function,v_msg_RowInBatchWriteRowResponse/3}).
v_msg_RowInBatchWriteRowResponse(#'RowInBatchWriteRowResponse'{is_ok
								   = F1,
							       error = F2,
							       consumed = F3,
							       row = F4},
				 Path, TrUserData) ->
    v_type_bool(F1, [is_ok | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_Error(F2, [error | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_ConsumedCapacity(F3, [consumed | Path],
				  TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [row | Path])
    end,
    ok;
v_msg_RowInBatchWriteRowResponse(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'RowInBatchWriteRowResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_TableInBatchWriteRowResponse/3}).
v_msg_TableInBatchWriteRowResponse(#'TableInBatchWriteRowResponse'{table_name
								       = F1,
								   rows = F2},
				   Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    if is_list(F2) ->
	   _ = [v_msg_RowInBatchWriteRowResponse(Elem,
						 [rows | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'RowInBatchWriteRowResponse'}},
			 F2, Path)
    end,
    ok;
v_msg_TableInBatchWriteRowResponse(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'TableInBatchWriteRowResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_BatchWriteRowResponse/3}).
v_msg_BatchWriteRowResponse(#'BatchWriteRowResponse'{tables
							 = F1},
			    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_TableInBatchWriteRowResponse(Elem,
						   [tables | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'TableInBatchWriteRowResponse'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_UpdateRowResponse/3}).
v_msg_UpdateRowResponse(#'UpdateRowResponse'{consumed =
						 F1,
					     row = F2},
			Path, TrUserData) ->
    v_msg_ConsumedCapacity(F1, [consumed | Path],
			   TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [row | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetRowResponse/3}).
v_msg_GetRowResponse(#'GetRowResponse'{consumed = F1,
				       row = F2, next_token = F3},
		     Path, TrUserData) ->
    v_msg_ConsumedCapacity(F1, [consumed | Path],
			   TrUserData),
    v_type_bytes(F2, [row | Path]),
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [next_token | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetRangeResponse/3}).
v_msg_GetRangeResponse(#'GetRangeResponse'{consumed =
					       F1,
					   rows = F2,
					   next_start_primary_key = F3,
					   next_token = F4},
		       Path, TrUserData) ->
    v_msg_ConsumedCapacity(F1, [consumed | Path],
			   TrUserData),
    v_type_bytes(F2, [rows | Path]),
    if F3 == undefined -> ok;
       true ->
	   v_type_bytes(F3, [next_start_primary_key | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [next_token | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_TableInBatchGetRowResponse/3}).
v_msg_TableInBatchGetRowResponse(#'TableInBatchGetRowResponse'{table_name
								   = F1,
							       rows = F2},
				 Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    if is_list(F2) ->
	   _ = [v_msg_RowInBatchGetRowResponse(Elem, [rows | Path],
					       TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'RowInBatchGetRowResponse'}},
			 F2, Path)
    end,
    ok;
v_msg_TableInBatchGetRowResponse(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'TableInBatchGetRowResponse'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_BatchGetRowResponse/3}).
v_msg_BatchGetRowResponse(#'BatchGetRowResponse'{tables
						     = F1},
			  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_TableInBatchGetRowResponse(Elem,
						 [tables | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'TableInBatchGetRowResponse'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_LoadTableResponse/3}).
v_msg_LoadTableResponse(#'LoadTableResponse'{}, _Path,
			_) ->
    ok.

-dialyzer({nowarn_function,v_msg_ListTableResponse/3}).
v_msg_ListTableResponse(#'ListTableResponse'{table_names
						 = F1},
			Path, _) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [table_names | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetRangeRequest/3}).
v_msg_GetRangeRequest(#'GetRangeRequest'{table_name =
					     F1,
					 direction = F2, columns_to_get = F3,
					 time_range = F4, max_versions = F5,
					 limit = F6,
					 inclusive_start_primary_key = F7,
					 exclusive_end_primary_key = F8,
					 cache_blocks = F9, filter = F10,
					 start_column = F11, end_column = F12,
					 token = F13},
		      Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    v_enum_Direction(F2, [direction | Path]),
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [columns_to_get | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_TimeRange(F4, [time_range | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [max_versions | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [limit | Path])
    end,
    v_type_bytes(F7, [inclusive_start_primary_key | Path]),
    v_type_bytes(F8, [exclusive_end_primary_key | Path]),
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [cache_blocks | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [filter | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [start_column | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_string(F12, [end_column | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_bytes(F13, [token | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_UpdateRowRequest/3}).
v_msg_UpdateRowRequest(#'UpdateRowRequest'{table_name =
					       F1,
					   row_change = F2, condition = F3,
					   return_content = F4},
		       Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    v_type_bytes(F2, [row_change | Path]),
    v_msg_Condition(F3, [condition | Path], TrUserData),
    if F4 == undefined -> ok;
       true ->
	   v_msg_ReturnContent(F4, [return_content | Path],
			       TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_DeleteRowRequest/3}).
v_msg_DeleteRowRequest(#'DeleteRowRequest'{table_name =
					       F1,
					   primary_key = F2, condition = F3,
					   return_content = F4},
		       Path, TrUserData) ->
    v_type_string(F1, [table_name | Path]),
    v_type_bytes(F2, [primary_key | Path]),
    v_msg_Condition(F3, [condition | Path], TrUserData),
    if F4 == undefined -> ok;
       true ->
	   v_msg_ReturnContent(F4, [return_content | Path],
			       TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ComputeSplitPointsBySizeRequest/3}).
v_msg_ComputeSplitPointsBySizeRequest(#'ComputeSplitPointsBySizeRequest'{table_name
									     =
									     F1,
									 split_size
									     =
									     F2},
				      Path, _) ->
    v_type_string(F1, [table_name | Path]),
    v_type_int64(F2, [split_size | Path]),
    ok.

-dialyzer({nowarn_function,v_enum_PrimaryKeyType/2}).
v_enum_PrimaryKeyType('INTEGER', _Path) -> ok;
v_enum_PrimaryKeyType('STRING', _Path) -> ok;
v_enum_PrimaryKeyType('BINARY', _Path) -> ok;
v_enum_PrimaryKeyType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_PrimaryKeyType(X, Path) ->
    mk_type_error({invalid_enum, 'PrimaryKeyType'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_PrimaryKeyOption/2}).
v_enum_PrimaryKeyOption('AUTO_INCREMENT', _Path) -> ok;
v_enum_PrimaryKeyOption(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_PrimaryKeyOption(X, Path) ->
    mk_type_error({invalid_enum, 'PrimaryKeyOption'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_BloomFilterType/2}).
v_enum_BloomFilterType('NONE', _Path) -> ok;
v_enum_BloomFilterType('CELL', _Path) -> ok;
v_enum_BloomFilterType('ROW', _Path) -> ok;
v_enum_BloomFilterType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_BloomFilterType(X, Path) ->
    mk_type_error({invalid_enum, 'BloomFilterType'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_TableStatus/2}).
v_enum_TableStatus('ACTIVE', _Path) -> ok;
v_enum_TableStatus('INACTIVE', _Path) -> ok;
v_enum_TableStatus('LOADING', _Path) -> ok;
v_enum_TableStatus('UNLOADING', _Path) -> ok;
v_enum_TableStatus('UPDATING', _Path) -> ok;
v_enum_TableStatus(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_TableStatus(X, Path) ->
    mk_type_error({invalid_enum, 'TableStatus'}, X, Path).

-dialyzer({nowarn_function,v_enum_RowExistenceExpectation/2}).
v_enum_RowExistenceExpectation('IGNORE', _Path) -> ok;
v_enum_RowExistenceExpectation('EXPECT_EXIST', _Path) ->
    ok;
v_enum_RowExistenceExpectation('EXPECT_NOT_EXIST',
			       _Path) ->
    ok;
v_enum_RowExistenceExpectation(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_RowExistenceExpectation(X, Path) ->
    mk_type_error({invalid_enum, 'RowExistenceExpectation'},
		  X, Path).

-dialyzer({nowarn_function,v_enum_ReturnType/2}).
v_enum_ReturnType('RT_NONE', _Path) -> ok;
v_enum_ReturnType('RT_PK', _Path) -> ok;
v_enum_ReturnType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_ReturnType(X, Path) ->
    mk_type_error({invalid_enum, 'ReturnType'}, X, Path).

-dialyzer({nowarn_function,v_enum_OperationType/2}).
v_enum_OperationType('PUT', _Path) -> ok;
v_enum_OperationType('UPDATE', _Path) -> ok;
v_enum_OperationType('DELETE', _Path) -> ok;
v_enum_OperationType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_OperationType(X, Path) ->
    mk_type_error({invalid_enum, 'OperationType'}, X, Path).

-dialyzer({nowarn_function,v_enum_Direction/2}).
v_enum_Direction('FORWARD', _Path) -> ok;
v_enum_Direction('BACKWARD', _Path) -> ok;
v_enum_Direction(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_Direction(X, Path) ->
    mk_type_error({invalid_enum, 'Direction'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint64/2}).
v_type_sint64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_sint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint64, signed, 64},
		  N, Path);
v_type_sint64(X, Path) ->
    mk_type_error({bad_integer, sint64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'PrimaryKeyType'},
      [{'INTEGER', 1}, {'STRING', 2}, {'BINARY', 3}]},
     {{enum, 'PrimaryKeyOption'}, [{'AUTO_INCREMENT', 1}]},
     {{enum, 'BloomFilterType'},
      [{'NONE', 1}, {'CELL', 2}, {'ROW', 3}]},
     {{enum, 'TableStatus'},
      [{'ACTIVE', 1}, {'INACTIVE', 2}, {'LOADING', 3},
       {'UNLOADING', 4}, {'UPDATING', 5}]},
     {{enum, 'RowExistenceExpectation'},
      [{'IGNORE', 0}, {'EXPECT_EXIST', 1},
       {'EXPECT_NOT_EXIST', 2}]},
     {{enum, 'ReturnType'}, [{'RT_NONE', 0}, {'RT_PK', 1}]},
     {{enum, 'OperationType'},
      [{'PUT', 1}, {'UPDATE', 2}, {'DELETE', 3}]},
     {{enum, 'Direction'},
      [{'FORWARD', 0}, {'BACKWARD', 1}]},
     {{msg, 'Condition'},
      [#field{name = row_existence, fnum = 1, rnum = 2,
	      type = {enum, 'RowExistenceExpectation'},
	      occurrence = required, opts = []},
       #field{name = column_condition, fnum = 2, rnum = 3,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'CapacityUnit'},
      [#field{name = read, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = write, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'ConsumedCapacity'},
      [#field{name = capacity_unit, fnum = 1, rnum = 2,
	      type = {msg, 'CapacityUnit'}, occurrence = required,
	      opts = []}]},
     {{msg,
       'ComputeSplitPointsBySizeResponse.SplitLocation'},
      [#field{name = location, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = repeat, fnum = 2, rnum = 3, type = sint64,
	      occurrence = required, opts = []}]},
     {{msg, 'PrimaryKeySchema'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'PrimaryKeyType'}, occurrence = required,
	      opts = []},
       #field{name = option, fnum = 3, rnum = 4,
	      type = {enum, 'PrimaryKeyOption'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ComputeSplitPointsBySizeResponse'},
      [#field{name = consumed, fnum = 1, rnum = 2,
	      type = {msg, 'ConsumedCapacity'}, occurrence = required,
	      opts = []},
       #field{name = schema, fnum = 2, rnum = 3,
	      type = {msg, 'PrimaryKeySchema'}, occurrence = repeated,
	      opts = []},
       #field{name = split_points, fnum = 3, rnum = 4,
	      type = bytes, occurrence = repeated, opts = []},
       #field{name = locations, fnum = 4, rnum = 5,
	      type =
		  {msg, 'ComputeSplitPointsBySizeResponse.SplitLocation'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'DeleteTableResponse'}, []},
     {{msg, 'CreateTableResponse'}, []},
     {{msg, 'TableOptions'},
      [#field{name = time_to_live, fnum = 1, rnum = 2,
	      type = int32, occurrence = optional, opts = []},
       #field{name = max_versions, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = bloom_filter_type, fnum = 3, rnum = 4,
	      type = {enum, 'BloomFilterType'}, occurrence = optional,
	      opts = []},
       #field{name = block_size, fnum = 4, rnum = 5,
	      type = int32, occurrence = optional, opts = []},
       #field{name = deviation_cell_version_in_sec, fnum = 5,
	      rnum = 6, type = int64, occurrence = optional,
	      opts = []}]},
     {{msg, 'ReservedThroughputDetails'},
      [#field{name = capacity_unit, fnum = 1, rnum = 2,
	      type = {msg, 'CapacityUnit'}, occurrence = required,
	      opts = []},
       #field{name = last_increase_time, fnum = 2, rnum = 3,
	      type = int64, occurrence = required, opts = []},
       #field{name = last_decrease_time, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'TableMeta'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = primary_key, fnum = 2, rnum = 3,
	      type = {msg, 'PrimaryKeySchema'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'DescribeTableResponse'},
      [#field{name = table_meta, fnum = 1, rnum = 2,
	      type = {msg, 'TableMeta'}, occurrence = required,
	      opts = []},
       #field{name = reserved_throughput_details, fnum = 2,
	      rnum = 3, type = {msg, 'ReservedThroughputDetails'},
	      occurrence = required, opts = []},
       #field{name = table_options, fnum = 3, rnum = 4,
	      type = {msg, 'TableOptions'}, occurrence = required,
	      opts = []},
       #field{name = table_status, fnum = 4, rnum = 5,
	      type = {enum, 'TableStatus'}, occurrence = required,
	      opts = []},
       #field{name = shard_splits, fnum = 6, rnum = 6,
	      type = bytes, occurrence = repeated, opts = []}]},
     {{msg, 'PartitionRange'},
      [#field{name = 'begin', fnum = 1, rnum = 2,
	      type = bytes, occurrence = required, opts = []},
       #field{name = 'end', fnum = 2, rnum = 3, type = bytes,
	      occurrence = required, opts = []}]},
     {{msg, 'ReturnContent'},
      [#field{name = return_type, fnum = 1, rnum = 2,
	      type = {enum, 'ReturnType'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'RowInBatchWriteRowRequest'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'OperationType'}, occurrence = required,
	      opts = []},
       #field{name = row_change, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []},
       #field{name = condition, fnum = 3, rnum = 4,
	      type = {msg, 'Condition'}, occurrence = required,
	      opts = []},
       #field{name = return_content, fnum = 4, rnum = 5,
	      type = {msg, 'ReturnContent'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'TableInBatchWriteRowRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = rows, fnum = 2, rnum = 3,
	      type = {msg, 'RowInBatchWriteRowRequest'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'BatchWriteRowRequest'},
      [#field{name = tables, fnum = 1, rnum = 2,
	      type = {msg, 'TableInBatchWriteRowRequest'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'UnloadTableRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'LoadTableRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'PutRowRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = row, fnum = 2, rnum = 3, type = bytes,
	      occurrence = required, opts = []},
       #field{name = condition, fnum = 3, rnum = 4,
	      type = {msg, 'Condition'}, occurrence = required,
	      opts = []},
       #field{name = return_content, fnum = 4, rnum = 5,
	      type = {msg, 'ReturnContent'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Error'},
      [#field{name = code, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = message, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'RowInBatchGetRowResponse'},
      [#field{name = is_ok, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = error, fnum = 2, rnum = 3,
	      type = {msg, 'Error'}, occurrence = optional,
	      opts = []},
       #field{name = consumed, fnum = 3, rnum = 4,
	      type = {msg, 'ConsumedCapacity'}, occurrence = optional,
	      opts = []},
       #field{name = row, fnum = 4, rnum = 5, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = next_token, fnum = 5, rnum = 6,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'UpdateTableResponse'},
      [#field{name = reserved_throughput_details, fnum = 1,
	      rnum = 2, type = {msg, 'ReservedThroughputDetails'},
	      occurrence = required, opts = []},
       #field{name = table_options, fnum = 2, rnum = 3,
	      type = {msg, 'TableOptions'}, occurrence = required,
	      opts = []}]},
     {{msg, 'PutRowResponse'},
      [#field{name = consumed, fnum = 1, rnum = 2,
	      type = {msg, 'ConsumedCapacity'}, occurrence = required,
	      opts = []},
       #field{name = row, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'ReservedThroughput'},
      [#field{name = capacity_unit, fnum = 1, rnum = 2,
	      type = {msg, 'CapacityUnit'}, occurrence = required,
	      opts = []}]},
     {{msg, 'TimeRange'},
      [#field{name = start_time, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = end_time, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = specific_time, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'TableInBatchGetRowRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = primary_key, fnum = 2, rnum = 3,
	      type = bytes, occurrence = repeated, opts = []},
       #field{name = token, fnum = 3, rnum = 4, type = bytes,
	      occurrence = repeated, opts = []},
       #field{name = columns_to_get, fnum = 4, rnum = 5,
	      type = string, occurrence = repeated, opts = []},
       #field{name = time_range, fnum = 5, rnum = 6,
	      type = {msg, 'TimeRange'}, occurrence = optional,
	      opts = []},
       #field{name = max_versions, fnum = 6, rnum = 7,
	      type = int32, occurrence = optional, opts = []},
       #field{name = cache_blocks, fnum = 7, rnum = 8,
	      type = bool, occurrence = optional,
	      opts = [{default, true}]},
       #field{name = filter, fnum = 8, rnum = 9, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = start_column, fnum = 9, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = end_column, fnum = 10, rnum = 11,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'BatchGetRowRequest'},
      [#field{name = tables, fnum = 1, rnum = 2,
	      type = {msg, 'TableInBatchGetRowRequest'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'DeleteTableRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ListTableRequest'}, []},
     {{msg, 'UpdateTableRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = reserved_throughput, fnum = 2, rnum = 3,
	      type = {msg, 'ReservedThroughput'},
	      occurrence = optional, opts = []},
       #field{name = table_options, fnum = 3, rnum = 4,
	      type = {msg, 'TableOptions'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'CreateTableRequest'},
      [#field{name = table_meta, fnum = 1, rnum = 2,
	      type = {msg, 'TableMeta'}, occurrence = required,
	      opts = []},
       #field{name = reserved_throughput, fnum = 2, rnum = 3,
	      type = {msg, 'ReservedThroughput'},
	      occurrence = required, opts = []},
       #field{name = table_options, fnum = 3, rnum = 4,
	      type = {msg, 'TableOptions'}, occurrence = optional,
	      opts = []},
       #field{name = partitions, fnum = 4, rnum = 5,
	      type = {msg, 'PartitionRange'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'GetRowRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = primary_key, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []},
       #field{name = columns_to_get, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated, opts = []},
       #field{name = time_range, fnum = 4, rnum = 5,
	      type = {msg, 'TimeRange'}, occurrence = optional,
	      opts = []},
       #field{name = max_versions, fnum = 5, rnum = 6,
	      type = int32, occurrence = optional, opts = []},
       #field{name = cache_blocks, fnum = 6, rnum = 7,
	      type = bool, occurrence = optional,
	      opts = [{default, true}]},
       #field{name = filter, fnum = 7, rnum = 8, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = start_column, fnum = 8, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = end_column, fnum = 9, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = token, fnum = 10, rnum = 11, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'DescribeTableRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'DeleteRowResponse'},
      [#field{name = consumed, fnum = 1, rnum = 2,
	      type = {msg, 'ConsumedCapacity'}, occurrence = required,
	      opts = []},
       #field{name = row, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'UnloadTableResponse'}, []},
     {{msg, 'RowInBatchWriteRowResponse'},
      [#field{name = is_ok, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = error, fnum = 2, rnum = 3,
	      type = {msg, 'Error'}, occurrence = optional,
	      opts = []},
       #field{name = consumed, fnum = 3, rnum = 4,
	      type = {msg, 'ConsumedCapacity'}, occurrence = optional,
	      opts = []},
       #field{name = row, fnum = 4, rnum = 5, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'TableInBatchWriteRowResponse'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = rows, fnum = 2, rnum = 3,
	      type = {msg, 'RowInBatchWriteRowResponse'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'BatchWriteRowResponse'},
      [#field{name = tables, fnum = 1, rnum = 2,
	      type = {msg, 'TableInBatchWriteRowResponse'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'UpdateRowResponse'},
      [#field{name = consumed, fnum = 1, rnum = 2,
	      type = {msg, 'ConsumedCapacity'}, occurrence = required,
	      opts = []},
       #field{name = row, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'GetRowResponse'},
      [#field{name = consumed, fnum = 1, rnum = 2,
	      type = {msg, 'ConsumedCapacity'}, occurrence = required,
	      opts = []},
       #field{name = row, fnum = 2, rnum = 3, type = bytes,
	      occurrence = required, opts = []},
       #field{name = next_token, fnum = 3, rnum = 4,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'GetRangeResponse'},
      [#field{name = consumed, fnum = 1, rnum = 2,
	      type = {msg, 'ConsumedCapacity'}, occurrence = required,
	      opts = []},
       #field{name = rows, fnum = 2, rnum = 3, type = bytes,
	      occurrence = required, opts = []},
       #field{name = next_start_primary_key, fnum = 3,
	      rnum = 4, type = bytes, occurrence = optional,
	      opts = []},
       #field{name = next_token, fnum = 4, rnum = 5,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'TableInBatchGetRowResponse'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = rows, fnum = 2, rnum = 3,
	      type = {msg, 'RowInBatchGetRowResponse'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'BatchGetRowResponse'},
      [#field{name = tables, fnum = 1, rnum = 2,
	      type = {msg, 'TableInBatchGetRowResponse'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'LoadTableResponse'}, []},
     {{msg, 'ListTableResponse'},
      [#field{name = table_names, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'GetRangeRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = direction, fnum = 2, rnum = 3,
	      type = {enum, 'Direction'}, occurrence = required,
	      opts = []},
       #field{name = columns_to_get, fnum = 3, rnum = 4,
	      type = string, occurrence = repeated, opts = []},
       #field{name = time_range, fnum = 4, rnum = 5,
	      type = {msg, 'TimeRange'}, occurrence = optional,
	      opts = []},
       #field{name = max_versions, fnum = 5, rnum = 6,
	      type = int32, occurrence = optional, opts = []},
       #field{name = limit, fnum = 6, rnum = 7, type = int32,
	      occurrence = optional, opts = []},
       #field{name = inclusive_start_primary_key, fnum = 7,
	      rnum = 8, type = bytes, occurrence = required,
	      opts = []},
       #field{name = exclusive_end_primary_key, fnum = 8,
	      rnum = 9, type = bytes, occurrence = required,
	      opts = []},
       #field{name = cache_blocks, fnum = 9, rnum = 10,
	      type = bool, occurrence = optional,
	      opts = [{default, true}]},
       #field{name = filter, fnum = 10, rnum = 11,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = start_column, fnum = 11, rnum = 12,
	      type = string, occurrence = optional, opts = []},
       #field{name = end_column, fnum = 12, rnum = 13,
	      type = string, occurrence = optional, opts = []},
       #field{name = token, fnum = 13, rnum = 14, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'UpdateRowRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = row_change, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []},
       #field{name = condition, fnum = 3, rnum = 4,
	      type = {msg, 'Condition'}, occurrence = required,
	      opts = []},
       #field{name = return_content, fnum = 4, rnum = 5,
	      type = {msg, 'ReturnContent'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'DeleteRowRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = primary_key, fnum = 2, rnum = 3,
	      type = bytes, occurrence = required, opts = []},
       #field{name = condition, fnum = 3, rnum = 4,
	      type = {msg, 'Condition'}, occurrence = required,
	      opts = []},
       #field{name = return_content, fnum = 4, rnum = 5,
	      type = {msg, 'ReturnContent'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ComputeSplitPointsBySizeRequest'},
      [#field{name = table_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = split_size, fnum = 2, rnum = 3,
	      type = int64, occurrence = required, opts = []}]}].


get_msg_names() ->
    ['Condition', 'CapacityUnit', 'ConsumedCapacity',
     'ComputeSplitPointsBySizeResponse.SplitLocation',
     'PrimaryKeySchema', 'ComputeSplitPointsBySizeResponse',
     'DeleteTableResponse', 'CreateTableResponse',
     'TableOptions', 'ReservedThroughputDetails',
     'TableMeta', 'DescribeTableResponse', 'PartitionRange',
     'ReturnContent', 'RowInBatchWriteRowRequest',
     'TableInBatchWriteRowRequest', 'BatchWriteRowRequest',
     'UnloadTableRequest', 'LoadTableRequest',
     'PutRowRequest', 'Error', 'RowInBatchGetRowResponse',
     'UpdateTableResponse', 'PutRowResponse',
     'ReservedThroughput', 'TimeRange',
     'TableInBatchGetRowRequest', 'BatchGetRowRequest',
     'DeleteTableRequest', 'ListTableRequest',
     'UpdateTableRequest', 'CreateTableRequest',
     'GetRowRequest', 'DescribeTableRequest',
     'DeleteRowResponse', 'UnloadTableResponse',
     'RowInBatchWriteRowResponse',
     'TableInBatchWriteRowResponse', 'BatchWriteRowResponse',
     'UpdateRowResponse', 'GetRowResponse',
     'GetRangeResponse', 'TableInBatchGetRowResponse',
     'BatchGetRowResponse', 'LoadTableResponse',
     'ListTableResponse', 'GetRangeRequest',
     'UpdateRowRequest', 'DeleteRowRequest',
     'ComputeSplitPointsBySizeRequest'].


get_enum_names() ->
    ['PrimaryKeyType', 'PrimaryKeyOption',
     'BloomFilterType', 'TableStatus',
     'RowExistenceExpectation', 'ReturnType',
     'OperationType', 'Direction'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Condition') ->
    [#field{name = row_existence, fnum = 1, rnum = 2,
	    type = {enum, 'RowExistenceExpectation'},
	    occurrence = required, opts = []},
     #field{name = column_condition, fnum = 2, rnum = 3,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('CapacityUnit') ->
    [#field{name = read, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = write, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('ConsumedCapacity') ->
    [#field{name = capacity_unit, fnum = 1, rnum = 2,
	    type = {msg, 'CapacityUnit'}, occurrence = required,
	    opts = []}];
find_msg_def('ComputeSplitPointsBySizeResponse.SplitLocation') ->
    [#field{name = location, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = repeat, fnum = 2, rnum = 3, type = sint64,
	    occurrence = required, opts = []}];
find_msg_def('PrimaryKeySchema') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'PrimaryKeyType'}, occurrence = required,
	    opts = []},
     #field{name = option, fnum = 3, rnum = 4,
	    type = {enum, 'PrimaryKeyOption'},
	    occurrence = optional, opts = []}];
find_msg_def('ComputeSplitPointsBySizeResponse') ->
    [#field{name = consumed, fnum = 1, rnum = 2,
	    type = {msg, 'ConsumedCapacity'}, occurrence = required,
	    opts = []},
     #field{name = schema, fnum = 2, rnum = 3,
	    type = {msg, 'PrimaryKeySchema'}, occurrence = repeated,
	    opts = []},
     #field{name = split_points, fnum = 3, rnum = 4,
	    type = bytes, occurrence = repeated, opts = []},
     #field{name = locations, fnum = 4, rnum = 5,
	    type =
		{msg, 'ComputeSplitPointsBySizeResponse.SplitLocation'},
	    occurrence = repeated, opts = []}];
find_msg_def('DeleteTableResponse') -> [];
find_msg_def('CreateTableResponse') -> [];
find_msg_def('TableOptions') ->
    [#field{name = time_to_live, fnum = 1, rnum = 2,
	    type = int32, occurrence = optional, opts = []},
     #field{name = max_versions, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = bloom_filter_type, fnum = 3, rnum = 4,
	    type = {enum, 'BloomFilterType'}, occurrence = optional,
	    opts = []},
     #field{name = block_size, fnum = 4, rnum = 5,
	    type = int32, occurrence = optional, opts = []},
     #field{name = deviation_cell_version_in_sec, fnum = 5,
	    rnum = 6, type = int64, occurrence = optional,
	    opts = []}];
find_msg_def('ReservedThroughputDetails') ->
    [#field{name = capacity_unit, fnum = 1, rnum = 2,
	    type = {msg, 'CapacityUnit'}, occurrence = required,
	    opts = []},
     #field{name = last_increase_time, fnum = 2, rnum = 3,
	    type = int64, occurrence = required, opts = []},
     #field{name = last_decrease_time, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('TableMeta') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = primary_key, fnum = 2, rnum = 3,
	    type = {msg, 'PrimaryKeySchema'}, occurrence = repeated,
	    opts = []}];
find_msg_def('DescribeTableResponse') ->
    [#field{name = table_meta, fnum = 1, rnum = 2,
	    type = {msg, 'TableMeta'}, occurrence = required,
	    opts = []},
     #field{name = reserved_throughput_details, fnum = 2,
	    rnum = 3, type = {msg, 'ReservedThroughputDetails'},
	    occurrence = required, opts = []},
     #field{name = table_options, fnum = 3, rnum = 4,
	    type = {msg, 'TableOptions'}, occurrence = required,
	    opts = []},
     #field{name = table_status, fnum = 4, rnum = 5,
	    type = {enum, 'TableStatus'}, occurrence = required,
	    opts = []},
     #field{name = shard_splits, fnum = 6, rnum = 6,
	    type = bytes, occurrence = repeated, opts = []}];
find_msg_def('PartitionRange') ->
    [#field{name = 'begin', fnum = 1, rnum = 2,
	    type = bytes, occurrence = required, opts = []},
     #field{name = 'end', fnum = 2, rnum = 3, type = bytes,
	    occurrence = required, opts = []}];
find_msg_def('ReturnContent') ->
    [#field{name = return_type, fnum = 1, rnum = 2,
	    type = {enum, 'ReturnType'}, occurrence = optional,
	    opts = []}];
find_msg_def('RowInBatchWriteRowRequest') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'OperationType'}, occurrence = required,
	    opts = []},
     #field{name = row_change, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []},
     #field{name = condition, fnum = 3, rnum = 4,
	    type = {msg, 'Condition'}, occurrence = required,
	    opts = []},
     #field{name = return_content, fnum = 4, rnum = 5,
	    type = {msg, 'ReturnContent'}, occurrence = optional,
	    opts = []}];
find_msg_def('TableInBatchWriteRowRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = rows, fnum = 2, rnum = 3,
	    type = {msg, 'RowInBatchWriteRowRequest'},
	    occurrence = repeated, opts = []}];
find_msg_def('BatchWriteRowRequest') ->
    [#field{name = tables, fnum = 1, rnum = 2,
	    type = {msg, 'TableInBatchWriteRowRequest'},
	    occurrence = repeated, opts = []}];
find_msg_def('UnloadTableRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('LoadTableRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('PutRowRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = row, fnum = 2, rnum = 3, type = bytes,
	    occurrence = required, opts = []},
     #field{name = condition, fnum = 3, rnum = 4,
	    type = {msg, 'Condition'}, occurrence = required,
	    opts = []},
     #field{name = return_content, fnum = 4, rnum = 5,
	    type = {msg, 'ReturnContent'}, occurrence = optional,
	    opts = []}];
find_msg_def('Error') ->
    [#field{name = code, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = message, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('RowInBatchGetRowResponse') ->
    [#field{name = is_ok, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = error, fnum = 2, rnum = 3,
	    type = {msg, 'Error'}, occurrence = optional,
	    opts = []},
     #field{name = consumed, fnum = 3, rnum = 4,
	    type = {msg, 'ConsumedCapacity'}, occurrence = optional,
	    opts = []},
     #field{name = row, fnum = 4, rnum = 5, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = next_token, fnum = 5, rnum = 6,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('UpdateTableResponse') ->
    [#field{name = reserved_throughput_details, fnum = 1,
	    rnum = 2, type = {msg, 'ReservedThroughputDetails'},
	    occurrence = required, opts = []},
     #field{name = table_options, fnum = 2, rnum = 3,
	    type = {msg, 'TableOptions'}, occurrence = required,
	    opts = []}];
find_msg_def('PutRowResponse') ->
    [#field{name = consumed, fnum = 1, rnum = 2,
	    type = {msg, 'ConsumedCapacity'}, occurrence = required,
	    opts = []},
     #field{name = row, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('ReservedThroughput') ->
    [#field{name = capacity_unit, fnum = 1, rnum = 2,
	    type = {msg, 'CapacityUnit'}, occurrence = required,
	    opts = []}];
find_msg_def('TimeRange') ->
    [#field{name = start_time, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = end_time, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = specific_time, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('TableInBatchGetRowRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = primary_key, fnum = 2, rnum = 3,
	    type = bytes, occurrence = repeated, opts = []},
     #field{name = token, fnum = 3, rnum = 4, type = bytes,
	    occurrence = repeated, opts = []},
     #field{name = columns_to_get, fnum = 4, rnum = 5,
	    type = string, occurrence = repeated, opts = []},
     #field{name = time_range, fnum = 5, rnum = 6,
	    type = {msg, 'TimeRange'}, occurrence = optional,
	    opts = []},
     #field{name = max_versions, fnum = 6, rnum = 7,
	    type = int32, occurrence = optional, opts = []},
     #field{name = cache_blocks, fnum = 7, rnum = 8,
	    type = bool, occurrence = optional,
	    opts = [{default, true}]},
     #field{name = filter, fnum = 8, rnum = 9, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = start_column, fnum = 9, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = end_column, fnum = 10, rnum = 11,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('BatchGetRowRequest') ->
    [#field{name = tables, fnum = 1, rnum = 2,
	    type = {msg, 'TableInBatchGetRowRequest'},
	    occurrence = repeated, opts = []}];
find_msg_def('DeleteTableRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ListTableRequest') -> [];
find_msg_def('UpdateTableRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = reserved_throughput, fnum = 2, rnum = 3,
	    type = {msg, 'ReservedThroughput'},
	    occurrence = optional, opts = []},
     #field{name = table_options, fnum = 3, rnum = 4,
	    type = {msg, 'TableOptions'}, occurrence = optional,
	    opts = []}];
find_msg_def('CreateTableRequest') ->
    [#field{name = table_meta, fnum = 1, rnum = 2,
	    type = {msg, 'TableMeta'}, occurrence = required,
	    opts = []},
     #field{name = reserved_throughput, fnum = 2, rnum = 3,
	    type = {msg, 'ReservedThroughput'},
	    occurrence = required, opts = []},
     #field{name = table_options, fnum = 3, rnum = 4,
	    type = {msg, 'TableOptions'}, occurrence = optional,
	    opts = []},
     #field{name = partitions, fnum = 4, rnum = 5,
	    type = {msg, 'PartitionRange'}, occurrence = repeated,
	    opts = []}];
find_msg_def('GetRowRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = primary_key, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []},
     #field{name = columns_to_get, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = []},
     #field{name = time_range, fnum = 4, rnum = 5,
	    type = {msg, 'TimeRange'}, occurrence = optional,
	    opts = []},
     #field{name = max_versions, fnum = 5, rnum = 6,
	    type = int32, occurrence = optional, opts = []},
     #field{name = cache_blocks, fnum = 6, rnum = 7,
	    type = bool, occurrence = optional,
	    opts = [{default, true}]},
     #field{name = filter, fnum = 7, rnum = 8, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = start_column, fnum = 8, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = end_column, fnum = 9, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = token, fnum = 10, rnum = 11, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('DescribeTableRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('DeleteRowResponse') ->
    [#field{name = consumed, fnum = 1, rnum = 2,
	    type = {msg, 'ConsumedCapacity'}, occurrence = required,
	    opts = []},
     #field{name = row, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('UnloadTableResponse') -> [];
find_msg_def('RowInBatchWriteRowResponse') ->
    [#field{name = is_ok, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = error, fnum = 2, rnum = 3,
	    type = {msg, 'Error'}, occurrence = optional,
	    opts = []},
     #field{name = consumed, fnum = 3, rnum = 4,
	    type = {msg, 'ConsumedCapacity'}, occurrence = optional,
	    opts = []},
     #field{name = row, fnum = 4, rnum = 5, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('TableInBatchWriteRowResponse') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = rows, fnum = 2, rnum = 3,
	    type = {msg, 'RowInBatchWriteRowResponse'},
	    occurrence = repeated, opts = []}];
find_msg_def('BatchWriteRowResponse') ->
    [#field{name = tables, fnum = 1, rnum = 2,
	    type = {msg, 'TableInBatchWriteRowResponse'},
	    occurrence = repeated, opts = []}];
find_msg_def('UpdateRowResponse') ->
    [#field{name = consumed, fnum = 1, rnum = 2,
	    type = {msg, 'ConsumedCapacity'}, occurrence = required,
	    opts = []},
     #field{name = row, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('GetRowResponse') ->
    [#field{name = consumed, fnum = 1, rnum = 2,
	    type = {msg, 'ConsumedCapacity'}, occurrence = required,
	    opts = []},
     #field{name = row, fnum = 2, rnum = 3, type = bytes,
	    occurrence = required, opts = []},
     #field{name = next_token, fnum = 3, rnum = 4,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('GetRangeResponse') ->
    [#field{name = consumed, fnum = 1, rnum = 2,
	    type = {msg, 'ConsumedCapacity'}, occurrence = required,
	    opts = []},
     #field{name = rows, fnum = 2, rnum = 3, type = bytes,
	    occurrence = required, opts = []},
     #field{name = next_start_primary_key, fnum = 3,
	    rnum = 4, type = bytes, occurrence = optional,
	    opts = []},
     #field{name = next_token, fnum = 4, rnum = 5,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('TableInBatchGetRowResponse') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = rows, fnum = 2, rnum = 3,
	    type = {msg, 'RowInBatchGetRowResponse'},
	    occurrence = repeated, opts = []}];
find_msg_def('BatchGetRowResponse') ->
    [#field{name = tables, fnum = 1, rnum = 2,
	    type = {msg, 'TableInBatchGetRowResponse'},
	    occurrence = repeated, opts = []}];
find_msg_def('LoadTableResponse') -> [];
find_msg_def('ListTableResponse') ->
    [#field{name = table_names, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('GetRangeRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = direction, fnum = 2, rnum = 3,
	    type = {enum, 'Direction'}, occurrence = required,
	    opts = []},
     #field{name = columns_to_get, fnum = 3, rnum = 4,
	    type = string, occurrence = repeated, opts = []},
     #field{name = time_range, fnum = 4, rnum = 5,
	    type = {msg, 'TimeRange'}, occurrence = optional,
	    opts = []},
     #field{name = max_versions, fnum = 5, rnum = 6,
	    type = int32, occurrence = optional, opts = []},
     #field{name = limit, fnum = 6, rnum = 7, type = int32,
	    occurrence = optional, opts = []},
     #field{name = inclusive_start_primary_key, fnum = 7,
	    rnum = 8, type = bytes, occurrence = required,
	    opts = []},
     #field{name = exclusive_end_primary_key, fnum = 8,
	    rnum = 9, type = bytes, occurrence = required,
	    opts = []},
     #field{name = cache_blocks, fnum = 9, rnum = 10,
	    type = bool, occurrence = optional,
	    opts = [{default, true}]},
     #field{name = filter, fnum = 10, rnum = 11,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = start_column, fnum = 11, rnum = 12,
	    type = string, occurrence = optional, opts = []},
     #field{name = end_column, fnum = 12, rnum = 13,
	    type = string, occurrence = optional, opts = []},
     #field{name = token, fnum = 13, rnum = 14, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('UpdateRowRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = row_change, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []},
     #field{name = condition, fnum = 3, rnum = 4,
	    type = {msg, 'Condition'}, occurrence = required,
	    opts = []},
     #field{name = return_content, fnum = 4, rnum = 5,
	    type = {msg, 'ReturnContent'}, occurrence = optional,
	    opts = []}];
find_msg_def('DeleteRowRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = primary_key, fnum = 2, rnum = 3,
	    type = bytes, occurrence = required, opts = []},
     #field{name = condition, fnum = 3, rnum = 4,
	    type = {msg, 'Condition'}, occurrence = required,
	    opts = []},
     #field{name = return_content, fnum = 4, rnum = 5,
	    type = {msg, 'ReturnContent'}, occurrence = optional,
	    opts = []}];
find_msg_def('ComputeSplitPointsBySizeRequest') ->
    [#field{name = table_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = split_size, fnum = 2, rnum = 3,
	    type = int64, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('PrimaryKeyType') ->
    [{'INTEGER', 1}, {'STRING', 2}, {'BINARY', 3}];
find_enum_def('PrimaryKeyOption') ->
    [{'AUTO_INCREMENT', 1}];
find_enum_def('BloomFilterType') ->
    [{'NONE', 1}, {'CELL', 2}, {'ROW', 3}];
find_enum_def('TableStatus') ->
    [{'ACTIVE', 1}, {'INACTIVE', 2}, {'LOADING', 3},
     {'UNLOADING', 4}, {'UPDATING', 5}];
find_enum_def('RowExistenceExpectation') ->
    [{'IGNORE', 0}, {'EXPECT_EXIST', 1},
     {'EXPECT_NOT_EXIST', 2}];
find_enum_def('ReturnType') ->
    [{'RT_NONE', 0}, {'RT_PK', 1}];
find_enum_def('OperationType') ->
    [{'PUT', 1}, {'UPDATE', 2}, {'DELETE', 3}];
find_enum_def('Direction') ->
    [{'FORWARD', 0}, {'BACKWARD', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('PrimaryKeyType', Value) ->
    enum_symbol_by_value_PrimaryKeyType(Value);
enum_symbol_by_value('PrimaryKeyOption', Value) ->
    enum_symbol_by_value_PrimaryKeyOption(Value);
enum_symbol_by_value('BloomFilterType', Value) ->
    enum_symbol_by_value_BloomFilterType(Value);
enum_symbol_by_value('TableStatus', Value) ->
    enum_symbol_by_value_TableStatus(Value);
enum_symbol_by_value('RowExistenceExpectation',
		     Value) ->
    enum_symbol_by_value_RowExistenceExpectation(Value);
enum_symbol_by_value('ReturnType', Value) ->
    enum_symbol_by_value_ReturnType(Value);
enum_symbol_by_value('OperationType', Value) ->
    enum_symbol_by_value_OperationType(Value);
enum_symbol_by_value('Direction', Value) ->
    enum_symbol_by_value_Direction(Value).


enum_value_by_symbol('PrimaryKeyType', Sym) ->
    enum_value_by_symbol_PrimaryKeyType(Sym);
enum_value_by_symbol('PrimaryKeyOption', Sym) ->
    enum_value_by_symbol_PrimaryKeyOption(Sym);
enum_value_by_symbol('BloomFilterType', Sym) ->
    enum_value_by_symbol_BloomFilterType(Sym);
enum_value_by_symbol('TableStatus', Sym) ->
    enum_value_by_symbol_TableStatus(Sym);
enum_value_by_symbol('RowExistenceExpectation', Sym) ->
    enum_value_by_symbol_RowExistenceExpectation(Sym);
enum_value_by_symbol('ReturnType', Sym) ->
    enum_value_by_symbol_ReturnType(Sym);
enum_value_by_symbol('OperationType', Sym) ->
    enum_value_by_symbol_OperationType(Sym);
enum_value_by_symbol('Direction', Sym) ->
    enum_value_by_symbol_Direction(Sym).


enum_symbol_by_value_PrimaryKeyType(1) -> 'INTEGER';
enum_symbol_by_value_PrimaryKeyType(2) -> 'STRING';
enum_symbol_by_value_PrimaryKeyType(3) -> 'BINARY'.


enum_value_by_symbol_PrimaryKeyType('INTEGER') -> 1;
enum_value_by_symbol_PrimaryKeyType('STRING') -> 2;
enum_value_by_symbol_PrimaryKeyType('BINARY') -> 3.

enum_symbol_by_value_PrimaryKeyOption(1) ->
    'AUTO_INCREMENT'.


enum_value_by_symbol_PrimaryKeyOption('AUTO_INCREMENT') ->
    1.

enum_symbol_by_value_BloomFilterType(1) -> 'NONE';
enum_symbol_by_value_BloomFilterType(2) -> 'CELL';
enum_symbol_by_value_BloomFilterType(3) -> 'ROW'.


enum_value_by_symbol_BloomFilterType('NONE') -> 1;
enum_value_by_symbol_BloomFilterType('CELL') -> 2;
enum_value_by_symbol_BloomFilterType('ROW') -> 3.

enum_symbol_by_value_TableStatus(1) -> 'ACTIVE';
enum_symbol_by_value_TableStatus(2) -> 'INACTIVE';
enum_symbol_by_value_TableStatus(3) -> 'LOADING';
enum_symbol_by_value_TableStatus(4) -> 'UNLOADING';
enum_symbol_by_value_TableStatus(5) -> 'UPDATING'.


enum_value_by_symbol_TableStatus('ACTIVE') -> 1;
enum_value_by_symbol_TableStatus('INACTIVE') -> 2;
enum_value_by_symbol_TableStatus('LOADING') -> 3;
enum_value_by_symbol_TableStatus('UNLOADING') -> 4;
enum_value_by_symbol_TableStatus('UPDATING') -> 5.

enum_symbol_by_value_RowExistenceExpectation(0) ->
    'IGNORE';
enum_symbol_by_value_RowExistenceExpectation(1) ->
    'EXPECT_EXIST';
enum_symbol_by_value_RowExistenceExpectation(2) ->
    'EXPECT_NOT_EXIST'.


enum_value_by_symbol_RowExistenceExpectation('IGNORE') ->
    0;
enum_value_by_symbol_RowExistenceExpectation('EXPECT_EXIST') ->
    1;
enum_value_by_symbol_RowExistenceExpectation('EXPECT_NOT_EXIST') ->
    2.

enum_symbol_by_value_ReturnType(0) -> 'RT_NONE';
enum_symbol_by_value_ReturnType(1) -> 'RT_PK'.


enum_value_by_symbol_ReturnType('RT_NONE') -> 0;
enum_value_by_symbol_ReturnType('RT_PK') -> 1.

enum_symbol_by_value_OperationType(1) -> 'PUT';
enum_symbol_by_value_OperationType(2) -> 'UPDATE';
enum_symbol_by_value_OperationType(3) -> 'DELETE'.


enum_value_by_symbol_OperationType('PUT') -> 1;
enum_value_by_symbol_OperationType('UPDATE') -> 2;
enum_value_by_symbol_OperationType('DELETE') -> 3.

enum_symbol_by_value_Direction(0) -> 'FORWARD';
enum_symbol_by_value_Direction(1) -> 'BACKWARD'.


enum_value_by_symbol_Direction('FORWARD') -> 0;
enum_value_by_symbol_Direction('BACKWARD') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'com.aliyun.tablestore.protocol'.



gpb_version_as_string() ->
    "3.26.8".

gpb_version_as_list() ->
    [3,26,8].
